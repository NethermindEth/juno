// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p/proto/sync/state.proto

package state

import (
	common "github.com/starknet-io/starknet-p2pspecs/p2p/proto/common"
	common1 "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// optimized for flat storage, not through a trie (not sharing key prefixes)
type ContractStoredValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *common.Felt252        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *common.Felt252        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractStoredValue) Reset() {
	*x = ContractStoredValue{}
	mi := &file_p2p_proto_sync_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractStoredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStoredValue) ProtoMessage() {}

func (x *ContractStoredValue) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStoredValue.ProtoReflect.Descriptor instead.
func (*ContractStoredValue) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_state_proto_rawDescGZIP(), []int{0}
}

func (x *ContractStoredValue) GetKey() *common.Felt252 {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ContractStoredValue) GetValue() *common.Felt252 {
	if x != nil {
		return x.Value
	}
	return nil
}

type ContractDiff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *common.Address        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nonce         *common.Felt252        `protobuf:"bytes,2,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`                          // Present only if the nonce was updated
	ClassHash     *common.Hash           `protobuf:"bytes,3,opt,name=class_hash,json=classHash,proto3,oneof" json:"class_hash,omitempty"` // Present only if the contract was deployed or replaced in this block.
	Values        []*ContractStoredValue `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	Domain        common.VolitionDomain  `protobuf:"varint,5,opt,name=domain,proto3,enum=VolitionDomain" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractDiff) Reset() {
	*x = ContractDiff{}
	mi := &file_p2p_proto_sync_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDiff) ProtoMessage() {}

func (x *ContractDiff) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDiff.ProtoReflect.Descriptor instead.
func (*ContractDiff) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_state_proto_rawDescGZIP(), []int{1}
}

func (x *ContractDiff) GetAddress() *common.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractDiff) GetNonce() *common.Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ContractDiff) GetClassHash() *common.Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *ContractDiff) GetValues() []*ContractStoredValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ContractDiff) GetDomain() common.VolitionDomain {
	if x != nil {
		return x.Domain
	}
	return common.VolitionDomain(0)
}

type DeclaredClass struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ClassHash         *common.Hash           `protobuf:"bytes,1,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	CompiledClassHash *common.Hash           `protobuf:"bytes,2,opt,name=compiled_class_hash,json=compiledClassHash,proto3,oneof" json:"compiled_class_hash,omitempty"` // Present only if the class is Cairo1
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeclaredClass) Reset() {
	*x = DeclaredClass{}
	mi := &file_p2p_proto_sync_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclaredClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredClass) ProtoMessage() {}

func (x *DeclaredClass) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredClass.ProtoReflect.Descriptor instead.
func (*DeclaredClass) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_state_proto_rawDescGZIP(), []int{2}
}

func (x *DeclaredClass) GetClassHash() *common.Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *DeclaredClass) GetCompiledClassHash() *common.Hash {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

type StateDiffsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iteration     *common1.Iteration     `protobuf:"bytes,1,opt,name=iteration,proto3" json:"iteration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateDiffsRequest) Reset() {
	*x = StateDiffsRequest{}
	mi := &file_p2p_proto_sync_state_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateDiffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiffsRequest) ProtoMessage() {}

func (x *StateDiffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_state_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiffsRequest.ProtoReflect.Descriptor instead.
func (*StateDiffsRequest) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_state_proto_rawDescGZIP(), []int{3}
}

func (x *StateDiffsRequest) GetIteration() *common1.Iteration {
	if x != nil {
		return x.Iteration
	}
	return nil
}

// Responses are sent ordered by the order given in the request.
type StateDiffsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All of the messages related to a block need to be sent before a message from the next block is sent.
	//
	// Types that are valid to be assigned to StateDiffMessage:
	//
	//	*StateDiffsResponse_ContractDiff
	//	*StateDiffsResponse_DeclaredClass
	//	*StateDiffsResponse_Fin
	StateDiffMessage isStateDiffsResponse_StateDiffMessage `protobuf_oneof:"state_diff_message"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StateDiffsResponse) Reset() {
	*x = StateDiffsResponse{}
	mi := &file_p2p_proto_sync_state_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateDiffsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiffsResponse) ProtoMessage() {}

func (x *StateDiffsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_state_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiffsResponse.ProtoReflect.Descriptor instead.
func (*StateDiffsResponse) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_state_proto_rawDescGZIP(), []int{4}
}

func (x *StateDiffsResponse) GetStateDiffMessage() isStateDiffsResponse_StateDiffMessage {
	if x != nil {
		return x.StateDiffMessage
	}
	return nil
}

func (x *StateDiffsResponse) GetContractDiff() *ContractDiff {
	if x != nil {
		if x, ok := x.StateDiffMessage.(*StateDiffsResponse_ContractDiff); ok {
			return x.ContractDiff
		}
	}
	return nil
}

func (x *StateDiffsResponse) GetDeclaredClass() *DeclaredClass {
	if x != nil {
		if x, ok := x.StateDiffMessage.(*StateDiffsResponse_DeclaredClass); ok {
			return x.DeclaredClass
		}
	}
	return nil
}

func (x *StateDiffsResponse) GetFin() *common.Fin {
	if x != nil {
		if x, ok := x.StateDiffMessage.(*StateDiffsResponse_Fin); ok {
			return x.Fin
		}
	}
	return nil
}

type isStateDiffsResponse_StateDiffMessage interface {
	isStateDiffsResponse_StateDiffMessage()
}

type StateDiffsResponse_ContractDiff struct {
	ContractDiff *ContractDiff `protobuf:"bytes,1,opt,name=contract_diff,json=contractDiff,proto3,oneof"` // Multiple contract diffs for the same contract may appear continuously if the diff is too large or if it's more convenient.
}

type StateDiffsResponse_DeclaredClass struct {
	DeclaredClass *DeclaredClass `protobuf:"bytes,2,opt,name=declared_class,json=declaredClass,proto3,oneof"`
}

type StateDiffsResponse_Fin struct {
	Fin *common.Fin `protobuf:"bytes,3,opt,name=fin,proto3,oneof"` // Fin is sent after the peer sent all the data or when it encountered a block that it doesn't have its state diff.
}

func (*StateDiffsResponse_ContractDiff) isStateDiffsResponse_StateDiffMessage() {}

func (*StateDiffsResponse_DeclaredClass) isStateDiffsResponse_StateDiffMessage() {}

func (*StateDiffsResponse_Fin) isStateDiffsResponse_StateDiffMessage() {}

var File_p2p_proto_sync_state_proto protoreflect.FileDescriptor

const file_p2p_proto_sync_state_proto_rawDesc = "" +
	"\n" +
	"\x1ap2p/proto/sync/state.proto\x1a\x16p2p/proto/common.proto\x1a\x1bp2p/proto/sync/common.proto\"Q\n" +
	"\x13ContractStoredValue\x12\x1a\n" +
	"\x03key\x18\x01 \x01(\v2\b.Felt252R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.Felt252R\x05value\"\xf2\x01\n" +
	"\fContractDiff\x12\"\n" +
	"\aaddress\x18\x01 \x01(\v2\b.AddressR\aaddress\x12#\n" +
	"\x05nonce\x18\x02 \x01(\v2\b.Felt252H\x00R\x05nonce\x88\x01\x01\x12)\n" +
	"\n" +
	"class_hash\x18\x03 \x01(\v2\x05.HashH\x01R\tclassHash\x88\x01\x01\x12,\n" +
	"\x06values\x18\x04 \x03(\v2\x14.ContractStoredValueR\x06values\x12'\n" +
	"\x06domain\x18\x05 \x01(\x0e2\x0f.VolitionDomainR\x06domainB\b\n" +
	"\x06_nonceB\r\n" +
	"\v_class_hash\"\x89\x01\n" +
	"\rDeclaredClass\x12$\n" +
	"\n" +
	"class_hash\x18\x01 \x01(\v2\x05.HashR\tclassHash\x12:\n" +
	"\x13compiled_class_hash\x18\x02 \x01(\v2\x05.HashH\x00R\x11compiledClassHash\x88\x01\x01B\x16\n" +
	"\x14_compiled_class_hash\"=\n" +
	"\x11StateDiffsRequest\x12(\n" +
	"\titeration\x18\x01 \x01(\v2\n" +
	".IterationR\titeration\"\xb3\x01\n" +
	"\x12StateDiffsResponse\x124\n" +
	"\rcontract_diff\x18\x01 \x01(\v2\r.ContractDiffH\x00R\fcontractDiff\x127\n" +
	"\x0edeclared_class\x18\x02 \x01(\v2\x0e.DeclaredClassH\x00R\rdeclaredClass\x12\x18\n" +
	"\x03fin\x18\x03 \x01(\v2\x04.FinH\x00R\x03finB\x14\n" +
	"\x12state_diff_messageB?Z=github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/stateb\x06proto3"

var (
	file_p2p_proto_sync_state_proto_rawDescOnce sync.Once
	file_p2p_proto_sync_state_proto_rawDescData []byte
)

func file_p2p_proto_sync_state_proto_rawDescGZIP() []byte {
	file_p2p_proto_sync_state_proto_rawDescOnce.Do(func() {
		file_p2p_proto_sync_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_sync_state_proto_rawDesc), len(file_p2p_proto_sync_state_proto_rawDesc)))
	})
	return file_p2p_proto_sync_state_proto_rawDescData
}

var file_p2p_proto_sync_state_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_p2p_proto_sync_state_proto_goTypes = []any{
	(*ContractStoredValue)(nil), // 0: ContractStoredValue
	(*ContractDiff)(nil),        // 1: ContractDiff
	(*DeclaredClass)(nil),       // 2: DeclaredClass
	(*StateDiffsRequest)(nil),   // 3: StateDiffsRequest
	(*StateDiffsResponse)(nil),  // 4: StateDiffsResponse
	(*common.Felt252)(nil),      // 5: Felt252
	(*common.Address)(nil),      // 6: Address
	(*common.Hash)(nil),         // 7: Hash
	(common.VolitionDomain)(0),  // 8: VolitionDomain
	(*common1.Iteration)(nil),   // 9: Iteration
	(*common.Fin)(nil),          // 10: Fin
}
var file_p2p_proto_sync_state_proto_depIdxs = []int32{
	5,  // 0: ContractStoredValue.key:type_name -> Felt252
	5,  // 1: ContractStoredValue.value:type_name -> Felt252
	6,  // 2: ContractDiff.address:type_name -> Address
	5,  // 3: ContractDiff.nonce:type_name -> Felt252
	7,  // 4: ContractDiff.class_hash:type_name -> Hash
	0,  // 5: ContractDiff.values:type_name -> ContractStoredValue
	8,  // 6: ContractDiff.domain:type_name -> VolitionDomain
	7,  // 7: DeclaredClass.class_hash:type_name -> Hash
	7,  // 8: DeclaredClass.compiled_class_hash:type_name -> Hash
	9,  // 9: StateDiffsRequest.iteration:type_name -> Iteration
	1,  // 10: StateDiffsResponse.contract_diff:type_name -> ContractDiff
	2,  // 11: StateDiffsResponse.declared_class:type_name -> DeclaredClass
	10, // 12: StateDiffsResponse.fin:type_name -> Fin
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_p2p_proto_sync_state_proto_init() }
func file_p2p_proto_sync_state_proto_init() {
	if File_p2p_proto_sync_state_proto != nil {
		return
	}
	file_p2p_proto_sync_state_proto_msgTypes[1].OneofWrappers = []any{}
	file_p2p_proto_sync_state_proto_msgTypes[2].OneofWrappers = []any{}
	file_p2p_proto_sync_state_proto_msgTypes[4].OneofWrappers = []any{
		(*StateDiffsResponse_ContractDiff)(nil),
		(*StateDiffsResponse_DeclaredClass)(nil),
		(*StateDiffsResponse_Fin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_sync_state_proto_rawDesc), len(file_p2p_proto_sync_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_sync_state_proto_goTypes,
		DependencyIndexes: file_p2p_proto_sync_state_proto_depIdxs,
		MessageInfos:      file_p2p_proto_sync_state_proto_msgTypes,
	}.Build()
	File_p2p_proto_sync_state_proto = out.File
	file_p2p_proto_sync_state_proto_goTypes = nil
	file_p2p_proto_sync_state_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p/proto/sync/header.proto

package header

import (
	common "github.com/starknet-io/starknet-p2pspecs/p2p/proto/common"
	common1 "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: commitments may change to be for the previous blocks like comet/tendermint
// hash of block header sent to L1
type SignedBlockHeader struct {
	state               protoimpl.MessageState       `protogen:"open.v1"`
	BlockHash           *common.Hash                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"` //  For the structure of the block hash, see https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/header/#block_hash
	ParentHash          *common.Hash                 `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Number              uint64                       `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"` // This can be deduced from context. We can consider removing this field.
	Time                uint64                       `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`     // Encoded in Unix time.
	SequencerAddress    *common.Address              `protobuf:"bytes,5,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
	StateRoot           *common.Hash                 `protobuf:"bytes,6,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`                                 // Patricia root of contract and class patricia tries. Each of those tries are of height 251. Same as in L1. Later more trees will be included
	StateDiffCommitment *common1.StateDiffCommitment `protobuf:"bytes,7,opt,name=state_diff_commitment,json=stateDiffCommitment,proto3" json:"state_diff_commitment,omitempty"` // The state diff commitment returned  by the Starknet Feeder Gateway
	// For more info, see https://community.starknet.io/t/introducing-p2p-authentication-and-mismatch-resolution-in-v0-12-2/97993
	// The leaves contain a hash of the transaction hash and transaction signature.
	Transactions           *common.Patricia              `protobuf:"bytes,8,opt,name=transactions,proto3" json:"transactions,omitempty"`                               // By order of execution. TBD: required? the client can execute (powerful machine) and match state diff
	Events                 *common.Patricia              `protobuf:"bytes,9,opt,name=events,proto3" json:"events,omitempty"`                                           // By order of issuance. TBD: in receipts?
	Receipts               *common.Hash                  `protobuf:"bytes,10,opt,name=receipts,proto3" json:"receipts,omitempty"`                                      // By order of issuance. This is a patricia root. No need for length because it's the same length as transactions.
	ProtocolVersion        string                        `protobuf:"bytes,11,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // Starknet version
	L1GasPriceFri          *common.Uint128               `protobuf:"bytes,12,opt,name=l1_gas_price_fri,json=l1GasPriceFri,proto3" json:"l1_gas_price_fri,omitempty"`
	L1GasPriceWei          *common.Uint128               `protobuf:"bytes,13,opt,name=l1_gas_price_wei,json=l1GasPriceWei,proto3" json:"l1_gas_price_wei,omitempty"`
	L1DataGasPriceFri      *common.Uint128               `protobuf:"bytes,14,opt,name=l1_data_gas_price_fri,json=l1DataGasPriceFri,proto3" json:"l1_data_gas_price_fri,omitempty"`
	L1DataGasPriceWei      *common.Uint128               `protobuf:"bytes,15,opt,name=l1_data_gas_price_wei,json=l1DataGasPriceWei,proto3" json:"l1_data_gas_price_wei,omitempty"`
	L2GasPriceFri          *common.Uint128               `protobuf:"bytes,16,opt,name=l2_gas_price_fri,json=l2GasPriceFri,proto3" json:"l2_gas_price_fri,omitempty"`
	L2GasPriceWei          *common.Uint128               `protobuf:"bytes,17,opt,name=l2_gas_price_wei,json=l2GasPriceWei,proto3" json:"l2_gas_price_wei,omitempty"`
	L1DataAvailabilityMode common.L1DataAvailabilityMode `protobuf:"varint,18,opt,name=l1_data_availability_mode,json=l1DataAvailabilityMode,proto3,enum=L1DataAvailabilityMode" json:"l1_data_availability_mode,omitempty"`
	// for now, we assume a small consensus, so this fits in 1M. Else, these will be repeated and extracted from this message.
	Signatures    []*common.ConsensusSignature `protobuf:"bytes,19,rep,name=signatures,proto3" json:"signatures,omitempty"` // can be more explicit here about the signature structure as this is not part of account abstraction
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedBlockHeader) Reset() {
	*x = SignedBlockHeader{}
	mi := &file_p2p_proto_sync_header_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlockHeader) ProtoMessage() {}

func (x *SignedBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_header_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlockHeader.ProtoReflect.Descriptor instead.
func (*SignedBlockHeader) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_header_proto_rawDescGZIP(), []int{0}
}

func (x *SignedBlockHeader) GetBlockHash() *common.Hash {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *SignedBlockHeader) GetParentHash() *common.Hash {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *SignedBlockHeader) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SignedBlockHeader) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SignedBlockHeader) GetSequencerAddress() *common.Address {
	if x != nil {
		return x.SequencerAddress
	}
	return nil
}

func (x *SignedBlockHeader) GetStateRoot() *common.Hash {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *SignedBlockHeader) GetStateDiffCommitment() *common1.StateDiffCommitment {
	if x != nil {
		return x.StateDiffCommitment
	}
	return nil
}

func (x *SignedBlockHeader) GetTransactions() *common.Patricia {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SignedBlockHeader) GetEvents() *common.Patricia {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SignedBlockHeader) GetReceipts() *common.Hash {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *SignedBlockHeader) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *SignedBlockHeader) GetL1GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L1GasPriceFri
	}
	return nil
}

func (x *SignedBlockHeader) GetL1GasPriceWei() *common.Uint128 {
	if x != nil {
		return x.L1GasPriceWei
	}
	return nil
}

func (x *SignedBlockHeader) GetL1DataGasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L1DataGasPriceFri
	}
	return nil
}

func (x *SignedBlockHeader) GetL1DataGasPriceWei() *common.Uint128 {
	if x != nil {
		return x.L1DataGasPriceWei
	}
	return nil
}

func (x *SignedBlockHeader) GetL2GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L2GasPriceFri
	}
	return nil
}

func (x *SignedBlockHeader) GetL2GasPriceWei() *common.Uint128 {
	if x != nil {
		return x.L2GasPriceWei
	}
	return nil
}

func (x *SignedBlockHeader) GetL1DataAvailabilityMode() common.L1DataAvailabilityMode {
	if x != nil {
		return x.L1DataAvailabilityMode
	}
	return common.L1DataAvailabilityMode(0)
}

func (x *SignedBlockHeader) GetSignatures() []*common.ConsensusSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// sent to all peers (except the ones this was received from, if any).
// for a fraction of peers, also send the GetBlockHeaders response (as if they asked for it for this block)
type NewBlock struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MaybeFull:
	//
	//	*NewBlock_Id
	//	*NewBlock_Header
	MaybeFull     isNewBlock_MaybeFull `protobuf_oneof:"maybe_full"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewBlock) Reset() {
	*x = NewBlock{}
	mi := &file_p2p_proto_sync_header_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlock) ProtoMessage() {}

func (x *NewBlock) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_header_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlock.ProtoReflect.Descriptor instead.
func (*NewBlock) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_header_proto_rawDescGZIP(), []int{1}
}

func (x *NewBlock) GetMaybeFull() isNewBlock_MaybeFull {
	if x != nil {
		return x.MaybeFull
	}
	return nil
}

func (x *NewBlock) GetId() *common.BlockID {
	if x != nil {
		if x, ok := x.MaybeFull.(*NewBlock_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *NewBlock) GetHeader() *BlockHeadersResponse {
	if x != nil {
		if x, ok := x.MaybeFull.(*NewBlock_Header); ok {
			return x.Header
		}
	}
	return nil
}

type isNewBlock_MaybeFull interface {
	isNewBlock_MaybeFull()
}

type NewBlock_Id struct {
	Id *common.BlockID `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NewBlock_Header struct {
	Header *BlockHeadersResponse `protobuf:"bytes,2,opt,name=header,proto3,oneof"`
}

func (*NewBlock_Id) isNewBlock_MaybeFull() {}

func (*NewBlock_Header) isNewBlock_MaybeFull() {}

type BlockHeadersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iteration     *common1.Iteration     `protobuf:"bytes,1,opt,name=iteration,proto3" json:"iteration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHeadersRequest) Reset() {
	*x = BlockHeadersRequest{}
	mi := &file_p2p_proto_sync_header_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeadersRequest) ProtoMessage() {}

func (x *BlockHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_header_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeadersRequest.ProtoReflect.Descriptor instead.
func (*BlockHeadersRequest) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_header_proto_rawDescGZIP(), []int{2}
}

func (x *BlockHeadersRequest) GetIteration() *common1.Iteration {
	if x != nil {
		return x.Iteration
	}
	return nil
}

// Responses are sent ordered by the order given in the request.
type BlockHeadersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to HeaderMessage:
	//
	//	*BlockHeadersResponse_Header
	//	*BlockHeadersResponse_Fin
	HeaderMessage isBlockHeadersResponse_HeaderMessage `protobuf_oneof:"header_message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHeadersResponse) Reset() {
	*x = BlockHeadersResponse{}
	mi := &file_p2p_proto_sync_header_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeadersResponse) ProtoMessage() {}

func (x *BlockHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_sync_header_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeadersResponse.ProtoReflect.Descriptor instead.
func (*BlockHeadersResponse) Descriptor() ([]byte, []int) {
	return file_p2p_proto_sync_header_proto_rawDescGZIP(), []int{3}
}

func (x *BlockHeadersResponse) GetHeaderMessage() isBlockHeadersResponse_HeaderMessage {
	if x != nil {
		return x.HeaderMessage
	}
	return nil
}

func (x *BlockHeadersResponse) GetHeader() *SignedBlockHeader {
	if x != nil {
		if x, ok := x.HeaderMessage.(*BlockHeadersResponse_Header); ok {
			return x.Header
		}
	}
	return nil
}

func (x *BlockHeadersResponse) GetFin() *common.Fin {
	if x != nil {
		if x, ok := x.HeaderMessage.(*BlockHeadersResponse_Fin); ok {
			return x.Fin
		}
	}
	return nil
}

type isBlockHeadersResponse_HeaderMessage interface {
	isBlockHeadersResponse_HeaderMessage()
}

type BlockHeadersResponse_Header struct {
	Header *SignedBlockHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type BlockHeadersResponse_Fin struct {
	Fin *common.Fin `protobuf:"bytes,2,opt,name=fin,proto3,oneof"` // Fin is sent after the peer sent all the data or when it encountered a block that it doesn't have its header.
}

func (*BlockHeadersResponse_Header) isBlockHeadersResponse_HeaderMessage() {}

func (*BlockHeadersResponse_Fin) isBlockHeadersResponse_HeaderMessage() {}

var File_p2p_proto_sync_header_proto protoreflect.FileDescriptor

const file_p2p_proto_sync_header_proto_rawDesc = "" +
	"\n" +
	"\x1bp2p/proto/sync/header.proto\x1a\x16p2p/proto/common.proto\x1a\x1bp2p/proto/sync/common.proto\"\xa1\a\n" +
	"\x11SignedBlockHeader\x12$\n" +
	"\n" +
	"block_hash\x18\x01 \x01(\v2\x05.HashR\tblockHash\x12&\n" +
	"\vparent_hash\x18\x02 \x01(\v2\x05.HashR\n" +
	"parentHash\x12\x16\n" +
	"\x06number\x18\x03 \x01(\x04R\x06number\x12\x12\n" +
	"\x04time\x18\x04 \x01(\x04R\x04time\x125\n" +
	"\x11sequencer_address\x18\x05 \x01(\v2\b.AddressR\x10sequencerAddress\x12$\n" +
	"\n" +
	"state_root\x18\x06 \x01(\v2\x05.HashR\tstateRoot\x12H\n" +
	"\x15state_diff_commitment\x18\a \x01(\v2\x14.StateDiffCommitmentR\x13stateDiffCommitment\x12-\n" +
	"\ftransactions\x18\b \x01(\v2\t.PatriciaR\ftransactions\x12!\n" +
	"\x06events\x18\t \x01(\v2\t.PatriciaR\x06events\x12!\n" +
	"\breceipts\x18\n" +
	" \x01(\v2\x05.HashR\breceipts\x12)\n" +
	"\x10protocol_version\x18\v \x01(\tR\x0fprotocolVersion\x121\n" +
	"\x10l1_gas_price_fri\x18\f \x01(\v2\b.Uint128R\rl1GasPriceFri\x121\n" +
	"\x10l1_gas_price_wei\x18\r \x01(\v2\b.Uint128R\rl1GasPriceWei\x12:\n" +
	"\x15l1_data_gas_price_fri\x18\x0e \x01(\v2\b.Uint128R\x11l1DataGasPriceFri\x12:\n" +
	"\x15l1_data_gas_price_wei\x18\x0f \x01(\v2\b.Uint128R\x11l1DataGasPriceWei\x121\n" +
	"\x10l2_gas_price_fri\x18\x10 \x01(\v2\b.Uint128R\rl2GasPriceFri\x121\n" +
	"\x10l2_gas_price_wei\x18\x11 \x01(\v2\b.Uint128R\rl2GasPriceWei\x12R\n" +
	"\x19l1_data_availability_mode\x18\x12 \x01(\x0e2\x17.L1DataAvailabilityModeR\x16l1DataAvailabilityMode\x123\n" +
	"\n" +
	"signatures\x18\x13 \x03(\v2\x13.ConsensusSignatureR\n" +
	"signatures\"e\n" +
	"\bNewBlock\x12\x1a\n" +
	"\x02id\x18\x01 \x01(\v2\b.BlockIDH\x00R\x02id\x12/\n" +
	"\x06header\x18\x02 \x01(\v2\x15.BlockHeadersResponseH\x00R\x06headerB\f\n" +
	"\n" +
	"maybe_full\"?\n" +
	"\x13BlockHeadersRequest\x12(\n" +
	"\titeration\x18\x01 \x01(\v2\n" +
	".IterationR\titeration\"p\n" +
	"\x14BlockHeadersResponse\x12,\n" +
	"\x06header\x18\x01 \x01(\v2\x12.SignedBlockHeaderH\x00R\x06header\x12\x18\n" +
	"\x03fin\x18\x02 \x01(\v2\x04.FinH\x00R\x03finB\x10\n" +
	"\x0eheader_messageB@Z>github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/headerb\x06proto3"

var (
	file_p2p_proto_sync_header_proto_rawDescOnce sync.Once
	file_p2p_proto_sync_header_proto_rawDescData []byte
)

func file_p2p_proto_sync_header_proto_rawDescGZIP() []byte {
	file_p2p_proto_sync_header_proto_rawDescOnce.Do(func() {
		file_p2p_proto_sync_header_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_sync_header_proto_rawDesc), len(file_p2p_proto_sync_header_proto_rawDesc)))
	})
	return file_p2p_proto_sync_header_proto_rawDescData
}

var file_p2p_proto_sync_header_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_p2p_proto_sync_header_proto_goTypes = []any{
	(*SignedBlockHeader)(nil),           // 0: SignedBlockHeader
	(*NewBlock)(nil),                    // 1: NewBlock
	(*BlockHeadersRequest)(nil),         // 2: BlockHeadersRequest
	(*BlockHeadersResponse)(nil),        // 3: BlockHeadersResponse
	(*common.Hash)(nil),                 // 4: Hash
	(*common.Address)(nil),              // 5: Address
	(*common1.StateDiffCommitment)(nil), // 6: StateDiffCommitment
	(*common.Patricia)(nil),             // 7: Patricia
	(*common.Uint128)(nil),              // 8: Uint128
	(common.L1DataAvailabilityMode)(0),  // 9: L1DataAvailabilityMode
	(*common.ConsensusSignature)(nil),   // 10: ConsensusSignature
	(*common.BlockID)(nil),              // 11: BlockID
	(*common1.Iteration)(nil),           // 12: Iteration
	(*common.Fin)(nil),                  // 13: Fin
}
var file_p2p_proto_sync_header_proto_depIdxs = []int32{
	4,  // 0: SignedBlockHeader.block_hash:type_name -> Hash
	4,  // 1: SignedBlockHeader.parent_hash:type_name -> Hash
	5,  // 2: SignedBlockHeader.sequencer_address:type_name -> Address
	4,  // 3: SignedBlockHeader.state_root:type_name -> Hash
	6,  // 4: SignedBlockHeader.state_diff_commitment:type_name -> StateDiffCommitment
	7,  // 5: SignedBlockHeader.transactions:type_name -> Patricia
	7,  // 6: SignedBlockHeader.events:type_name -> Patricia
	4,  // 7: SignedBlockHeader.receipts:type_name -> Hash
	8,  // 8: SignedBlockHeader.l1_gas_price_fri:type_name -> Uint128
	8,  // 9: SignedBlockHeader.l1_gas_price_wei:type_name -> Uint128
	8,  // 10: SignedBlockHeader.l1_data_gas_price_fri:type_name -> Uint128
	8,  // 11: SignedBlockHeader.l1_data_gas_price_wei:type_name -> Uint128
	8,  // 12: SignedBlockHeader.l2_gas_price_fri:type_name -> Uint128
	8,  // 13: SignedBlockHeader.l2_gas_price_wei:type_name -> Uint128
	9,  // 14: SignedBlockHeader.l1_data_availability_mode:type_name -> L1DataAvailabilityMode
	10, // 15: SignedBlockHeader.signatures:type_name -> ConsensusSignature
	11, // 16: NewBlock.id:type_name -> BlockID
	3,  // 17: NewBlock.header:type_name -> BlockHeadersResponse
	12, // 18: BlockHeadersRequest.iteration:type_name -> Iteration
	0,  // 19: BlockHeadersResponse.header:type_name -> SignedBlockHeader
	13, // 20: BlockHeadersResponse.fin:type_name -> Fin
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_p2p_proto_sync_header_proto_init() }
func file_p2p_proto_sync_header_proto_init() {
	if File_p2p_proto_sync_header_proto != nil {
		return
	}
	file_p2p_proto_sync_header_proto_msgTypes[1].OneofWrappers = []any{
		(*NewBlock_Id)(nil),
		(*NewBlock_Header)(nil),
	}
	file_p2p_proto_sync_header_proto_msgTypes[3].OneofWrappers = []any{
		(*BlockHeadersResponse_Header)(nil),
		(*BlockHeadersResponse_Fin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_sync_header_proto_rawDesc), len(file_p2p_proto_sync_header_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_sync_header_proto_goTypes,
		DependencyIndexes: file_p2p_proto_sync_header_proto_depIdxs,
		MessageInfos:      file_p2p_proto_sync_header_proto_msgTypes,
	}.Build()
	File_p2p_proto_sync_header_proto = out.File
	file_p2p_proto_sync_header_proto_goTypes = nil
	file_p2p_proto_sync_header_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p/proto/discovery.proto

package discovery

import (
	common "github.com/starknet-io/starknet-p2pspecs/p2p/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultiAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiAddress) Reset() {
	*x = MultiAddress{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAddress) ProtoMessage() {}

func (x *MultiAddress) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAddress.ProtoReflect.Descriptor instead.
func (*MultiAddress) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *MultiAddress) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// advertise what queries a peer can reply to (it can always query others for whatever it wants)
type Capability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      string                 `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Capability    []byte                 `protobuf:"bytes,2,opt,name=capability,proto3" json:"capability,omitempty"` // The content of the capability.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capability) Reset() {
	*x = Capability{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capability) ProtoMessage() {}

func (x *Capability) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capability.ProtoReflect.Descriptor instead.
func (*Capability) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *Capability) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Capability) GetCapability() []byte {
	if x != nil {
		return x.Capability
	}
	return nil
}

type Pow struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	BlockHash []byte                 `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"` // one of the accepted block hashes in the underlying layer (ethereum in starknet).
	// accepted is currently the current last or one before it.
	Salt          []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"` // a salt such that keccak(salt||blockHash||id) is below posDifficulty
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pow) Reset() {
	*x = Pow{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pow) ProtoMessage() {}

func (x *Pow) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pow.ProtoReflect.Descriptor instead.
func (*Pow) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *Pow) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Pow) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

// send when joining and periodically (period TBD)
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *common.PeerID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addresses     []*MultiAddress        `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Capabilities  []*Capability          `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	Pow           *Pow                   `protobuf:"bytes,4,opt,name=pow,proto3" json:"pow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() *common.PeerID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Node) GetAddresses() []*MultiAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Node) GetCapabilities() []*Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Node) GetPow() *Pow {
	if x != nil {
		return x.Pow
	}
	return nil
}

// when a node joins it can ask peers for the nodes they know
type NodesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// this can be used to request for peer information when only its id is known. The number of ids is limited (TBD)
	// we might know only of an id when getting a message through a relayer from a new peer.
	Ids           []*common.PeerID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodesRequest) Reset() {
	*x = NodesRequest{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesRequest) ProtoMessage() {}

func (x *NodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesRequest.ProtoReflect.Descriptor instead.
func (*NodesRequest) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{4}
}

func (x *NodesRequest) GetIds() []*common.PeerID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NodesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// a selection of random nodes the peer knows. Limited (TBD exact number).
	Nodes         []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodesResponse) Reset() {
	*x = NodesResponse{}
	mi := &file_p2p_proto_discovery_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesResponse) ProtoMessage() {}

func (x *NodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_discovery_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesResponse.ProtoReflect.Descriptor instead.
func (*NodesResponse) Descriptor() ([]byte, []int) {
	return file_p2p_proto_discovery_proto_rawDescGZIP(), []int{5}
}

func (x *NodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var file_p2p_proto_discovery_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: ([]byte)(nil),
		Field:         1001,
		Name:          "powDifficulty",
		Tag:           "bytes,1001,opt,name=powDifficulty",
		Filename:      "p2p/proto/discovery.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional bytes powDifficulty = 1001;
	E_PowDifficulty = &file_p2p_proto_discovery_proto_extTypes[0]
)

var File_p2p_proto_discovery_proto protoreflect.FileDescriptor

const file_p2p_proto_discovery_proto_rawDesc = "" +
	"\n" +
	"\x19p2p/proto/discovery.proto\x1a\x16p2p/proto/common.proto\x1a google/protobuf/descriptor.proto\"$\n" +
	"\fMultiAddress\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\"H\n" +
	"\n" +
	"Capability\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x1e\n" +
	"\n" +
	"capability\x18\x02 \x01(\fR\n" +
	"capability\"z\n" +
	"\x03Pow\x12\x1c\n" +
	"\tblockHash\x18\x01 \x01(\fR\tblockHash\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\fR\x04salt:A\xca>>0x200000000000000000000000000000000000000000000000000000000000\"\x95\x01\n" +
	"\x04Node\x12\x17\n" +
	"\x02id\x18\x01 \x01(\v2\a.PeerIDR\x02id\x12+\n" +
	"\taddresses\x18\x02 \x03(\v2\r.MultiAddressR\taddresses\x12/\n" +
	"\fcapabilities\x18\x03 \x03(\v2\v.CapabilityR\fcapabilities\x12\x16\n" +
	"\x03pow\x18\x04 \x01(\v2\x04.PowR\x03pow\")\n" +
	"\fNodesRequest\x12\x19\n" +
	"\x03ids\x18\x01 \x03(\v2\a.PeerIDR\x03ids\",\n" +
	"\rNodesResponse\x12\x1b\n" +
	"\x05nodes\x18\x01 \x03(\v2\x05.NodeR\x05nodes:I\n" +
	"\rpowDifficulty\x12\x1f.google.protobuf.MessageOptions\x18\xe9\a \x01(\fR\rpowDifficulty\x88\x01\x01B>Z<github.com/starknet-io/starknet-p2pspecs/p2p/proto/discoveryb\x06proto3"

var (
	file_p2p_proto_discovery_proto_rawDescOnce sync.Once
	file_p2p_proto_discovery_proto_rawDescData []byte
)

func file_p2p_proto_discovery_proto_rawDescGZIP() []byte {
	file_p2p_proto_discovery_proto_rawDescOnce.Do(func() {
		file_p2p_proto_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_discovery_proto_rawDesc), len(file_p2p_proto_discovery_proto_rawDesc)))
	})
	return file_p2p_proto_discovery_proto_rawDescData
}

var file_p2p_proto_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_p2p_proto_discovery_proto_goTypes = []any{
	(*MultiAddress)(nil),                // 0: MultiAddress
	(*Capability)(nil),                  // 1: Capability
	(*Pow)(nil),                         // 2: Pow
	(*Node)(nil),                        // 3: Node
	(*NodesRequest)(nil),                // 4: NodesRequest
	(*NodesResponse)(nil),               // 5: NodesResponse
	(*common.PeerID)(nil),               // 6: PeerID
	(*descriptorpb.MessageOptions)(nil), // 7: google.protobuf.MessageOptions
}
var file_p2p_proto_discovery_proto_depIdxs = []int32{
	6, // 0: Node.id:type_name -> PeerID
	0, // 1: Node.addresses:type_name -> MultiAddress
	1, // 2: Node.capabilities:type_name -> Capability
	2, // 3: Node.pow:type_name -> Pow
	6, // 4: NodesRequest.ids:type_name -> PeerID
	3, // 5: NodesResponse.nodes:type_name -> Node
	7, // 6: powDifficulty:extendee -> google.protobuf.MessageOptions
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	6, // [6:7] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_p2p_proto_discovery_proto_init() }
func file_p2p_proto_discovery_proto_init() {
	if File_p2p_proto_discovery_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_discovery_proto_rawDesc), len(file_p2p_proto_discovery_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_discovery_proto_goTypes,
		DependencyIndexes: file_p2p_proto_discovery_proto_depIdxs,
		MessageInfos:      file_p2p_proto_discovery_proto_msgTypes,
		ExtensionInfos:    file_p2p_proto_discovery_proto_extTypes,
	}.Build()
	File_p2p_proto_discovery_proto = out.File
	file_p2p_proto_discovery_proto_goTypes = nil
	file_p2p_proto_discovery_proto_depIdxs = nil
}

package tendermint

import (
	"fmt"

	tmproto "github.com/NethermindEth/juno/consensus/proto"
)

// WALToProto takes a WAL message and return a proto walMessage and error
func WALToProto(msg WALMessage) (*tmproto.WALMessage, error) { // Todo: Note: this is the autogenerated type
	var pb tmproto.WALMessage

	switch msg := msg.(type) {
	case EndHeightMessage:
		pb = tmproto.WALMessage{
			Sum: &tmproto.WALMessage_EndHeight{
				EndHeight: &tmproto.EndHeight{
					Height: msg.Height,
				},
			},
		}
	default:
		return nil, fmt.Errorf("to proto: wal message not recognized: %T", msg)
	}
	return &pb, nil
}

// WALFromProto takes a proto wal message and return a consensus walMessage and error
func WALFromProto(msg WALMessage) (*tmproto.WALMessage, error) { // Todo: Note: this is the autogenerated type
	panic("to implement encoding each message type")
}

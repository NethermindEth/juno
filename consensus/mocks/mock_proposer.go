// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/consensus/Proposer (interfaces: Proposer)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_proposer.go -package=mocks github.com/NethermindEth/juno/consensus/Proposer Proposer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/NethermindEth/juno/consensus/types"
	gomock "go.uber.org/mock/gomock"
)

// MockProposer is a mock of Proposer interface.
type MockProposer struct {
	ctrl     *gomock.Controller
	recorder *MockProposerMockRecorder
	isgomock struct{}
}

// MockProposerMockRecorder is the mock recorder for MockProposer.
type MockProposerMockRecorder struct {
	mock *MockProposer
}

// NewMockProposer creates a new mock instance.
func NewMockProposer(ctrl *gomock.Controller) *MockProposer {
	mock := &MockProposer{ctrl: ctrl}
	mock.recorder = &MockProposerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposer) EXPECT() *MockProposerMockRecorder {
	return m.recorder
}

// BlockInfo mocks base method.
func (m *MockProposer) BlockInfo(ctx context.Context) (types.BlockInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockInfo", ctx)
	ret0, _ := ret[0].(types.BlockInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// BlockInfo indicates an expected call of BlockInfo.
func (mr *MockProposerMockRecorder) BlockInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockInfo", reflect.TypeOf((*MockProposer)(nil).BlockInfo), ctx)
}

// ProposalCommitment mocks base method.
func (m *MockProposer) ProposalCommitment() (types.ProposalCommitment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalCommitment")
	ret0, _ := ret[0].(types.ProposalCommitment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalCommitment indicates an expected call of ProposalCommitment.
func (mr *MockProposerMockRecorder) ProposalCommitment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalCommitment", reflect.TypeOf((*MockProposer)(nil).ProposalCommitment))
}

// ProposalFin mocks base method.
func (m *MockProposer) ProposalFin() (types.ProposalFin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalFin")
	ret0, _ := ret[0].(types.ProposalFin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalFin indicates an expected call of ProposalFin.
func (mr *MockProposerMockRecorder) ProposalFin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalFin", reflect.TypeOf((*MockProposer)(nil).ProposalFin))
}

// ProposalInit mocks base method.
func (m *MockProposer) ProposalInit() (types.ProposalInit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalInit")
	ret0, _ := ret[0].(types.ProposalInit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalInit indicates an expected call of ProposalInit.
func (mr *MockProposerMockRecorder) ProposalInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalInit", reflect.TypeOf((*MockProposer)(nil).ProposalInit))
}

// Txns mocks base method.
func (m *MockProposer) Txns(ctx context.Context) <-chan []types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txns", ctx)
	ret0, _ := ret[0].(<-chan []types.Transaction)
	return ret0
}

// Txns indicates an expected call of Txns.
func (mr *MockProposerMockRecorder) Txns(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txns", reflect.TypeOf((*MockProposer)(nil).Txns), ctx)
}

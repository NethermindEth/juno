// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/consensus/validator (interfaces: Validator)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_validator.go -package=mocks github.com/NethermindEth/juno/consensus/validator Validator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/NethermindEth/juno/consensus/types"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator[V types.Hashable[H], H types.Hash, A types.Addr] struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder[V, H, A]
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder[V types.Hashable[H], H types.Hash, A types.Addr] struct {
	mock *MockValidator[V, H, A]
}

// NewMockValidator creates a new mock instance.
func NewMockValidator[V types.Hashable[H], H types.Hash, A types.Addr](ctrl *gomock.Controller) *MockValidator[V, H, A] {
	mock := &MockValidator[V, H, A]{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder[V, H, A]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator[V, H, A]) EXPECT() *MockValidatorMockRecorder[V, H, A] {
	return m.recorder
}

// BlockInfo mocks base method.
func (m *MockValidator[V, H, A]) BlockInfo(blockInfo types.BlockInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockInfo", blockInfo)
}

// BlockInfo indicates an expected call of BlockInfo.
func (mr *MockValidatorMockRecorder[V, H, A]) BlockInfo(blockInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockInfo", reflect.TypeOf((*MockValidator[V, H, A])(nil).BlockInfo), blockInfo)
}

// ProposalCommitment mocks base method.
func (m *MockValidator[V, H, A]) ProposalCommitment(proposalCommitment types.ProposalCommitment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalCommitment", proposalCommitment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposalCommitment indicates an expected call of ProposalCommitment.
func (mr *MockValidatorMockRecorder[V, H, A]) ProposalCommitment(proposalCommitment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalCommitment", reflect.TypeOf((*MockValidator[V, H, A])(nil).ProposalCommitment), proposalCommitment)
}

// ProposalFin mocks base method.
func (m *MockValidator[V, H, A]) ProposalFin(proposalCommitment types.ProposalFin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalFin", proposalCommitment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposalFin indicates an expected call of ProposalFin.
func (mr *MockValidatorMockRecorder[V, H, A]) ProposalFin(proposalCommitment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalFin", reflect.TypeOf((*MockValidator[V, H, A])(nil).ProposalFin), proposalCommitment)
}

// ProposalInit mocks base method.
func (m *MockValidator[V, H, A]) ProposalInit(pInit types.ProposalInit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalInit", pInit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposalInit indicates an expected call of ProposalInit.
func (mr *MockValidatorMockRecorder[V, H, A]) ProposalInit(pInit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalInit", reflect.TypeOf((*MockValidator[V, H, A])(nil).ProposalInit), pInit)
}

// TransactionBatch mocks base method.
func (m *MockValidator[V, H, A]) TransactionBatch(txn types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionBatch", txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionBatch indicates an expected call of TransactionBatch.
func (mr *MockValidatorMockRecorder[V, H, A]) TransactionBatch(txn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionBatch", reflect.TypeOf((*MockValidator[V, H, A])(nil).TransactionBatch), txn)
}

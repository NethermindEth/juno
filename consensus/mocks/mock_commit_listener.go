// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/consensus/driver (interfaces: CommitListener)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_commit_listener.go -package=mocks github.com/NethermindEth/juno/consensus/driver CommitListener
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/NethermindEth/juno/consensus/types"
	sync "github.com/NethermindEth/juno/sync"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitListener is a mock of CommitListener interface.
type MockCommitListener[V types.Hashable[H], H types.Hash] struct {
	ctrl     *gomock.Controller
	recorder *MockCommitListenerMockRecorder[V, H]
	isgomock struct{}
}

// MockCommitListenerMockRecorder is the mock recorder for MockCommitListener.
type MockCommitListenerMockRecorder[V types.Hashable[H], H types.Hash] struct {
	mock *MockCommitListener[V, H]
}

// NewMockCommitListener creates a new mock instance.
func NewMockCommitListener[V types.Hashable[H], H types.Hash](ctrl *gomock.Controller) *MockCommitListener[V, H] {
	mock := &MockCommitListener[V, H]{ctrl: ctrl}
	mock.recorder = &MockCommitListenerMockRecorder[V, H]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitListener[V, H]) EXPECT() *MockCommitListenerMockRecorder[V, H] {
	return m.recorder
}

// Listen mocks base method.
func (m *MockCommitListener[V, H]) Listen() <-chan sync.CommittedBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(<-chan sync.CommittedBlock)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockCommitListenerMockRecorder[V, H]) Listen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockCommitListener[V, H])(nil).Listen))
}

// OnCommit mocks base method.
func (m *MockCommitListener[V, H]) OnCommit(arg0 context.Context, arg1 types.Height, arg2 V) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnCommit", arg0, arg1, arg2)
}

// OnCommit indicates an expected call of OnCommit.
func (mr *MockCommitListenerMockRecorder[V, H]) OnCommit(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCommit", reflect.TypeOf((*MockCommitListener[V, H])(nil).OnCommit), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/consensus/tendermint (interfaces: TendermintDB)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_db.go -package=mocks github.com/NethermindEth/juno/consensus/tendermint TendermintDB
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tendermint "github.com/NethermindEth/juno/consensus/tendermint"
	gomock "go.uber.org/mock/gomock"
)

// MockTendermintDB is a mock of TendermintDB interface.
type MockTendermintDB[V tendermint.Hashable[H], H tendermint.Hash, A tendermint.Addr] struct {
	ctrl     *gomock.Controller
	recorder *MockTendermintDBMockRecorder[V, H, A]
	isgomock struct{}
}

// MockTendermintDBMockRecorder is the mock recorder for MockTendermintDB.
type MockTendermintDBMockRecorder[V tendermint.Hashable[H], H tendermint.Hash, A tendermint.Addr] struct {
	mock *MockTendermintDB[V, H, A]
}

// NewMockTendermintDB creates a new mock instance.
func NewMockTendermintDB[V tendermint.Hashable[H], H tendermint.Hash, A tendermint.Addr](ctrl *gomock.Controller) *MockTendermintDB[V, H, A] {
	mock := &MockTendermintDB[V, H, A]{ctrl: ctrl}
	mock.recorder = &MockTendermintDBMockRecorder[V, H, A]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTendermintDB[V, H, A]) EXPECT() *MockTendermintDBMockRecorder[V, H, A] {
	return m.recorder
}

// DeleteWALMsgs mocks base method.
func (m *MockTendermintDB[V, H, A]) DeleteWALMsgs(height tendermint.Height) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWALMsgs", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWALMsgs indicates an expected call of DeleteWALMsgs.
func (mr *MockTendermintDBMockRecorder[V, H, A]) DeleteWALMsgs(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWALMsgs", reflect.TypeOf((*MockTendermintDB[V, H, A])(nil).DeleteWALMsgs), height)
}

// FlushWAL mocks base method.
func (m *MockTendermintDB[V, H, A]) FlushWAL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushWAL")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushWAL indicates an expected call of FlushWAL.
func (mr *MockTendermintDBMockRecorder[V, H, A]) FlushWAL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushWAL", reflect.TypeOf((*MockTendermintDB[V, H, A])(nil).FlushWAL))
}

// GetWALMsgs mocks base method.
func (m *MockTendermintDB[V, H, A]) GetWALMsgs(height tendermint.Height) ([]tendermint.WalEntry[V, H, A], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWALMsgs", height)
	ret0, _ := ret[0].([]tendermint.WalEntry[V, H, A])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWALMsgs indicates an expected call of GetWALMsgs.
func (mr *MockTendermintDBMockRecorder[V, H, A]) GetWALMsgs(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWALMsgs", reflect.TypeOf((*MockTendermintDB[V, H, A])(nil).GetWALMsgs), height)
}

// SetWALEntry mocks base method.
func (m *MockTendermintDB[V, H, A]) SetWALEntry(entry tendermint.IsWALMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWALEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWALEntry indicates an expected call of SetWALEntry.
func (mr *MockTendermintDBMockRecorder[V, H, A]) SetWALEntry(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWALEntry", reflect.TypeOf((*MockTendermintDB[V, H, A])(nil).SetWALEntry), entry)
}

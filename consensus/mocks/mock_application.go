// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/consensus/tendermint (interfaces: Application)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_application.go -package=mocks github.com/NethermindEth/juno/consensus/tendermint Application
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/NethermindEth/juno/consensus/types"
	gomock "go.uber.org/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication[V types.Hashable[H], H types.Hash] struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder[V, H]
	isgomock struct{}
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder[V types.Hashable[H], H types.Hash] struct {
	mock *MockApplication[V, H]
}

// NewMockApplication creates a new mock instance.
func NewMockApplication[V types.Hashable[H], H types.Hash](ctrl *gomock.Controller) *MockApplication[V, H] {
	mock := &MockApplication[V, H]{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder[V, H]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication[V, H]) EXPECT() *MockApplicationMockRecorder[V, H] {
	return m.recorder
}

// Valid mocks base method.
func (m *MockApplication[V, H]) Valid(arg0 V) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockApplicationMockRecorder[V, H]) Valid(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockApplication[V, H])(nil).Valid), arg0)
}

// Value mocks base method.
func (m *MockApplication[V, H]) Value() V {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(V)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockApplicationMockRecorder[V, H]) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockApplication[V, H])(nil).Value))
}

// Code generated by "enumer -type=BucketConsensus -output=buckets_consensus_enumer.go"; DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
)

const _BucketConsensusName = "WALEntry"

var _BucketConsensusIndex = [...]uint8{0, 8}

const _BucketConsensusLowerName = "walentry"

func (i BucketConsensus) String() string {
	if i >= BucketConsensus(len(_BucketConsensusIndex)-1) {
		return fmt.Sprintf("BucketConsensus(%d)", i)
	}
	return _BucketConsensusName[_BucketConsensusIndex[i]:_BucketConsensusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BucketConsensusNoOp() {
	var x [1]struct{}
	_ = x[WALEntry-(0)]
}

var _BucketConsensusValues = []BucketConsensus{WALEntry}

var _BucketConsensusNameToValueMap = map[string]BucketConsensus{
	_BucketConsensusName[0:8]:      WALEntry,
	_BucketConsensusLowerName[0:8]: WALEntry,
}

var _BucketConsensusNames = []string{
	_BucketConsensusName[0:8],
}

// BucketConsensusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BucketConsensusString(s string) (BucketConsensus, error) {
	if val, ok := _BucketConsensusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BucketConsensusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BucketConsensus values", s)
}

// BucketConsensusValues returns all values of the enum
func BucketConsensusValues() []BucketConsensus {
	return _BucketConsensusValues
}

// BucketConsensusStrings returns a slice of all String values of the enum
func BucketConsensusStrings() []string {
	strs := make([]string, len(_BucketConsensusNames))
	copy(strs, _BucketConsensusNames)
	return strs
}

// IsABucketConsensus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BucketConsensus) IsABucketConsensus() bool {
	for _, v := range _BucketConsensusValues {
		if i == v {
			return true
		}
	}
	return false
}

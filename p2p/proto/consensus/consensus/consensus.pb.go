// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p/proto/consensus/consensus.proto

package consensus

import (
	common "github.com/starknet-io/starknet-p2pspecs/p2p/proto/common"
	transaction "github.com/starknet-io/starknet-p2pspecs/p2p/proto/transaction"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vote_VoteType int32

const (
	Vote_Prevote   Vote_VoteType = 0
	Vote_Precommit Vote_VoteType = 1
)

// Enum value maps for Vote_VoteType.
var (
	Vote_VoteType_name = map[int32]string{
		0: "Prevote",
		1: "Precommit",
	}
	Vote_VoteType_value = map[string]int32{
		"Prevote":   0,
		"Precommit": 1,
	}
)

func (x Vote_VoteType) Enum() *Vote_VoteType {
	p := new(Vote_VoteType)
	*p = x
	return p
}

func (x Vote_VoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vote_VoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_proto_consensus_consensus_proto_enumTypes[0].Descriptor()
}

func (Vote_VoteType) Type() protoreflect.EnumType {
	return &file_p2p_proto_consensus_consensus_proto_enumTypes[0]
}

func (x Vote_VoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vote_VoteType.Descriptor instead.
func (Vote_VoteType) EnumDescriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{1, 0}
}

// Contains all variants of mempool and an L1Handler variant to cover all transactions that can be
// in a new block.
type ConsensusTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Txn:
	//
	//	*ConsensusTransaction_DeclareV3
	//	*ConsensusTransaction_DeployAccountV3
	//	*ConsensusTransaction_InvokeV3
	//	*ConsensusTransaction_L1Handler
	Txn             isConsensusTransaction_Txn `protobuf_oneof:"txn"`
	TransactionHash *common.Hash               `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConsensusTransaction) Reset() {
	*x = ConsensusTransaction{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTransaction) ProtoMessage() {}

func (x *ConsensusTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTransaction.ProtoReflect.Descriptor instead.
func (*ConsensusTransaction) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusTransaction) GetTxn() isConsensusTransaction_Txn {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *ConsensusTransaction) GetDeclareV3() *transaction.DeclareV3WithClass {
	if x != nil {
		if x, ok := x.Txn.(*ConsensusTransaction_DeclareV3); ok {
			return x.DeclareV3
		}
	}
	return nil
}

func (x *ConsensusTransaction) GetDeployAccountV3() *transaction.DeployAccountV3 {
	if x != nil {
		if x, ok := x.Txn.(*ConsensusTransaction_DeployAccountV3); ok {
			return x.DeployAccountV3
		}
	}
	return nil
}

func (x *ConsensusTransaction) GetInvokeV3() *transaction.InvokeV3 {
	if x != nil {
		if x, ok := x.Txn.(*ConsensusTransaction_InvokeV3); ok {
			return x.InvokeV3
		}
	}
	return nil
}

func (x *ConsensusTransaction) GetL1Handler() *transaction.L1HandlerV0 {
	if x != nil {
		if x, ok := x.Txn.(*ConsensusTransaction_L1Handler); ok {
			return x.L1Handler
		}
	}
	return nil
}

func (x *ConsensusTransaction) GetTransactionHash() *common.Hash {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

type isConsensusTransaction_Txn interface {
	isConsensusTransaction_Txn()
}

type ConsensusTransaction_DeclareV3 struct {
	DeclareV3 *transaction.DeclareV3WithClass `protobuf:"bytes,1,opt,name=declare_v3,json=declareV3,proto3,oneof"`
}

type ConsensusTransaction_DeployAccountV3 struct {
	DeployAccountV3 *transaction.DeployAccountV3 `protobuf:"bytes,2,opt,name=deploy_account_v3,json=deployAccountV3,proto3,oneof"`
}

type ConsensusTransaction_InvokeV3 struct {
	InvokeV3 *transaction.InvokeV3 `protobuf:"bytes,3,opt,name=invoke_v3,json=invokeV3,proto3,oneof"`
}

type ConsensusTransaction_L1Handler struct {
	L1Handler *transaction.L1HandlerV0 `protobuf:"bytes,4,opt,name=l1_handler,json=l1Handler,proto3,oneof"`
}

func (*ConsensusTransaction_DeclareV3) isConsensusTransaction_Txn() {}

func (*ConsensusTransaction_DeployAccountV3) isConsensusTransaction_Txn() {}

func (*ConsensusTransaction_InvokeV3) isConsensusTransaction_Txn() {}

func (*ConsensusTransaction_L1Handler) isConsensusTransaction_Txn() {}

type Vote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We use a type field to distinguish between prevotes and precommits instead of different
	// messages, to make sure the data, and therefore the signatures, are unambiguous between
	// Prevote and Precommit.
	VoteType    Vote_VoteType `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3,enum=Vote_VoteType" json:"vote_type,omitempty"`
	BlockNumber uint64        `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Round       uint32        `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	// This is optional since a vote can be NIL.
	ProposalCommitment *common.Hash `protobuf:"bytes,4,opt,name=proposal_commitment,json=proposalCommitment,proto3,oneof" json:"proposal_commitment,omitempty"`
	// Identifies the voter.
	Voter         *common.Address `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *Vote) GetVoteType() Vote_VoteType {
	if x != nil {
		return x.VoteType
	}
	return Vote_Prevote
}

func (x *Vote) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Vote) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Vote) GetProposalCommitment() *common.Hash {
	if x != nil {
		return x.ProposalCommitment
	}
	return nil
}

func (x *Vote) GetVoter() *common.Address {
	if x != nil {
		return x.Voter
	}
	return nil
}

// Streaming of proposals is done on the "consensus_proposal" topic.
type ConsensusStreamId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Nonce         uint64                 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusStreamId) Reset() {
	*x = ConsensusStreamId{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusStreamId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStreamId) ProtoMessage() {}

func (x *ConsensusStreamId) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStreamId.ProtoReflect.Descriptor instead.
func (*ConsensusStreamId) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusStreamId) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ConsensusStreamId) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ConsensusStreamId) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// Messages which make up a Proposal stream.
type ProposalPart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Messages:
	//
	//	*ProposalPart_Init
	//	*ProposalPart_Fin
	//	*ProposalPart_BlockInfo
	//	*ProposalPart_Transactions
	//	*ProposalPart_Commitment
	Messages      isProposalPart_Messages `protobuf_oneof:"messages"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposalPart) Reset() {
	*x = ProposalPart{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalPart) ProtoMessage() {}

func (x *ProposalPart) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalPart.ProtoReflect.Descriptor instead.
func (*ProposalPart) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalPart) GetMessages() isProposalPart_Messages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ProposalPart) GetInit() *ProposalInit {
	if x != nil {
		if x, ok := x.Messages.(*ProposalPart_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *ProposalPart) GetFin() *ProposalFin {
	if x != nil {
		if x, ok := x.Messages.(*ProposalPart_Fin); ok {
			return x.Fin
		}
	}
	return nil
}

func (x *ProposalPart) GetBlockInfo() *BlockInfo {
	if x != nil {
		if x, ok := x.Messages.(*ProposalPart_BlockInfo); ok {
			return x.BlockInfo
		}
	}
	return nil
}

func (x *ProposalPart) GetTransactions() *TransactionBatch {
	if x != nil {
		if x, ok := x.Messages.(*ProposalPart_Transactions); ok {
			return x.Transactions
		}
	}
	return nil
}

func (x *ProposalPart) GetCommitment() *ProposalCommitment {
	if x != nil {
		if x, ok := x.Messages.(*ProposalPart_Commitment); ok {
			return x.Commitment
		}
	}
	return nil
}

type isProposalPart_Messages interface {
	isProposalPart_Messages()
}

type ProposalPart_Init struct {
	Init *ProposalInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type ProposalPart_Fin struct {
	Fin *ProposalFin `protobuf:"bytes,2,opt,name=fin,proto3,oneof"`
}

type ProposalPart_BlockInfo struct {
	BlockInfo *BlockInfo `protobuf:"bytes,3,opt,name=block_info,json=blockInfo,proto3,oneof"`
}

type ProposalPart_Transactions struct {
	Transactions *TransactionBatch `protobuf:"bytes,4,opt,name=transactions,proto3,oneof"`
}

type ProposalPart_Commitment struct {
	Commitment *ProposalCommitment `protobuf:"bytes,5,opt,name=commitment,proto3,oneof"`
}

func (*ProposalPart_Init) isProposalPart_Messages() {}

func (*ProposalPart_Fin) isProposalPart_Messages() {}

func (*ProposalPart_BlockInfo) isProposalPart_Messages() {}

func (*ProposalPart_Transactions) isProposalPart_Messages() {}

func (*ProposalPart_Commitment) isProposalPart_Messages() {}

type ProposalInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	ValidRound    *uint32                `protobuf:"varint,3,opt,name=valid_round,json=validRound,proto3,oneof" json:"valid_round,omitempty"`
	Proposer      *common.Address        `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposalInit) Reset() {
	*x = ProposalInit{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalInit) ProtoMessage() {}

func (x *ProposalInit) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalInit.ProtoReflect.Descriptor instead.
func (*ProposalInit) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *ProposalInit) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProposalInit) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ProposalInit) GetValidRound() uint32 {
	if x != nil && x.ValidRound != nil {
		return *x.ValidRound
	}
	return 0
}

func (x *ProposalInit) GetProposer() *common.Address {
	if x != nil {
		return x.Proposer
	}
	return nil
}

// Identifies the content proposed (and executed). Consensus is reached on the value contained here.
type ProposalFin struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProposalCommitment *common.Hash           `protobuf:"bytes,1,opt,name=proposal_commitment,json=proposalCommitment,proto3" json:"proposal_commitment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProposalFin) Reset() {
	*x = ProposalFin{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalFin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalFin) ProtoMessage() {}

func (x *ProposalFin) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalFin.ProtoReflect.Descriptor instead.
func (*ProposalFin) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *ProposalFin) GetProposalCommitment() *common.Hash {
	if x != nil {
		return x.ProposalCommitment
	}
	return nil
}

type TransactionBatch struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Transactions  []*ConsensusTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBatch) Reset() {
	*x = TransactionBatch{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBatch) ProtoMessage() {}

func (x *TransactionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBatch.ProtoReflect.Descriptor instead.
func (*TransactionBatch) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionBatch) GetTransactions() []*ConsensusTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// The content and stream_id are generic fields. The user of the stream can choose to pass whatever
// message that they want. The messages are then encoded in bytes.
type StreamMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*StreamMessage_Content
	//	*StreamMessage_Fin
	Message        isStreamMessage_Message `protobuf_oneof:"message"`
	StreamId       []byte                  `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SequenceNumber uint64                  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *StreamMessage) GetMessage() isStreamMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StreamMessage) GetContent() []byte {
	if x != nil {
		if x, ok := x.Message.(*StreamMessage_Content); ok {
			return x.Content
		}
	}
	return nil
}

func (x *StreamMessage) GetFin() *common.Fin {
	if x != nil {
		if x, ok := x.Message.(*StreamMessage_Fin); ok {
			return x.Fin
		}
	}
	return nil
}

func (x *StreamMessage) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *StreamMessage) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type isStreamMessage_Message interface {
	isStreamMessage_Message()
}

type StreamMessage_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

type StreamMessage_Fin struct {
	Fin *common.Fin `protobuf:"bytes,2,opt,name=fin,proto3,oneof"`
}

func (*StreamMessage_Content) isStreamMessage_Message() {}

func (*StreamMessage_Fin) isStreamMessage_Message() {}

type ProposalCommitment struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber      uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ParentCommitment *common.Hash           `protobuf:"bytes,2,opt,name=parent_commitment,json=parentCommitment,proto3" json:"parent_commitment,omitempty"`
	Builder          *common.Address        `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Timestamp        uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProtocolVersion  string                 `protobuf:"bytes,5,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // Starknet version
	// State root of block `H-K`, where `K` is defined by the protocol's version.
	OldStateRoot              *common.Hash `protobuf:"bytes,6,opt,name=old_state_root,json=oldStateRoot,proto3" json:"old_state_root,omitempty"`
	VersionConstantCommitment *common.Hash `protobuf:"bytes,7,opt,name=version_constant_commitment,json=versionConstantCommitment,proto3" json:"version_constant_commitment,omitempty"`
	// The state diff commitment returned  by the Starknet Feeder Gateway
	StateDiffCommitment   *common.Hash `protobuf:"bytes,8,opt,name=state_diff_commitment,json=stateDiffCommitment,proto3" json:"state_diff_commitment,omitempty"`
	TransactionCommitment *common.Hash `protobuf:"bytes,9,opt,name=transaction_commitment,json=transactionCommitment,proto3" json:"transaction_commitment,omitempty"`
	EventCommitment       *common.Hash `protobuf:"bytes,10,opt,name=event_commitment,json=eventCommitment,proto3" json:"event_commitment,omitempty"`
	ReceiptCommitment     *common.Hash `protobuf:"bytes,11,opt,name=receipt_commitment,json=receiptCommitment,proto3" json:"receipt_commitment,omitempty"`
	// Lets for the 5 preceeding commitments.
	// TODO: Just put the sizes explicitly? This is relatively free compared actually hashing the
	// lists we commit to. If not, should we also pack other fields?
	ConcatenatedCounts *common.Felt252               `protobuf:"bytes,12,opt,name=concatenated_counts,json=concatenatedCounts,proto3" json:"concatenated_counts,omitempty"`
	L1GasPriceFri      *common.Uint128               `protobuf:"bytes,13,opt,name=l1_gas_price_fri,json=l1GasPriceFri,proto3" json:"l1_gas_price_fri,omitempty"`
	L1DataGasPriceFri  *common.Uint128               `protobuf:"bytes,14,opt,name=l1_data_gas_price_fri,json=l1DataGasPriceFri,proto3" json:"l1_data_gas_price_fri,omitempty"`
	L2GasPriceFri      *common.Uint128               `protobuf:"bytes,15,opt,name=l2_gas_price_fri,json=l2GasPriceFri,proto3" json:"l2_gas_price_fri,omitempty"`
	L2GasUsed          *common.Uint128               `protobuf:"bytes,16,opt,name=l2_gas_used,json=l2GasUsed,proto3" json:"l2_gas_used,omitempty"`
	NextL2GasPriceFri  *common.Uint128               `protobuf:"bytes,17,opt,name=next_l2_gas_price_fri,json=nextL2GasPriceFri,proto3" json:"next_l2_gas_price_fri,omitempty"`
	L1DaMode           common.L1DataAvailabilityMode `protobuf:"varint,18,opt,name=l1_da_mode,json=l1DaMode,proto3,enum=L1DataAvailabilityMode" json:"l1_da_mode,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProposalCommitment) Reset() {
	*x = ProposalCommitment{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalCommitment) ProtoMessage() {}

func (x *ProposalCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalCommitment.ProtoReflect.Descriptor instead.
func (*ProposalCommitment) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *ProposalCommitment) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProposalCommitment) GetParentCommitment() *common.Hash {
	if x != nil {
		return x.ParentCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetBuilder() *common.Address {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *ProposalCommitment) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProposalCommitment) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *ProposalCommitment) GetOldStateRoot() *common.Hash {
	if x != nil {
		return x.OldStateRoot
	}
	return nil
}

func (x *ProposalCommitment) GetVersionConstantCommitment() *common.Hash {
	if x != nil {
		return x.VersionConstantCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetStateDiffCommitment() *common.Hash {
	if x != nil {
		return x.StateDiffCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetTransactionCommitment() *common.Hash {
	if x != nil {
		return x.TransactionCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetEventCommitment() *common.Hash {
	if x != nil {
		return x.EventCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetReceiptCommitment() *common.Hash {
	if x != nil {
		return x.ReceiptCommitment
	}
	return nil
}

func (x *ProposalCommitment) GetConcatenatedCounts() *common.Felt252 {
	if x != nil {
		return x.ConcatenatedCounts
	}
	return nil
}

func (x *ProposalCommitment) GetL1GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L1GasPriceFri
	}
	return nil
}

func (x *ProposalCommitment) GetL1DataGasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L1DataGasPriceFri
	}
	return nil
}

func (x *ProposalCommitment) GetL2GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L2GasPriceFri
	}
	return nil
}

func (x *ProposalCommitment) GetL2GasUsed() *common.Uint128 {
	if x != nil {
		return x.L2GasUsed
	}
	return nil
}

func (x *ProposalCommitment) GetNextL2GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.NextL2GasPriceFri
	}
	return nil
}

func (x *ProposalCommitment) GetL1DaMode() common.L1DataAvailabilityMode {
	if x != nil {
		return x.L1DaMode
	}
	return common.L1DataAvailabilityMode(0)
}

type BlockInfo struct {
	state             protoimpl.MessageState        `protogen:"open.v1"`
	BlockNumber       uint64                        `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Builder           *common.Address               `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	Timestamp         uint64                        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	L2GasPriceFri     *common.Uint128               `protobuf:"bytes,4,opt,name=l2_gas_price_fri,json=l2GasPriceFri,proto3" json:"l2_gas_price_fri,omitempty"`
	L1GasPriceWei     *common.Uint128               `protobuf:"bytes,5,opt,name=l1_gas_price_wei,json=l1GasPriceWei,proto3" json:"l1_gas_price_wei,omitempty"`
	L1DataGasPriceWei *common.Uint128               `protobuf:"bytes,6,opt,name=l1_data_gas_price_wei,json=l1DataGasPriceWei,proto3" json:"l1_data_gas_price_wei,omitempty"`
	EthToStrkRate     *common.Uint128               `protobuf:"bytes,7,opt,name=eth_to_strk_rate,json=ethToStrkRate,proto3" json:"eth_to_strk_rate,omitempty"`
	L1DaMode          common.L1DataAvailabilityMode `protobuf:"varint,8,opt,name=l1_da_mode,json=l1DaMode,proto3,enum=L1DataAvailabilityMode" json:"l1_da_mode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_consensus_consensus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_p2p_proto_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *BlockInfo) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockInfo) GetBuilder() *common.Address {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *BlockInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockInfo) GetL2GasPriceFri() *common.Uint128 {
	if x != nil {
		return x.L2GasPriceFri
	}
	return nil
}

func (x *BlockInfo) GetL1GasPriceWei() *common.Uint128 {
	if x != nil {
		return x.L1GasPriceWei
	}
	return nil
}

func (x *BlockInfo) GetL1DataGasPriceWei() *common.Uint128 {
	if x != nil {
		return x.L1DataGasPriceWei
	}
	return nil
}

func (x *BlockInfo) GetEthToStrkRate() *common.Uint128 {
	if x != nil {
		return x.EthToStrkRate
	}
	return nil
}

func (x *BlockInfo) GetL1DaMode() common.L1DataAvailabilityMode {
	if x != nil {
		return x.L1DaMode
	}
	return common.L1DataAvailabilityMode(0)
}

var File_p2p_proto_consensus_consensus_proto protoreflect.FileDescriptor

const file_p2p_proto_consensus_consensus_proto_rawDesc = "" +
	"\n" +
	"#p2p/proto/consensus/consensus.proto\x1a\x16p2p/proto/common.proto\x1a\x1bp2p/proto/transaction.proto\"\x9e\x02\n" +
	"\x14ConsensusTransaction\x124\n" +
	"\n" +
	"declare_v3\x18\x01 \x01(\v2\x13.DeclareV3WithClassH\x00R\tdeclareV3\x12>\n" +
	"\x11deploy_account_v3\x18\x02 \x01(\v2\x10.DeployAccountV3H\x00R\x0fdeployAccountV3\x12(\n" +
	"\tinvoke_v3\x18\x03 \x01(\v2\t.InvokeV3H\x00R\binvokeV3\x12-\n" +
	"\n" +
	"l1_handler\x18\x04 \x01(\v2\f.L1HandlerV0H\x00R\tl1Handler\x120\n" +
	"\x10transaction_hash\x18\x05 \x01(\v2\x05.HashR\x0ftransactionHashB\x05\n" +
	"\x03txn\"\x89\x02\n" +
	"\x04Vote\x12+\n" +
	"\tvote_type\x18\x01 \x01(\x0e2\x0e.Vote.VoteTypeR\bvoteType\x12!\n" +
	"\fblock_number\x18\x02 \x01(\x04R\vblockNumber\x12\x14\n" +
	"\x05round\x18\x03 \x01(\rR\x05round\x12;\n" +
	"\x13proposal_commitment\x18\x04 \x01(\v2\x05.HashH\x00R\x12proposalCommitment\x88\x01\x01\x12\x1e\n" +
	"\x05voter\x18\x05 \x01(\v2\b.AddressR\x05voter\"&\n" +
	"\bVoteType\x12\v\n" +
	"\aPrevote\x10\x00\x12\r\n" +
	"\tPrecommit\x10\x01B\x16\n" +
	"\x14_proposal_commitment\"b\n" +
	"\x11ConsensusStreamId\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\x14\n" +
	"\x05round\x18\x02 \x01(\rR\x05round\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\x04R\x05nonce\"\xfe\x01\n" +
	"\fProposalPart\x12#\n" +
	"\x04init\x18\x01 \x01(\v2\r.ProposalInitH\x00R\x04init\x12 \n" +
	"\x03fin\x18\x02 \x01(\v2\f.ProposalFinH\x00R\x03fin\x12+\n" +
	"\n" +
	"block_info\x18\x03 \x01(\v2\n" +
	".BlockInfoH\x00R\tblockInfo\x127\n" +
	"\ftransactions\x18\x04 \x01(\v2\x11.TransactionBatchH\x00R\ftransactions\x125\n" +
	"\n" +
	"commitment\x18\x05 \x01(\v2\x13.ProposalCommitmentH\x00R\n" +
	"commitmentB\n" +
	"\n" +
	"\bmessages\"\xa3\x01\n" +
	"\fProposalInit\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\x14\n" +
	"\x05round\x18\x02 \x01(\rR\x05round\x12$\n" +
	"\vvalid_round\x18\x03 \x01(\rH\x00R\n" +
	"validRound\x88\x01\x01\x12$\n" +
	"\bproposer\x18\x04 \x01(\v2\b.AddressR\bproposerB\x0e\n" +
	"\f_valid_round\"E\n" +
	"\vProposalFin\x126\n" +
	"\x13proposal_commitment\x18\x01 \x01(\v2\x05.HashR\x12proposalCommitment\"M\n" +
	"\x10TransactionBatch\x129\n" +
	"\ftransactions\x18\x01 \x03(\v2\x15.ConsensusTransactionR\ftransactions\"\x96\x01\n" +
	"\rStreamMessage\x12\x1a\n" +
	"\acontent\x18\x01 \x01(\fH\x00R\acontent\x12\x18\n" +
	"\x03fin\x18\x02 \x01(\v2\x04.FinH\x00R\x03fin\x12\x1b\n" +
	"\tstream_id\x18\x03 \x01(\fR\bstreamId\x12'\n" +
	"\x0fsequence_number\x18\x04 \x01(\x04R\x0esequenceNumberB\t\n" +
	"\amessage\"\xa7\a\n" +
	"\x12ProposalCommitment\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x122\n" +
	"\x11parent_commitment\x18\x02 \x01(\v2\x05.HashR\x10parentCommitment\x12\"\n" +
	"\abuilder\x18\x03 \x01(\v2\b.AddressR\abuilder\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12)\n" +
	"\x10protocol_version\x18\x05 \x01(\tR\x0fprotocolVersion\x12+\n" +
	"\x0eold_state_root\x18\x06 \x01(\v2\x05.HashR\foldStateRoot\x12E\n" +
	"\x1bversion_constant_commitment\x18\a \x01(\v2\x05.HashR\x19versionConstantCommitment\x129\n" +
	"\x15state_diff_commitment\x18\b \x01(\v2\x05.HashR\x13stateDiffCommitment\x12<\n" +
	"\x16transaction_commitment\x18\t \x01(\v2\x05.HashR\x15transactionCommitment\x120\n" +
	"\x10event_commitment\x18\n" +
	" \x01(\v2\x05.HashR\x0feventCommitment\x124\n" +
	"\x12receipt_commitment\x18\v \x01(\v2\x05.HashR\x11receiptCommitment\x129\n" +
	"\x13concatenated_counts\x18\f \x01(\v2\b.Felt252R\x12concatenatedCounts\x121\n" +
	"\x10l1_gas_price_fri\x18\r \x01(\v2\b.Uint128R\rl1GasPriceFri\x12:\n" +
	"\x15l1_data_gas_price_fri\x18\x0e \x01(\v2\b.Uint128R\x11l1DataGasPriceFri\x121\n" +
	"\x10l2_gas_price_fri\x18\x0f \x01(\v2\b.Uint128R\rl2GasPriceFri\x12(\n" +
	"\vl2_gas_used\x18\x10 \x01(\v2\b.Uint128R\tl2GasUsed\x12:\n" +
	"\x15next_l2_gas_price_fri\x18\x11 \x01(\v2\b.Uint128R\x11nextL2GasPriceFri\x125\n" +
	"\n" +
	"l1_da_mode\x18\x12 \x01(\x0e2\x17.L1DataAvailabilityModeR\bl1DaMode\"\xfc\x02\n" +
	"\tBlockInfo\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\"\n" +
	"\abuilder\x18\x02 \x01(\v2\b.AddressR\abuilder\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x121\n" +
	"\x10l2_gas_price_fri\x18\x04 \x01(\v2\b.Uint128R\rl2GasPriceFri\x121\n" +
	"\x10l1_gas_price_wei\x18\x05 \x01(\v2\b.Uint128R\rl1GasPriceWei\x12:\n" +
	"\x15l1_data_gas_price_wei\x18\x06 \x01(\v2\b.Uint128R\x11l1DataGasPriceWei\x121\n" +
	"\x10eth_to_strk_rate\x18\a \x01(\v2\b.Uint128R\rethToStrkRate\x125\n" +
	"\n" +
	"l1_da_mode\x18\b \x01(\x0e2\x17.L1DataAvailabilityModeR\bl1DaModeBHZFgithub.com/starknet-io/starknet-p2pspecs/p2p/proto/consensus/consensusb\x06proto3"

var (
	file_p2p_proto_consensus_consensus_proto_rawDescOnce sync.Once
	file_p2p_proto_consensus_consensus_proto_rawDescData []byte
)

func file_p2p_proto_consensus_consensus_proto_rawDescGZIP() []byte {
	file_p2p_proto_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_p2p_proto_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_consensus_consensus_proto_rawDesc), len(file_p2p_proto_consensus_consensus_proto_rawDesc)))
	})
	return file_p2p_proto_consensus_consensus_proto_rawDescData
}

var file_p2p_proto_consensus_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_p2p_proto_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_p2p_proto_consensus_consensus_proto_goTypes = []any{
	(Vote_VoteType)(0),                     // 0: Vote.VoteType
	(*ConsensusTransaction)(nil),           // 1: ConsensusTransaction
	(*Vote)(nil),                           // 2: Vote
	(*ConsensusStreamId)(nil),              // 3: ConsensusStreamId
	(*ProposalPart)(nil),                   // 4: ProposalPart
	(*ProposalInit)(nil),                   // 5: ProposalInit
	(*ProposalFin)(nil),                    // 6: ProposalFin
	(*TransactionBatch)(nil),               // 7: TransactionBatch
	(*StreamMessage)(nil),                  // 8: StreamMessage
	(*ProposalCommitment)(nil),             // 9: ProposalCommitment
	(*BlockInfo)(nil),                      // 10: BlockInfo
	(*transaction.DeclareV3WithClass)(nil), // 11: DeclareV3WithClass
	(*transaction.DeployAccountV3)(nil),    // 12: DeployAccountV3
	(*transaction.InvokeV3)(nil),           // 13: InvokeV3
	(*transaction.L1HandlerV0)(nil),        // 14: L1HandlerV0
	(*common.Hash)(nil),                    // 15: Hash
	(*common.Address)(nil),                 // 16: Address
	(*common.Fin)(nil),                     // 17: Fin
	(*common.Felt252)(nil),                 // 18: Felt252
	(*common.Uint128)(nil),                 // 19: Uint128
	(common.L1DataAvailabilityMode)(0),     // 20: L1DataAvailabilityMode
}
var file_p2p_proto_consensus_consensus_proto_depIdxs = []int32{
	11, // 0: ConsensusTransaction.declare_v3:type_name -> DeclareV3WithClass
	12, // 1: ConsensusTransaction.deploy_account_v3:type_name -> DeployAccountV3
	13, // 2: ConsensusTransaction.invoke_v3:type_name -> InvokeV3
	14, // 3: ConsensusTransaction.l1_handler:type_name -> L1HandlerV0
	15, // 4: ConsensusTransaction.transaction_hash:type_name -> Hash
	0,  // 5: Vote.vote_type:type_name -> Vote.VoteType
	15, // 6: Vote.proposal_commitment:type_name -> Hash
	16, // 7: Vote.voter:type_name -> Address
	5,  // 8: ProposalPart.init:type_name -> ProposalInit
	6,  // 9: ProposalPart.fin:type_name -> ProposalFin
	10, // 10: ProposalPart.block_info:type_name -> BlockInfo
	7,  // 11: ProposalPart.transactions:type_name -> TransactionBatch
	9,  // 12: ProposalPart.commitment:type_name -> ProposalCommitment
	16, // 13: ProposalInit.proposer:type_name -> Address
	15, // 14: ProposalFin.proposal_commitment:type_name -> Hash
	1,  // 15: TransactionBatch.transactions:type_name -> ConsensusTransaction
	17, // 16: StreamMessage.fin:type_name -> Fin
	15, // 17: ProposalCommitment.parent_commitment:type_name -> Hash
	16, // 18: ProposalCommitment.builder:type_name -> Address
	15, // 19: ProposalCommitment.old_state_root:type_name -> Hash
	15, // 20: ProposalCommitment.version_constant_commitment:type_name -> Hash
	15, // 21: ProposalCommitment.state_diff_commitment:type_name -> Hash
	15, // 22: ProposalCommitment.transaction_commitment:type_name -> Hash
	15, // 23: ProposalCommitment.event_commitment:type_name -> Hash
	15, // 24: ProposalCommitment.receipt_commitment:type_name -> Hash
	18, // 25: ProposalCommitment.concatenated_counts:type_name -> Felt252
	19, // 26: ProposalCommitment.l1_gas_price_fri:type_name -> Uint128
	19, // 27: ProposalCommitment.l1_data_gas_price_fri:type_name -> Uint128
	19, // 28: ProposalCommitment.l2_gas_price_fri:type_name -> Uint128
	19, // 29: ProposalCommitment.l2_gas_used:type_name -> Uint128
	19, // 30: ProposalCommitment.next_l2_gas_price_fri:type_name -> Uint128
	20, // 31: ProposalCommitment.l1_da_mode:type_name -> L1DataAvailabilityMode
	16, // 32: BlockInfo.builder:type_name -> Address
	19, // 33: BlockInfo.l2_gas_price_fri:type_name -> Uint128
	19, // 34: BlockInfo.l1_gas_price_wei:type_name -> Uint128
	19, // 35: BlockInfo.l1_data_gas_price_wei:type_name -> Uint128
	19, // 36: BlockInfo.eth_to_strk_rate:type_name -> Uint128
	20, // 37: BlockInfo.l1_da_mode:type_name -> L1DataAvailabilityMode
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_p2p_proto_consensus_consensus_proto_init() }
func file_p2p_proto_consensus_consensus_proto_init() {
	if File_p2p_proto_consensus_consensus_proto != nil {
		return
	}
	file_p2p_proto_consensus_consensus_proto_msgTypes[0].OneofWrappers = []any{
		(*ConsensusTransaction_DeclareV3)(nil),
		(*ConsensusTransaction_DeployAccountV3)(nil),
		(*ConsensusTransaction_InvokeV3)(nil),
		(*ConsensusTransaction_L1Handler)(nil),
	}
	file_p2p_proto_consensus_consensus_proto_msgTypes[1].OneofWrappers = []any{}
	file_p2p_proto_consensus_consensus_proto_msgTypes[3].OneofWrappers = []any{
		(*ProposalPart_Init)(nil),
		(*ProposalPart_Fin)(nil),
		(*ProposalPart_BlockInfo)(nil),
		(*ProposalPart_Transactions)(nil),
		(*ProposalPart_Commitment)(nil),
	}
	file_p2p_proto_consensus_consensus_proto_msgTypes[4].OneofWrappers = []any{}
	file_p2p_proto_consensus_consensus_proto_msgTypes[7].OneofWrappers = []any{
		(*StreamMessage_Content)(nil),
		(*StreamMessage_Fin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_consensus_consensus_proto_rawDesc), len(file_p2p_proto_consensus_consensus_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_p2p_proto_consensus_consensus_proto_depIdxs,
		EnumInfos:         file_p2p_proto_consensus_consensus_proto_enumTypes,
		MessageInfos:      file_p2p_proto_consensus_consensus_proto_msgTypes,
	}.Build()
	File_p2p_proto_consensus_consensus_proto = out.File
	file_p2p_proto_consensus_consensus_proto_goTypes = nil
	file_p2p_proto_consensus_consensus_proto_depIdxs = nil
}

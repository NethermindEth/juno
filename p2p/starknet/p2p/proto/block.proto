syntax = "proto3";
import "p2p/proto/common.proto";
import "p2p/proto/state.proto";
import "google/protobuf/timestamp.proto";

// for now, we assume a small consensus, so this fits in 1M. Else, these will be repeated
message Signatures {
    BlockID block = 1;

    repeated ConsensusSignature signatures = 2; //
                                       // can be more explicit here about the signature structure as this is not part of account abstraction
}

// Note: commitments may change to be for the previous blocks like comet/tendermint
// hash of block header sent to L1
message BlockHeader {
    Hash                      parent_hash       = 1;
    uint64                    number            = 2;
    google.protobuf.Timestamp time              = 3;   // TODO: see if this needs to be Felt252 or can be converted
    Address                   sequencer_address = 4;
    Merkle                    state_diffs       = 5;   //  By order of (contract, key), taking last in case of duplicates.
                                                       // This means the proposer needs to sort after finishing the block (TBD: patricia? )
                                                       // State is optional and appears every X blocks for the last block. This is to support
                                                       // snapshot sync and also so that light nodes can sync on state without state diffs.
    Patricia                  state             = 6;   // hash of contract and class patricia tries. Same as in L1. Later more trees will be included
    Hash                      proof_fact        = 7;   // for Kth block behind. A hash of the output of the proof

    // The following merkles can be built on the fly while sequencing/validating txs.
    Merkle                    transactions      = 8;   // By order of execution. TBD: required? the client can execute (powerful machine) and match state diff
    Merkle                    events            = 9;   // By order of issuance. TBD: in receipts?
    Merkle                    receipts          = 10;  // By order of issuance.
    string                    protocol_version  = 11; // Starknet version
    Felt252                   gas_price         = 12;
}

message BlockProof {
    bytes proof = 1; // proof size is currently 142K
}

// sent to all peers (except the ones this was received from, if any).
// for a fraction of peers, also send the GetBlockHeaders and GetBlockBodies response (as if they asked for it for this block)
message NewBlock {
    oneof maybe_full {
        BlockID              id     = 1;
        BlockHeadersResponse header = 2;
        BlockBodiesResponse  body   = 3;
    }
}

// Requests a peer's CurrentBlockHeader
message CurrentBlockHeaderRequest {}

// result is (BlockHeader, Signature?)* in order of creation (incr/dec)
message BlockHeadersRequest {
    Iteration iteration = 1;
}

message BlockHeadersResponsePart {
    oneof header_message {
        BlockHeader header     = 1;
        Signatures  signatures = 2;
        Fin         fin        = 3; // no support for interleaving for now
    }
}

message BlockHeadersResponse {
    repeated BlockHeadersResponsePart part = 1;
}

// result is (StateDiff*, Classes*, BlockProof?)* currently in creation order (incr/dec), but may change in the future
message BlockBodiesRequest {
    Iteration iteration = 1;
}

message BlockBodiesResponse {
    optional BlockID id = 1; // may not appear if Fin is sent to end the whole response

    oneof body_message {
        StateDiff  diff    = 2;
        Classes    classes = 3;
        BlockProof proof   = 4;
        Fin        fin     = 5;
    }
}



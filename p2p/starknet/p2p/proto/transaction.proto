syntax = "proto3";
import "p2p/proto/common.proto";

message ResourceLimits {
    Felt252 max_amount         = 1;
    Felt252 max_price_per_unit = 2;
}

message AccountSignature {
    repeated Felt252 parts = 1;
}

message Transaction
{
    message DeclareV0 {
        Address          sender     = 1;
        Felt252          max_fee    = 2;
        AccountSignature signature  = 3;
        Hash             class_hash = 4;
    }

    message DeclareV1 {
        Address          sender     = 1;
        Felt252          max_fee    = 2;
        AccountSignature signature  = 3;
        Hash             class_hash = 4;
        Felt252          nonce      = 5;
    }

    message DeclareV2 {
        Address          sender              = 1;
        Felt252          max_fee             = 2;
        AccountSignature signature           = 3;
        Hash             class_hash          = 4;
        Felt252          nonce               = 5;
        Felt252          compiled_class_hash = 6;
    }

    message DeclareV3 {
        Address          sender              = 1;
        Felt252          max_fee             = 2;
        AccountSignature signature           = 3;
        Hash             class_hash          = 4;
        Felt252          nonce               = 5;
        Felt252          compiled_class_hash = 6;
        ResourceLimits   l1_gas              = 7;
        ResourceLimits   l2_gas              = 8;
        Felt252          tip                 = 9;
        Address          paymaster           = 10;
        string           nonce_domain        = 11;
        string           fee_domain          = 12;
    }

    message Deploy {
        Hash     class_hash       = 1;
        Felt252  address_salt     = 2;
        repeated Felt252 calldata = 3;
    }

    message DeployAccountV1 {
        Felt252          max_fee          = 1;
        AccountSignature signature        = 2;
        Hash             class_hash       = 3;
        Felt252          nonce            = 4;
        Felt252          address_salt     = 5;
        repeated         Felt252 calldata = 6;
    }

    message DeployAccountV3 {
        Felt252          max_fee          = 1;
        AccountSignature signature        = 2;
        Hash             class_hash       = 3;
        Felt252          nonce            = 4;
        Felt252          address_salt     = 5;
        repeated         Felt252 calldata = 6;
        ResourceLimits   l1_gas           = 7;
        ResourceLimits   l2_gas           = 8;
        Felt252          tip              = 9;
        Address          paymaster        = 10;
        string           nonce_domain     = 11;
        string           fee_domain       = 12;
    }

    message InvokeV0 {
        Felt252          max_fee              = 1;
        AccountSignature signature            = 2;
        Address          address              = 3;
        Felt252          entry_point_selector = 4;
        repeated         Felt252 calldata     = 5;
    }

    message InvokeV1 {
        Address          sender           = 1;
        Felt252          max_fee          = 2;
        AccountSignature signature        = 3;
        repeated         Felt252 calldata = 4;
        Felt252          nonce            = 5;
    }

    message InvokeV3 {
        Address          sender           = 1;
        Felt252          max_fee          = 2;
        AccountSignature signature        = 3;
        repeated         Felt252 calldata = 4;
        ResourceLimits   l1_gas           = 5;
        ResourceLimits   l2_gas           = 6;
        Felt252          tip              = 7;
        Address          paymaster        = 8;
        string           nonce_domain     = 9;
        string           fee_domain       = 10;
        Felt252          nonce            = 11;
    }

    message L1HandlerV1 {
        Felt252  nonce                = 1;
        Address  address              = 2;
        Felt252  entry_point_selector = 3;
        repeated Felt252 calldata     = 4;
    }

    oneof txn {
        DeclareV0       declare_v0        = 1;
        DeclareV1       declare_v1        = 2;
        DeclareV2       declare_v2        = 3;
        DeclareV3       declare_v3        = 4;
        Deploy          deploy            = 5;
        DeployAccountV1 deploy_account_v1 = 6;
        DeployAccountV3 deploy_account_v3 = 7;
        InvokeV0        invoke_v0         = 8;
        InvokeV1        invoke_v1         = 9;
        InvokeV3        invoke_v3         = 10;
        L1HandlerV1     l1_handler        = 11;
    }
}

// TBD: can support a flag to return tx hashes only, good for standalone mempool to remove them,
// or any node that keeps track of transaction streaming in the consensus.
message TransactionsRequest {
    Iteration iteration = 1;
}

// can be several in a single reply
message Transactions {
    repeated Transaction items = 1;
}

message TransactionsResponse {
    optional BlockID id = 1; // may not appear if Fin is sent to end the whole response

    oneof responses {
        Transactions transactions = 2;
        Fin          fin          = 3;
    }
}
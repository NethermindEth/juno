// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: p2p/proto/block.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBlocks_Direction int32

const (
	GetBlocks_Forward  GetBlocks_Direction = 0
	GetBlocks_Backward GetBlocks_Direction = 1
)

// Enum value maps for GetBlocks_Direction.
var (
	GetBlocks_Direction_name = map[int32]string{
		0: "Forward",
		1: "Backward",
	}
	GetBlocks_Direction_value = map[string]int32{
		"Forward":  0,
		"Backward": 1,
	}
)

func (x GetBlocks_Direction) Enum() *GetBlocks_Direction {
	p := new(GetBlocks_Direction)
	*p = x
	return p
}

func (x GetBlocks_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBlocks_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_proto_block_proto_enumTypes[0].Descriptor()
}

func (GetBlocks_Direction) Type() protoreflect.EnumType {
	return &file_p2p_proto_block_proto_enumTypes[0]
}

func (x GetBlocks_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBlocks_Direction.Descriptor instead.
func (GetBlocks_Direction) EnumDescriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{4, 0}
}

// for now, we assume a small consensus, so this fits in 1M. Else, these will be repeated
type Signatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *BlockID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Signatures []*Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"` // can be more explicit here about the signature structure as this is not part of account abstraction
}

func (x *Signatures) Reset() {
	*x = Signatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signatures) ProtoMessage() {}

func (x *Signatures) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signatures.ProtoReflect.Descriptor instead.
func (*Signatures) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{0}
}

func (x *Signatures) GetId() *BlockID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signatures) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Note: commitments may change to be for the previous blocks like comet/tendermint
// hash of block header sent to L1
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBlock      *BlockID               `protobuf:"bytes,1,opt,name=parent_block,json=parentBlock,proto3" json:"parent_block,omitempty"`
	Time             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"` // TODO: see if this needs to be Felt252 or can be converted
	SequencerAddress *Address               `protobuf:"bytes,3,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
	StateDiffs       *Merkle                `protobuf:"bytes,4,opt,name=state_diffs,json=stateDiffs,proto3" json:"state_diffs,omitempty"` //  By order of (contract, key), taking last in case of duplicates.
	// State is optional and appears every X blocks for the last block. This is to support
	// snapshot sync and also so that light nodes can sync on state without state diffs.
	State     *Merkle `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`                          // hash of contract and class patricia tries. Same as in L1. Later more trees will be included
	ProofFact *Hash   `protobuf:"bytes,6,opt,name=proof_fact,json=proofFact,proto3" json:"proof_fact,omitempty"` // for Kth block behind. A hash of the output of the proof
	// The following merkles can be built on the fly while sequencing/validating txs.
	Transactions    *Merkle  `protobuf:"bytes,7,opt,name=transactions,proto3" json:"transactions,omitempty"` // By order of execution
	Events          *Merkle  `protobuf:"bytes,8,opt,name=events,proto3" json:"events,omitempty"`             // By order of issuance.
	Receipts        *Merkle  `protobuf:"bytes,9,opt,name=receipts,proto3" json:"receipts,omitempty"`         // By order of issuance.
	ProtocolVersion uint32   `protobuf:"varint,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ChainId         *ChainID `protobuf:"bytes,11,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHeader) GetParentBlock() *BlockID {
	if x != nil {
		return x.ParentBlock
	}
	return nil
}

func (x *BlockHeader) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BlockHeader) GetSequencerAddress() *Address {
	if x != nil {
		return x.SequencerAddress
	}
	return nil
}

func (x *BlockHeader) GetStateDiffs() *Merkle {
	if x != nil {
		return x.StateDiffs
	}
	return nil
}

func (x *BlockHeader) GetState() *Merkle {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BlockHeader) GetProofFact() *Hash {
	if x != nil {
		return x.ProofFact
	}
	return nil
}

func (x *BlockHeader) GetTransactions() *Merkle {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockHeader) GetEvents() *Merkle {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BlockHeader) GetReceipts() *Merkle {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *BlockHeader) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *BlockHeader) GetChainId() *ChainID {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type BlockProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"` // proof size is currently 142K
}

func (x *BlockProof) Reset() {
	*x = BlockProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockProof) ProtoMessage() {}

func (x *BlockProof) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockProof.ProtoReflect.Descriptor instead.
func (*BlockProof) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{2}
}

func (x *BlockProof) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// sent to all peers (except the ones this was received from, if any).
// for a fraction of peers, also send the GetBlocks response (as if they asked for it for this block)
type NewBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *BlockID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewBlock) Reset() {
	*x = NewBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlock) ProtoMessage() {}

func (x *NewBlock) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlock.ProtoReflect.Descriptor instead.
func (*NewBlock) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{3}
}

func (x *NewBlock) GetId() *BlockID {
	if x != nil {
		return x.Id
	}
	return nil
}

// result is (BlockHeader, StateDiff*)*
type GetBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     *BlockID            `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"` // exclude start from the result
	Direction GetBlocks_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=GetBlocks_Direction" json:"direction,omitempty"`
	Limit     uint64              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Skip      uint64              `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"` // when starting, can send to first node skip=0, limit=100, second skip=100, limit=100, etc.
	Step      uint64              `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"` // to allow interleaving from several nodes
}

func (x *GetBlocks) Reset() {
	*x = GetBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocks) ProtoMessage() {}

func (x *GetBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocks.ProtoReflect.Descriptor instead.
func (*GetBlocks) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlocks) GetStart() *BlockID {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetBlocks) GetDirection() GetBlocks_Direction {
	if x != nil {
		return x.Direction
	}
	return GetBlocks_Forward
}

func (x *GetBlocks) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBlocks) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *GetBlocks) GetStep() uint64 {
	if x != nil {
		return x.Step
	}
	return 0
}

type GetSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *BlockID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSignatures) Reset() {
	*x = GetSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_block_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatures) ProtoMessage() {}

func (x *GetSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_block_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatures.ProtoReflect.Descriptor instead.
func (*GetSignatures) Descriptor() ([]byte, []int) {
	return file_p2p_proto_block_proto_rawDescGZIP(), []int{5}
}

func (x *GetSignatures) GetId() *BlockID {
	if x != nil {
		return x.Id
	}
	return nil
}

var File_p2p_proto_block_proto protoreflect.FileDescriptor

var file_p2p_proto_block_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x52, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x46, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x24,
	0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x22, 0x26, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_proto_block_proto_rawDescOnce sync.Once
	file_p2p_proto_block_proto_rawDescData = file_p2p_proto_block_proto_rawDesc
)

func file_p2p_proto_block_proto_rawDescGZIP() []byte {
	file_p2p_proto_block_proto_rawDescOnce.Do(func() {
		file_p2p_proto_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_proto_block_proto_rawDescData)
	})
	return file_p2p_proto_block_proto_rawDescData
}

var file_p2p_proto_block_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_p2p_proto_block_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_p2p_proto_block_proto_goTypes = []interface{}{
	(GetBlocks_Direction)(0),      // 0: GetBlocks.Direction
	(*Signatures)(nil),            // 1: Signatures
	(*BlockHeader)(nil),           // 2: BlockHeader
	(*BlockProof)(nil),            // 3: BlockProof
	(*NewBlock)(nil),              // 4: NewBlock
	(*GetBlocks)(nil),             // 5: GetBlocks
	(*GetSignatures)(nil),         // 6: GetSignatures
	(*BlockID)(nil),               // 7: BlockID
	(*Signature)(nil),             // 8: Signature
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*Address)(nil),               // 10: Address
	(*Merkle)(nil),                // 11: Merkle
	(*Hash)(nil),                  // 12: Hash
	(*ChainID)(nil),               // 13: ChainID
}
var file_p2p_proto_block_proto_depIdxs = []int32{
	7,  // 0: Signatures.id:type_name -> BlockID
	8,  // 1: Signatures.signatures:type_name -> Signature
	7,  // 2: BlockHeader.parent_block:type_name -> BlockID
	9,  // 3: BlockHeader.time:type_name -> google.protobuf.Timestamp
	10, // 4: BlockHeader.sequencer_address:type_name -> Address
	11, // 5: BlockHeader.state_diffs:type_name -> Merkle
	11, // 6: BlockHeader.state:type_name -> Merkle
	12, // 7: BlockHeader.proof_fact:type_name -> Hash
	11, // 8: BlockHeader.transactions:type_name -> Merkle
	11, // 9: BlockHeader.events:type_name -> Merkle
	11, // 10: BlockHeader.receipts:type_name -> Merkle
	13, // 11: BlockHeader.chain_id:type_name -> ChainID
	7,  // 12: NewBlock.id:type_name -> BlockID
	7,  // 13: GetBlocks.start:type_name -> BlockID
	0,  // 14: GetBlocks.direction:type_name -> GetBlocks.Direction
	7,  // 15: GetSignatures.id:type_name -> BlockID
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_p2p_proto_block_proto_init() }
func file_p2p_proto_block_proto_init() {
	if File_p2p_proto_block_proto != nil {
		return
	}
	file_p2p_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_p2p_proto_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_block_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_block_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_block_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_proto_block_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_block_proto_goTypes,
		DependencyIndexes: file_p2p_proto_block_proto_depIdxs,
		EnumInfos:         file_p2p_proto_block_proto_enumTypes,
		MessageInfos:      file_p2p_proto_block_proto_msgTypes,
	}.Build()
	File_p2p_proto_block_proto = out.File
	file_p2p_proto_block_proto_rawDesc = nil
	file_p2p_proto_block_proto_goTypes = nil
	file_p2p_proto_block_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.1
// source: p2p/proto/transaction.proto

package spec

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAmount       *Felt252 `protobuf:"bytes,1,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	MaxPricePerUnit *Felt252 `protobuf:"bytes,2,opt,name=max_price_per_unit,json=maxPricePerUnit,proto3" json:"max_price_per_unit,omitempty"`
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceLimits) GetMaxAmount() *Felt252 {
	if x != nil {
		return x.MaxAmount
	}
	return nil
}

func (x *ResourceLimits) GetMaxPricePerUnit() *Felt252 {
	if x != nil {
		return x.MaxPricePerUnit
	}
	return nil
}

type ResourceBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1Gas *ResourceLimits `protobuf:"bytes,1,opt,name=l1_gas,json=l1Gas,proto3" json:"l1_gas,omitempty"`
	L2Gas *ResourceLimits `protobuf:"bytes,2,opt,name=l2_gas,json=l2Gas,proto3" json:"l2_gas,omitempty"`
}

func (x *ResourceBounds) Reset() {
	*x = ResourceBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBounds) ProtoMessage() {}

func (x *ResourceBounds) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBounds.ProtoReflect.Descriptor instead.
func (*ResourceBounds) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceBounds) GetL1Gas() *ResourceLimits {
	if x != nil {
		return x.L1Gas
	}
	return nil
}

func (x *ResourceBounds) GetL2Gas() *ResourceLimits {
	if x != nil {
		return x.L2Gas
	}
	return nil
}

type AccountSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*Felt252 `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *AccountSignature) Reset() {
	*x = AccountSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSignature) ProtoMessage() {}

func (x *AccountSignature) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSignature.ProtoReflect.Descriptor instead.
func (*AccountSignature) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *AccountSignature) GetParts() []*Felt252 {
	if x != nil {
		return x.Parts
	}
	return nil
}

// This is a transaction that is already accepted in a block. Once we have a mempool, we will define
// a separate message for BroadcastedTransaction.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Txn:
	//
	//	*Transaction_DeclareV0_
	//	*Transaction_DeclareV1_
	//	*Transaction_DeclareV2_
	//	*Transaction_DeclareV3_
	//	*Transaction_Deploy_
	//	*Transaction_DeployAccountV1_
	//	*Transaction_DeployAccountV3_
	//	*Transaction_InvokeV0_
	//	*Transaction_InvokeV1_
	//	*Transaction_InvokeV3_
	//	*Transaction_L1Handler
	Txn isTransaction_Txn `protobuf_oneof:"txn"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3}
}

func (m *Transaction) GetTxn() isTransaction_Txn {
	if m != nil {
		return m.Txn
	}
	return nil
}

func (x *Transaction) GetDeclareV0() *Transaction_DeclareV0 {
	if x, ok := x.GetTxn().(*Transaction_DeclareV0_); ok {
		return x.DeclareV0
	}
	return nil
}

func (x *Transaction) GetDeclareV1() *Transaction_DeclareV1 {
	if x, ok := x.GetTxn().(*Transaction_DeclareV1_); ok {
		return x.DeclareV1
	}
	return nil
}

func (x *Transaction) GetDeclareV2() *Transaction_DeclareV2 {
	if x, ok := x.GetTxn().(*Transaction_DeclareV2_); ok {
		return x.DeclareV2
	}
	return nil
}

func (x *Transaction) GetDeclareV3() *Transaction_DeclareV3 {
	if x, ok := x.GetTxn().(*Transaction_DeclareV3_); ok {
		return x.DeclareV3
	}
	return nil
}

func (x *Transaction) GetDeploy() *Transaction_Deploy {
	if x, ok := x.GetTxn().(*Transaction_Deploy_); ok {
		return x.Deploy
	}
	return nil
}

func (x *Transaction) GetDeployAccountV1() *Transaction_DeployAccountV1 {
	if x, ok := x.GetTxn().(*Transaction_DeployAccountV1_); ok {
		return x.DeployAccountV1
	}
	return nil
}

func (x *Transaction) GetDeployAccountV3() *Transaction_DeployAccountV3 {
	if x, ok := x.GetTxn().(*Transaction_DeployAccountV3_); ok {
		return x.DeployAccountV3
	}
	return nil
}

func (x *Transaction) GetInvokeV0() *Transaction_InvokeV0 {
	if x, ok := x.GetTxn().(*Transaction_InvokeV0_); ok {
		return x.InvokeV0
	}
	return nil
}

func (x *Transaction) GetInvokeV1() *Transaction_InvokeV1 {
	if x, ok := x.GetTxn().(*Transaction_InvokeV1_); ok {
		return x.InvokeV1
	}
	return nil
}

func (x *Transaction) GetInvokeV3() *Transaction_InvokeV3 {
	if x, ok := x.GetTxn().(*Transaction_InvokeV3_); ok {
		return x.InvokeV3
	}
	return nil
}

func (x *Transaction) GetL1Handler() *Transaction_L1HandlerV0 {
	if x, ok := x.GetTxn().(*Transaction_L1Handler); ok {
		return x.L1Handler
	}
	return nil
}

type isTransaction_Txn interface {
	isTransaction_Txn()
}

type Transaction_DeclareV0_ struct {
	DeclareV0 *Transaction_DeclareV0 `protobuf:"bytes,1,opt,name=declare_v0,json=declareV0,proto3,oneof"`
}

type Transaction_DeclareV1_ struct {
	DeclareV1 *Transaction_DeclareV1 `protobuf:"bytes,2,opt,name=declare_v1,json=declareV1,proto3,oneof"`
}

type Transaction_DeclareV2_ struct {
	DeclareV2 *Transaction_DeclareV2 `protobuf:"bytes,3,opt,name=declare_v2,json=declareV2,proto3,oneof"`
}

type Transaction_DeclareV3_ struct {
	DeclareV3 *Transaction_DeclareV3 `protobuf:"bytes,4,opt,name=declare_v3,json=declareV3,proto3,oneof"`
}

type Transaction_Deploy_ struct {
	Deploy *Transaction_Deploy `protobuf:"bytes,5,opt,name=deploy,proto3,oneof"`
}

type Transaction_DeployAccountV1_ struct {
	DeployAccountV1 *Transaction_DeployAccountV1 `protobuf:"bytes,6,opt,name=deploy_account_v1,json=deployAccountV1,proto3,oneof"`
}

type Transaction_DeployAccountV3_ struct {
	DeployAccountV3 *Transaction_DeployAccountV3 `protobuf:"bytes,7,opt,name=deploy_account_v3,json=deployAccountV3,proto3,oneof"`
}

type Transaction_InvokeV0_ struct {
	InvokeV0 *Transaction_InvokeV0 `protobuf:"bytes,8,opt,name=invoke_v0,json=invokeV0,proto3,oneof"`
}

type Transaction_InvokeV1_ struct {
	InvokeV1 *Transaction_InvokeV1 `protobuf:"bytes,9,opt,name=invoke_v1,json=invokeV1,proto3,oneof"`
}

type Transaction_InvokeV3_ struct {
	InvokeV3 *Transaction_InvokeV3 `protobuf:"bytes,10,opt,name=invoke_v3,json=invokeV3,proto3,oneof"`
}

type Transaction_L1Handler struct {
	L1Handler *Transaction_L1HandlerV0 `protobuf:"bytes,11,opt,name=l1_handler,json=l1Handler,proto3,oneof"`
}

func (*Transaction_DeclareV0_) isTransaction_Txn() {}

func (*Transaction_DeclareV1_) isTransaction_Txn() {}

func (*Transaction_DeclareV2_) isTransaction_Txn() {}

func (*Transaction_DeclareV3_) isTransaction_Txn() {}

func (*Transaction_Deploy_) isTransaction_Txn() {}

func (*Transaction_DeployAccountV1_) isTransaction_Txn() {}

func (*Transaction_DeployAccountV3_) isTransaction_Txn() {}

func (*Transaction_InvokeV0_) isTransaction_Txn() {}

func (*Transaction_InvokeV1_) isTransaction_Txn() {}

func (*Transaction_InvokeV3_) isTransaction_Txn() {}

func (*Transaction_L1Handler) isTransaction_Txn() {}

type TransactionWithReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Receipt     *Receipt     `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *TransactionWithReceipt) Reset() {
	*x = TransactionWithReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionWithReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWithReceipt) ProtoMessage() {}

func (x *TransactionWithReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWithReceipt.ProtoReflect.Descriptor instead.
func (*TransactionWithReceipt) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionWithReceipt) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionWithReceipt) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

// TBD: can support a flag to return tx hashes only, good for standalone mempool to remove them,
// or any node that keeps track of transaction streaming in the consensus.
type TransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iteration *Iteration `protobuf:"bytes,1,opt,name=iteration,proto3" json:"iteration,omitempty"`
}

func (x *TransactionsRequest) Reset() {
	*x = TransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRequest) ProtoMessage() {}

func (x *TransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRequest.ProtoReflect.Descriptor instead.
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionsRequest) GetIteration() *Iteration {
	if x != nil {
		return x.Iteration
	}
	return nil
}

// Responses are sent ordered by the order given in the request. The order inside each block is
// according to the execution order.
type TransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionMessage:
	//
	//	*TransactionsResponse_TransactionWithReceipt
	//	*TransactionsResponse_Fin
	TransactionMessage isTransactionsResponse_TransactionMessage `protobuf_oneof:"transaction_message"`
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{6}
}

func (m *TransactionsResponse) GetTransactionMessage() isTransactionsResponse_TransactionMessage {
	if m != nil {
		return m.TransactionMessage
	}
	return nil
}

func (x *TransactionsResponse) GetTransactionWithReceipt() *TransactionWithReceipt {
	if x, ok := x.GetTransactionMessage().(*TransactionsResponse_TransactionWithReceipt); ok {
		return x.TransactionWithReceipt
	}
	return nil
}

func (x *TransactionsResponse) GetFin() *Fin {
	if x, ok := x.GetTransactionMessage().(*TransactionsResponse_Fin); ok {
		return x.Fin
	}
	return nil
}

type isTransactionsResponse_TransactionMessage interface {
	isTransactionsResponse_TransactionMessage()
}

type TransactionsResponse_TransactionWithReceipt struct {
	TransactionWithReceipt *TransactionWithReceipt `protobuf:"bytes,1,opt,name=transaction_with_receipt,json=transactionWithReceipt,proto3,oneof"`
}

type TransactionsResponse_Fin struct {
	Fin *Fin `protobuf:"bytes,2,opt,name=fin,proto3,oneof"` // Fin is sent after the peer sent all the data or when it encountered a block that it doesn't have its transactions.
}

func (*TransactionsResponse_TransactionWithReceipt) isTransactionsResponse_TransactionMessage() {}

func (*TransactionsResponse_Fin) isTransactionsResponse_TransactionMessage() {}

type Transactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Transactions) Reset() {
	*x = Transactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transactions) ProtoMessage() {}

func (x *Transactions) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transactions.ProtoReflect.Descriptor instead.
func (*Transactions) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *Transactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type Transaction_DeclareV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxFee    *Felt252          `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature *AccountSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash *Hash             `protobuf:"bytes,4,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
}

func (x *Transaction_DeclareV0) Reset() {
	*x = Transaction_DeclareV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeclareV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeclareV0) ProtoMessage() {}

func (x *Transaction_DeclareV0) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeclareV0.ProtoReflect.Descriptor instead.
func (*Transaction_DeclareV0) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Transaction_DeclareV0) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_DeclareV0) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_DeclareV0) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeclareV0) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

type Transaction_DeclareV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxFee    *Felt252          `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature *AccountSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash *Hash             `protobuf:"bytes,4,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce     *Felt252          `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Transaction_DeclareV1) Reset() {
	*x = Transaction_DeclareV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeclareV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeclareV1) ProtoMessage() {}

func (x *Transaction_DeclareV1) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeclareV1.ProtoReflect.Descriptor instead.
func (*Transaction_DeclareV1) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Transaction_DeclareV1) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_DeclareV1) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_DeclareV1) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeclareV1) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_DeclareV1) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type Transaction_DeclareV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender            *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxFee            *Felt252          `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature         *AccountSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash         *Hash             `protobuf:"bytes,4,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce             *Felt252          `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CompiledClassHash *Hash             `protobuf:"bytes,6,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
}

func (x *Transaction_DeclareV2) Reset() {
	*x = Transaction_DeclareV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeclareV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeclareV2) ProtoMessage() {}

func (x *Transaction_DeclareV2) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeclareV2.ProtoReflect.Descriptor instead.
func (*Transaction_DeclareV2) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Transaction_DeclareV2) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_DeclareV2) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_DeclareV2) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeclareV2) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_DeclareV2) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Transaction_DeclareV2) GetCompiledClassHash() *Hash {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

// see https://external.integration.starknet.io/feeder_gateway/get_transaction?transactionHash=0x41d1f5206ef58a443e7d3d1ca073171ec25fa75313394318fc83a074a6631c3
type Transaction_DeclareV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                    *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Signature                 *AccountSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash                 *Hash             `protobuf:"bytes,3,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce                     *Felt252          `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CompiledClassHash         *Hash             `protobuf:"bytes,5,opt,name=compiled_class_hash,json=compiledClassHash,proto3" json:"compiled_class_hash,omitempty"`
	ResourceBounds            *ResourceBounds   `protobuf:"bytes,6,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       uint64            `protobuf:"varint,7,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []*Felt252        `protobuf:"bytes,8,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	AccountDeploymentData     []*Felt252        `protobuf:"bytes,9,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	NonceDataAvailabilityMode VolitionDomain    `protobuf:"varint,10,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=VolitionDomain" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   VolitionDomain    `protobuf:"varint,11,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=VolitionDomain" json:"fee_data_availability_mode,omitempty"`
}

func (x *Transaction_DeclareV3) Reset() {
	*x = Transaction_DeclareV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeclareV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeclareV3) ProtoMessage() {}

func (x *Transaction_DeclareV3) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeclareV3.ProtoReflect.Descriptor instead.
func (*Transaction_DeclareV3) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Transaction_DeclareV3) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_DeclareV3) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeclareV3) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_DeclareV3) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Transaction_DeclareV3) GetCompiledClassHash() *Hash {
	if x != nil {
		return x.CompiledClassHash
	}
	return nil
}

func (x *Transaction_DeclareV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *Transaction_DeclareV3) GetTip() uint64 {
	if x != nil {
		return x.Tip
	}
	return 0
}

func (x *Transaction_DeclareV3) GetPaymasterData() []*Felt252 {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *Transaction_DeclareV3) GetAccountDeploymentData() []*Felt252 {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *Transaction_DeclareV3) GetNonceDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return VolitionDomain_L1
}

func (x *Transaction_DeclareV3) GetFeeDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return VolitionDomain_L1
}

type Transaction_Deploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassHash   *Hash      `protobuf:"bytes,1,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	AddressSalt *Felt252   `protobuf:"bytes,2,opt,name=address_salt,json=addressSalt,proto3" json:"address_salt,omitempty"`
	Calldata    []*Felt252 `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	Version     uint32     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Transaction_Deploy) Reset() {
	*x = Transaction_Deploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Deploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Deploy) ProtoMessage() {}

func (x *Transaction_Deploy) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Deploy.ProtoReflect.Descriptor instead.
func (*Transaction_Deploy) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Transaction_Deploy) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_Deploy) GetAddressSalt() *Felt252 {
	if x != nil {
		return x.AddressSalt
	}
	return nil
}

func (x *Transaction_Deploy) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *Transaction_Deploy) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Transaction_DeployAccountV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFee      *Felt252          `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature   *AccountSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash   *Hash             `protobuf:"bytes,3,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce       *Felt252          `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	AddressSalt *Felt252          `protobuf:"bytes,5,opt,name=address_salt,json=addressSalt,proto3" json:"address_salt,omitempty"`
	Calldata    []*Felt252        `protobuf:"bytes,6,rep,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *Transaction_DeployAccountV1) Reset() {
	*x = Transaction_DeployAccountV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeployAccountV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeployAccountV1) ProtoMessage() {}

func (x *Transaction_DeployAccountV1) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeployAccountV1.ProtoReflect.Descriptor instead.
func (*Transaction_DeployAccountV1) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Transaction_DeployAccountV1) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_DeployAccountV1) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeployAccountV1) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_DeployAccountV1) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Transaction_DeployAccountV1) GetAddressSalt() *Felt252 {
	if x != nil {
		return x.AddressSalt
	}
	return nil
}

func (x *Transaction_DeployAccountV1) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

// see https://external.integration.starknet.io/feeder_gateway/get_transaction?transactionHash=0x29fd7881f14380842414cdfdd8d6c0b1f2174f8916edcfeb1ede1eb26ac3ef0
type Transaction_DeployAccountV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature                 *AccountSignature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ClassHash                 *Hash             `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce                     *Felt252          `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	AddressSalt               *Felt252          `protobuf:"bytes,4,opt,name=address_salt,json=addressSalt,proto3" json:"address_salt,omitempty"`
	Calldata                  []*Felt252        `protobuf:"bytes,5,rep,name=calldata,proto3" json:"calldata,omitempty"`
	ResourceBounds            *ResourceBounds   `protobuf:"bytes,6,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       uint64            `protobuf:"varint,7,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []*Felt252        `protobuf:"bytes,8,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	NonceDataAvailabilityMode VolitionDomain    `protobuf:"varint,9,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=VolitionDomain" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   VolitionDomain    `protobuf:"varint,10,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=VolitionDomain" json:"fee_data_availability_mode,omitempty"`
}

func (x *Transaction_DeployAccountV3) Reset() {
	*x = Transaction_DeployAccountV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeployAccountV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeployAccountV3) ProtoMessage() {}

func (x *Transaction_DeployAccountV3) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeployAccountV3.ProtoReflect.Descriptor instead.
func (*Transaction_DeployAccountV3) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Transaction_DeployAccountV3) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetClassHash() *Hash {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetAddressSalt() *Felt252 {
	if x != nil {
		return x.AddressSalt
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetTip() uint64 {
	if x != nil {
		return x.Tip
	}
	return 0
}

func (x *Transaction_DeployAccountV3) GetPaymasterData() []*Felt252 {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *Transaction_DeployAccountV3) GetNonceDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return VolitionDomain_L1
}

func (x *Transaction_DeployAccountV3) GetFeeDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return VolitionDomain_L1
}

type Transaction_InvokeV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFee             *Felt252          `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature          *AccountSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Address            *Address          `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	EntryPointSelector *Felt252          `protobuf:"bytes,4,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	Calldata           []*Felt252        `protobuf:"bytes,5,rep,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *Transaction_InvokeV0) Reset() {
	*x = Transaction_InvokeV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_InvokeV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_InvokeV0) ProtoMessage() {}

func (x *Transaction_InvokeV0) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_InvokeV0.ProtoReflect.Descriptor instead.
func (*Transaction_InvokeV0) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 7}
}

func (x *Transaction_InvokeV0) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_InvokeV0) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_InvokeV0) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Transaction_InvokeV0) GetEntryPointSelector() *Felt252 {
	if x != nil {
		return x.EntryPointSelector
	}
	return nil
}

func (x *Transaction_InvokeV0) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

type Transaction_InvokeV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MaxFee    *Felt252          `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	Signature *AccountSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Calldata  []*Felt252        `protobuf:"bytes,4,rep,name=calldata,proto3" json:"calldata,omitempty"`
	Nonce     *Felt252          `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Transaction_InvokeV1) Reset() {
	*x = Transaction_InvokeV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_InvokeV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_InvokeV1) ProtoMessage() {}

func (x *Transaction_InvokeV1) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_InvokeV1.ProtoReflect.Descriptor instead.
func (*Transaction_InvokeV1) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 8}
}

func (x *Transaction_InvokeV1) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_InvokeV1) GetMaxFee() *Felt252 {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *Transaction_InvokeV1) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_InvokeV1) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *Transaction_InvokeV1) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// see https://external.integration.starknet.io/feeder_gateway/get_transaction?transactionHash=0x41906f1c314cca5f43170ea75d3b1904196a10101190d2b12a41cc61cfd17c
type Transaction_InvokeV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                    *Address          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Signature                 *AccountSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Calldata                  []*Felt252        `protobuf:"bytes,3,rep,name=calldata,proto3" json:"calldata,omitempty"`
	ResourceBounds            *ResourceBounds   `protobuf:"bytes,4,opt,name=resource_bounds,json=resourceBounds,proto3" json:"resource_bounds,omitempty"`
	Tip                       uint64            `protobuf:"varint,5,opt,name=tip,proto3" json:"tip,omitempty"`
	PaymasterData             []*Felt252        `protobuf:"bytes,6,rep,name=paymaster_data,json=paymasterData,proto3" json:"paymaster_data,omitempty"`
	AccountDeploymentData     []*Felt252        `protobuf:"bytes,7,rep,name=account_deployment_data,json=accountDeploymentData,proto3" json:"account_deployment_data,omitempty"`
	NonceDataAvailabilityMode VolitionDomain    `protobuf:"varint,8,opt,name=nonce_data_availability_mode,json=nonceDataAvailabilityMode,proto3,enum=VolitionDomain" json:"nonce_data_availability_mode,omitempty"`
	FeeDataAvailabilityMode   VolitionDomain    `protobuf:"varint,9,opt,name=fee_data_availability_mode,json=feeDataAvailabilityMode,proto3,enum=VolitionDomain" json:"fee_data_availability_mode,omitempty"`
	Nonce                     *Felt252          `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Transaction_InvokeV3) Reset() {
	*x = Transaction_InvokeV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_InvokeV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_InvokeV3) ProtoMessage() {}

func (x *Transaction_InvokeV3) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_InvokeV3.ProtoReflect.Descriptor instead.
func (*Transaction_InvokeV3) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 9}
}

func (x *Transaction_InvokeV3) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Transaction_InvokeV3) GetSignature() *AccountSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction_InvokeV3) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *Transaction_InvokeV3) GetResourceBounds() *ResourceBounds {
	if x != nil {
		return x.ResourceBounds
	}
	return nil
}

func (x *Transaction_InvokeV3) GetTip() uint64 {
	if x != nil {
		return x.Tip
	}
	return 0
}

func (x *Transaction_InvokeV3) GetPaymasterData() []*Felt252 {
	if x != nil {
		return x.PaymasterData
	}
	return nil
}

func (x *Transaction_InvokeV3) GetAccountDeploymentData() []*Felt252 {
	if x != nil {
		return x.AccountDeploymentData
	}
	return nil
}

func (x *Transaction_InvokeV3) GetNonceDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.NonceDataAvailabilityMode
	}
	return VolitionDomain_L1
}

func (x *Transaction_InvokeV3) GetFeeDataAvailabilityMode() VolitionDomain {
	if x != nil {
		return x.FeeDataAvailabilityMode
	}
	return VolitionDomain_L1
}

func (x *Transaction_InvokeV3) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type Transaction_L1HandlerV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce              *Felt252   `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address            *Address   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	EntryPointSelector *Felt252   `protobuf:"bytes,3,opt,name=entry_point_selector,json=entryPointSelector,proto3" json:"entry_point_selector,omitempty"`
	Calldata           []*Felt252 `protobuf:"bytes,4,rep,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *Transaction_L1HandlerV0) Reset() {
	*x = Transaction_L1HandlerV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_L1HandlerV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_L1HandlerV0) ProtoMessage() {}

func (x *Transaction_L1HandlerV0) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_L1HandlerV0.ProtoReflect.Descriptor instead.
func (*Transaction_L1HandlerV0) Descriptor() ([]byte, []int) {
	return file_p2p_proto_transaction_proto_rawDescGZIP(), []int{3, 10}
}

func (x *Transaction_L1HandlerV0) GetNonce() *Felt252 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Transaction_L1HandlerV0) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Transaction_L1HandlerV0) GetEntryPointSelector() *Felt252 {
	if x != nil {
		return x.EntryPointSelector
	}
	return nil
}

func (x *Transaction_L1HandlerV0) GetCalldata() []*Felt252 {
	if x != nil {
		return x.Calldata
	}
	return nil
}

var File_p2p_proto_transaction_proto protoreflect.FileDescriptor

var file_p2p_proto_transaction_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70,
	0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x22, 0x60, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x05, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x32,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x05, 0x6c, 0x32, 0x47,
	0x61, 0x73, 0x22, 0x32, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0xd3, 0x1e, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x56, 0x30, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x30, 0x12,
	0x37, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x31, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x31, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56,
	0x32, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x33, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x33, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x33, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x33, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x76, 0x30, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x30, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x30, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x76, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56,
	0x31, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x31, 0x12, 0x34, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x76, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x56, 0x33, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x56,
	0x30, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x1a, 0xa7,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x30, 0x12, 0x20, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x1a, 0xc7, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x56, 0x31, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74,
	0x32, 0x35, 0x32, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x1a, 0xfe, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56, 0x32,
	0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65,
	0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0xba, 0x04, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x56,
	0x33, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74,
	0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x2f, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x50, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x1a, 0x9b, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x24, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35,
	0x32, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xfe,
	0x01, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x31, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65,
	0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65,
	0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xf8, 0x03, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x33, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74,
	0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74,
	0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x1c, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x1a,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xe4, 0x01, 0x0a, 0x08, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x30, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32,
	0x35, 0x32, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xc6, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x31, 0x12, 0x20,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74,
	0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x82, 0x04, 0x0a, 0x08, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x33, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46,
	0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x2f, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x50, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4c, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x56, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x17, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a,
	0xb3, 0x01, 0x0a, 0x0b, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x56, 0x30, 0x12,
	0x1e, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x12, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x46, 0x65, 0x6c, 0x74, 0x32, 0x35, 0x32, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x22, 0x6c, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x3f, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x66, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x66, 0x69, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x64, 0x45, 0x74, 0x68, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x2f, 0x70, 0x32,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_proto_transaction_proto_rawDescOnce sync.Once
	file_p2p_proto_transaction_proto_rawDescData = file_p2p_proto_transaction_proto_rawDesc
)

func file_p2p_proto_transaction_proto_rawDescGZIP() []byte {
	file_p2p_proto_transaction_proto_rawDescOnce.Do(func() {
		file_p2p_proto_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_proto_transaction_proto_rawDescData)
	})
	return file_p2p_proto_transaction_proto_rawDescData
}

var (
	file_p2p_proto_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
	file_p2p_proto_transaction_proto_goTypes  = []interface{}{
		(*ResourceLimits)(nil),              // 0: ResourceLimits
		(*ResourceBounds)(nil),              // 1: ResourceBounds
		(*AccountSignature)(nil),            // 2: AccountSignature
		(*Transaction)(nil),                 // 3: Transaction
		(*TransactionWithReceipt)(nil),      // 4: TransactionWithReceipt
		(*TransactionsRequest)(nil),         // 5: TransactionsRequest
		(*TransactionsResponse)(nil),        // 6: TransactionsResponse
		(*Transactions)(nil),                // 7: Transactions
		(*Transaction_DeclareV0)(nil),       // 8: Transaction.DeclareV0
		(*Transaction_DeclareV1)(nil),       // 9: Transaction.DeclareV1
		(*Transaction_DeclareV2)(nil),       // 10: Transaction.DeclareV2
		(*Transaction_DeclareV3)(nil),       // 11: Transaction.DeclareV3
		(*Transaction_Deploy)(nil),          // 12: Transaction.Deploy
		(*Transaction_DeployAccountV1)(nil), // 13: Transaction.DeployAccountV1
		(*Transaction_DeployAccountV3)(nil), // 14: Transaction.DeployAccountV3
		(*Transaction_InvokeV0)(nil),        // 15: Transaction.InvokeV0
		(*Transaction_InvokeV1)(nil),        // 16: Transaction.InvokeV1
		(*Transaction_InvokeV3)(nil),        // 17: Transaction.InvokeV3
		(*Transaction_L1HandlerV0)(nil),     // 18: Transaction.L1HandlerV0
		(*Felt252)(nil),                     // 19: Felt252
		(*Receipt)(nil),                     // 20: Receipt
		(*Iteration)(nil),                   // 21: Iteration
		(*Fin)(nil),                         // 22: Fin
		(*Address)(nil),                     // 23: Address
		(*Hash)(nil),                        // 24: Hash
		(VolitionDomain)(0),                 // 25: VolitionDomain
	}
)
var file_p2p_proto_transaction_proto_depIdxs = []int32{
	19, // 0: ResourceLimits.max_amount:type_name -> Felt252
	19, // 1: ResourceLimits.max_price_per_unit:type_name -> Felt252
	0,  // 2: ResourceBounds.l1_gas:type_name -> ResourceLimits
	0,  // 3: ResourceBounds.l2_gas:type_name -> ResourceLimits
	19, // 4: AccountSignature.parts:type_name -> Felt252
	8,  // 5: Transaction.declare_v0:type_name -> Transaction.DeclareV0
	9,  // 6: Transaction.declare_v1:type_name -> Transaction.DeclareV1
	10, // 7: Transaction.declare_v2:type_name -> Transaction.DeclareV2
	11, // 8: Transaction.declare_v3:type_name -> Transaction.DeclareV3
	12, // 9: Transaction.deploy:type_name -> Transaction.Deploy
	13, // 10: Transaction.deploy_account_v1:type_name -> Transaction.DeployAccountV1
	14, // 11: Transaction.deploy_account_v3:type_name -> Transaction.DeployAccountV3
	15, // 12: Transaction.invoke_v0:type_name -> Transaction.InvokeV0
	16, // 13: Transaction.invoke_v1:type_name -> Transaction.InvokeV1
	17, // 14: Transaction.invoke_v3:type_name -> Transaction.InvokeV3
	18, // 15: Transaction.l1_handler:type_name -> Transaction.L1HandlerV0
	3,  // 16: TransactionWithReceipt.transaction:type_name -> Transaction
	20, // 17: TransactionWithReceipt.receipt:type_name -> Receipt
	21, // 18: TransactionsRequest.iteration:type_name -> Iteration
	4,  // 19: TransactionsResponse.transaction_with_receipt:type_name -> TransactionWithReceipt
	22, // 20: TransactionsResponse.fin:type_name -> Fin
	3,  // 21: Transactions.transactions:type_name -> Transaction
	23, // 22: Transaction.DeclareV0.sender:type_name -> Address
	19, // 23: Transaction.DeclareV0.max_fee:type_name -> Felt252
	2,  // 24: Transaction.DeclareV0.signature:type_name -> AccountSignature
	24, // 25: Transaction.DeclareV0.class_hash:type_name -> Hash
	23, // 26: Transaction.DeclareV1.sender:type_name -> Address
	19, // 27: Transaction.DeclareV1.max_fee:type_name -> Felt252
	2,  // 28: Transaction.DeclareV1.signature:type_name -> AccountSignature
	24, // 29: Transaction.DeclareV1.class_hash:type_name -> Hash
	19, // 30: Transaction.DeclareV1.nonce:type_name -> Felt252
	23, // 31: Transaction.DeclareV2.sender:type_name -> Address
	19, // 32: Transaction.DeclareV2.max_fee:type_name -> Felt252
	2,  // 33: Transaction.DeclareV2.signature:type_name -> AccountSignature
	24, // 34: Transaction.DeclareV2.class_hash:type_name -> Hash
	19, // 35: Transaction.DeclareV2.nonce:type_name -> Felt252
	24, // 36: Transaction.DeclareV2.compiled_class_hash:type_name -> Hash
	23, // 37: Transaction.DeclareV3.sender:type_name -> Address
	2,  // 38: Transaction.DeclareV3.signature:type_name -> AccountSignature
	24, // 39: Transaction.DeclareV3.class_hash:type_name -> Hash
	19, // 40: Transaction.DeclareV3.nonce:type_name -> Felt252
	24, // 41: Transaction.DeclareV3.compiled_class_hash:type_name -> Hash
	1,  // 42: Transaction.DeclareV3.resource_bounds:type_name -> ResourceBounds
	19, // 43: Transaction.DeclareV3.paymaster_data:type_name -> Felt252
	19, // 44: Transaction.DeclareV3.account_deployment_data:type_name -> Felt252
	25, // 45: Transaction.DeclareV3.nonce_data_availability_mode:type_name -> VolitionDomain
	25, // 46: Transaction.DeclareV3.fee_data_availability_mode:type_name -> VolitionDomain
	24, // 47: Transaction.Deploy.class_hash:type_name -> Hash
	19, // 48: Transaction.Deploy.address_salt:type_name -> Felt252
	19, // 49: Transaction.Deploy.calldata:type_name -> Felt252
	19, // 50: Transaction.DeployAccountV1.max_fee:type_name -> Felt252
	2,  // 51: Transaction.DeployAccountV1.signature:type_name -> AccountSignature
	24, // 52: Transaction.DeployAccountV1.class_hash:type_name -> Hash
	19, // 53: Transaction.DeployAccountV1.nonce:type_name -> Felt252
	19, // 54: Transaction.DeployAccountV1.address_salt:type_name -> Felt252
	19, // 55: Transaction.DeployAccountV1.calldata:type_name -> Felt252
	2,  // 56: Transaction.DeployAccountV3.signature:type_name -> AccountSignature
	24, // 57: Transaction.DeployAccountV3.class_hash:type_name -> Hash
	19, // 58: Transaction.DeployAccountV3.nonce:type_name -> Felt252
	19, // 59: Transaction.DeployAccountV3.address_salt:type_name -> Felt252
	19, // 60: Transaction.DeployAccountV3.calldata:type_name -> Felt252
	1,  // 61: Transaction.DeployAccountV3.resource_bounds:type_name -> ResourceBounds
	19, // 62: Transaction.DeployAccountV3.paymaster_data:type_name -> Felt252
	25, // 63: Transaction.DeployAccountV3.nonce_data_availability_mode:type_name -> VolitionDomain
	25, // 64: Transaction.DeployAccountV3.fee_data_availability_mode:type_name -> VolitionDomain
	19, // 65: Transaction.InvokeV0.max_fee:type_name -> Felt252
	2,  // 66: Transaction.InvokeV0.signature:type_name -> AccountSignature
	23, // 67: Transaction.InvokeV0.address:type_name -> Address
	19, // 68: Transaction.InvokeV0.entry_point_selector:type_name -> Felt252
	19, // 69: Transaction.InvokeV0.calldata:type_name -> Felt252
	23, // 70: Transaction.InvokeV1.sender:type_name -> Address
	19, // 71: Transaction.InvokeV1.max_fee:type_name -> Felt252
	2,  // 72: Transaction.InvokeV1.signature:type_name -> AccountSignature
	19, // 73: Transaction.InvokeV1.calldata:type_name -> Felt252
	19, // 74: Transaction.InvokeV1.nonce:type_name -> Felt252
	23, // 75: Transaction.InvokeV3.sender:type_name -> Address
	2,  // 76: Transaction.InvokeV3.signature:type_name -> AccountSignature
	19, // 77: Transaction.InvokeV3.calldata:type_name -> Felt252
	1,  // 78: Transaction.InvokeV3.resource_bounds:type_name -> ResourceBounds
	19, // 79: Transaction.InvokeV3.paymaster_data:type_name -> Felt252
	19, // 80: Transaction.InvokeV3.account_deployment_data:type_name -> Felt252
	25, // 81: Transaction.InvokeV3.nonce_data_availability_mode:type_name -> VolitionDomain
	25, // 82: Transaction.InvokeV3.fee_data_availability_mode:type_name -> VolitionDomain
	19, // 83: Transaction.InvokeV3.nonce:type_name -> Felt252
	19, // 84: Transaction.L1HandlerV0.nonce:type_name -> Felt252
	23, // 85: Transaction.L1HandlerV0.address:type_name -> Address
	19, // 86: Transaction.L1HandlerV0.entry_point_selector:type_name -> Felt252
	19, // 87: Transaction.L1HandlerV0.calldata:type_name -> Felt252
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_p2p_proto_transaction_proto_init() }
func file_p2p_proto_transaction_proto_init() {
	if File_p2p_proto_transaction_proto != nil {
		return
	}
	file_p2p_proto_common_proto_init()
	file_p2p_proto_receipt_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_p2p_proto_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionWithReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeclareV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeclareV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeclareV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeclareV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Deploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeployAccountV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeployAccountV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_InvokeV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_InvokeV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_InvokeV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_L1HandlerV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_p2p_proto_transaction_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Transaction_DeclareV0_)(nil),
		(*Transaction_DeclareV1_)(nil),
		(*Transaction_DeclareV2_)(nil),
		(*Transaction_DeclareV3_)(nil),
		(*Transaction_Deploy_)(nil),
		(*Transaction_DeployAccountV1_)(nil),
		(*Transaction_DeployAccountV3_)(nil),
		(*Transaction_InvokeV0_)(nil),
		(*Transaction_InvokeV1_)(nil),
		(*Transaction_InvokeV3_)(nil),
		(*Transaction_L1Handler)(nil),
	}
	file_p2p_proto_transaction_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TransactionsResponse_TransactionWithReceipt)(nil),
		(*TransactionsResponse_Fin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_proto_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_transaction_proto_goTypes,
		DependencyIndexes: file_p2p_proto_transaction_proto_depIdxs,
		MessageInfos:      file_p2p_proto_transaction_proto_msgTypes,
	}.Build()
	File_p2p_proto_transaction_proto = out.File
	file_p2p_proto_transaction_proto_rawDesc = nil
	file_p2p_proto_transaction_proto_goTypes = nil
	file_p2p_proto_transaction_proto_depIdxs = nil
}

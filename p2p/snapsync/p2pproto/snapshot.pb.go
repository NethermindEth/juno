// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: proto/snapshot.proto

package p2pproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Endpoints, modeled after ethereum SNAP protocol.
// Note: Unlike ethereum, this only have range endpoints (or phase 1 as nethermind like to call it). Client is expected
// to keep track of the first and last block it requested the range from and apply state updates from the first to the
// last block as the healing phase.
type SnapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SnapRequest_GetTrieRoot
	//	*SnapRequest_GetAddressRange
	//	*SnapRequest_GetContractRange
	//	*SnapRequest_GetClassRange
	//	*SnapRequest_GetClasses
	Request isSnapRequest_Request `protobuf_oneof:"request"`
}

func (x *SnapRequest) Reset() {
	*x = SnapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapRequest) ProtoMessage() {}

func (x *SnapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapRequest.ProtoReflect.Descriptor instead.
func (*SnapRequest) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{0}
}

func (m *SnapRequest) GetRequest() isSnapRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SnapRequest) GetGetTrieRoot() *GetRootInfo {
	if x, ok := x.GetRequest().(*SnapRequest_GetTrieRoot); ok {
		return x.GetTrieRoot
	}
	return nil
}

func (x *SnapRequest) GetGetAddressRange() *GetAddressRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetAddressRange); ok {
		return x.GetAddressRange
	}
	return nil
}

func (x *SnapRequest) GetGetContractRange() *GetContractRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetContractRange); ok {
		return x.GetContractRange
	}
	return nil
}

func (x *SnapRequest) GetGetClassRange() *GetClassRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetClassRange); ok {
		return x.GetClassRange
	}
	return nil
}

func (x *SnapRequest) GetGetClasses() *GetClasses {
	if x, ok := x.GetRequest().(*SnapRequest_GetClasses); ok {
		return x.GetClasses
	}
	return nil
}

type isSnapRequest_Request interface {
	isSnapRequest_Request()
}

type SnapRequest_GetTrieRoot struct {
	// GetRootInfo is needed for starknet as it consist of two main trie, class trie and storage trie.
	GetTrieRoot *GetRootInfo `protobuf:"bytes,1,opt,name=get_trie_root,json=getTrieRoot,proto3,oneof"`
}

type SnapRequest_GetAddressRange struct {
	// Range scan for the top level storage trie
	GetAddressRange *GetAddressRange `protobuf:"bytes,3,opt,name=get_address_range,json=getAddressRange,proto3,oneof"`
}

type SnapRequest_GetContractRange struct {
	// For each contract from the top level trie, scan the storage trie also
	GetContractRange *GetContractRange `protobuf:"bytes,4,opt,name=get_contract_range,json=getContractRange,proto3,oneof"`
}

type SnapRequest_GetClassRange struct {
	// Range scan for the class trie
	GetClassRange *GetClassRange `protobuf:"bytes,2,opt,name=get_class_range,json=getClassRange,proto3,oneof"`
}

type SnapRequest_GetClasses struct {
	// And for each of the contract, you'll need to download the class also
	GetClasses *GetClasses `protobuf:"bytes,5,opt,name=get_classes,json=getClasses,proto3,oneof"`
}

func (*SnapRequest_GetTrieRoot) isSnapRequest_Request() {}

func (*SnapRequest_GetAddressRange) isSnapRequest_Request() {}

func (*SnapRequest_GetContractRange) isSnapRequest_Request() {}

func (*SnapRequest_GetClassRange) isSnapRequest_Request() {}

func (*SnapRequest_GetClasses) isSnapRequest_Request() {}

type SnapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SnapResponse_RootInfo
	//	*SnapResponse_AddressRange
	//	*SnapResponse_ContractRange
	//	*SnapResponse_ClassRange
	//	*SnapResponse_Classes
	Response isSnapResponse_Response `protobuf_oneof:"response"`
}

func (x *SnapResponse) Reset() {
	*x = SnapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapResponse) ProtoMessage() {}

func (x *SnapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapResponse.ProtoReflect.Descriptor instead.
func (*SnapResponse) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{1}
}

func (m *SnapResponse) GetResponse() isSnapResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SnapResponse) GetRootInfo() *RootInfo {
	if x, ok := x.GetResponse().(*SnapResponse_RootInfo); ok {
		return x.RootInfo
	}
	return nil
}

func (x *SnapResponse) GetAddressRange() *AddressRange {
	if x, ok := x.GetResponse().(*SnapResponse_AddressRange); ok {
		return x.AddressRange
	}
	return nil
}

func (x *SnapResponse) GetContractRange() *ContractRange {
	if x, ok := x.GetResponse().(*SnapResponse_ContractRange); ok {
		return x.ContractRange
	}
	return nil
}

func (x *SnapResponse) GetClassRange() *ClassRange {
	if x, ok := x.GetResponse().(*SnapResponse_ClassRange); ok {
		return x.ClassRange
	}
	return nil
}

func (x *SnapResponse) GetClasses() *Classes {
	if x, ok := x.GetResponse().(*SnapResponse_Classes); ok {
		return x.Classes
	}
	return nil
}

type isSnapResponse_Response interface {
	isSnapResponse_Response()
}

type SnapResponse_RootInfo struct {
	RootInfo *RootInfo `protobuf:"bytes,1,opt,name=root_info,json=rootInfo,proto3,oneof"`
}

type SnapResponse_AddressRange struct {
	AddressRange *AddressRange `protobuf:"bytes,3,opt,name=address_range,json=addressRange,proto3,oneof"`
}

type SnapResponse_ContractRange struct {
	ContractRange *ContractRange `protobuf:"bytes,4,opt,name=contract_range,json=contractRange,proto3,oneof"`
}

type SnapResponse_ClassRange struct {
	ClassRange *ClassRange `protobuf:"bytes,2,opt,name=class_range,json=classRange,proto3,oneof"`
}

type SnapResponse_Classes struct {
	Classes *Classes `protobuf:"bytes,5,opt,name=classes,proto3,oneof"`
}

func (*SnapResponse_RootInfo) isSnapResponse_Response() {}

func (*SnapResponse_AddressRange) isSnapResponse_Response() {}

func (*SnapResponse_ContractRange) isSnapResponse_Response() {}

func (*SnapResponse_ClassRange) isSnapResponse_Response() {}

func (*SnapResponse_Classes) isSnapResponse_Response() {}

type GetRootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash *FieldElement `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *GetRootInfo) Reset() {
	*x = GetRootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRootInfo) ProtoMessage() {}

func (x *GetRootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRootInfo.ProtoReflect.Descriptor instead.
func (*GetRootInfo) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *GetRootInfo) GetBlockHash() *FieldElement {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageRoot *FieldElement `protobuf:"bytes,1,opt,name=storage_root,json=storageRoot,proto3" json:"storage_root,omitempty"`
	ClassRoot   *FieldElement `protobuf:"bytes,2,opt,name=class_root,json=classRoot,proto3" json:"class_root,omitempty"`
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *RootInfo) GetStorageRoot() *FieldElement {
	if x != nil {
		return x.StorageRoot
	}
	return nil
}

func (x *RootInfo) GetClassRoot() *FieldElement {
	if x != nil {
		return x.ClassRoot
	}
	return nil
}

type GetClasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes []*FieldElement `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *GetClasses) Reset() {
	*x = GetClasses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClasses) ProtoMessage() {}

func (x *GetClasses) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClasses.ProtoReflect.Descriptor instead.
func (*GetClasses) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{4}
}

func (x *GetClasses) GetHashes() []*FieldElement {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type Classes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classes []*ContractClass `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *Classes) Reset() {
	*x = Classes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classes) ProtoMessage() {}

func (x *Classes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classes.ProtoReflect.Descriptor instead.
func (*Classes) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *Classes) GetClasses() []*ContractClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

// GetAddressRange request for the range of leaf from the storage trie. It specify the roof of the trie to select
// which block it wants the leafs from. To verify the integrity of the leafs, the server also need to send proofnodes
// of the first and the last leaf of the returned range of leaf so that the client can recalculate the root.
type GetAddressRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root is the trie root of the top level storage trie.
	Root *FieldElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Specify the starting leaf that the client wants. As the client goes through the storage trie it will incrementally
	// increase the value (usually just set this to te last path of the last request). Client can use the right proof
	// to determine if there are remaining leafs for a trie.
	StartAddr *FieldElement `protobuf:"bytes,2,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	// In some case, for example for parallelization purpose, the client may want to limit the range of leafs up to this addr.
	// For example, client may split the top level address into 8 fixed address partition which download in parallel. To prevent
	// a partition from accidentally downloading leafs from another partition, it will need to specify its limit here.
	LimitAddr *FieldElement `protobuf:"bytes,3,opt,name=limit_addr,json=limitAddr,proto3,oneof" json:"limit_addr,omitempty"`
	// Maximum number of leaf to return. Server may return less, but must return at least one leaf.
	MaxNodes uint64 `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *GetAddressRange) Reset() {
	*x = GetAddressRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRange) ProtoMessage() {}

func (x *GetAddressRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRange.ProtoReflect.Descriptor instead.
func (*GetAddressRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *GetAddressRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetAddressRange) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *GetAddressRange) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

func (x *GetAddressRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type AddressRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*FieldElement `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	// The leaves here are not the actual commitment, so the client need to recalculate the commitment from the leaf
	// value to be used to verify the trie. Even if the commitment is included, client still need to verify the leaf by
	// recalculating the commitment.
	Leaves []*AddressRangeLeaf `protobuf:"bytes,4,rep,name=leaves,proto3" json:"leaves,omitempty"`
	Proofs []*ProofNode        `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *AddressRange) Reset() {
	*x = AddressRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRange) ProtoMessage() {}

func (x *AddressRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRange.ProtoReflect.Descriptor instead.
func (*AddressRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *AddressRange) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *AddressRange) GetLeaves() []*AddressRangeLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

func (x *AddressRange) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type AddressRangeLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractStorageRoot *FieldElement `protobuf:"bytes,1,opt,name=contract_storage_root,json=contractStorageRoot,proto3" json:"contract_storage_root,omitempty"`
	ClassHash           *FieldElement `protobuf:"bytes,2,opt,name=class_hash,json=classHash,proto3" json:"class_hash,omitempty"`
	Nonce               *FieldElement `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AddressRangeLeaf) Reset() {
	*x = AddressRangeLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressRangeLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRangeLeaf) ProtoMessage() {}

func (x *AddressRangeLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRangeLeaf.ProtoReflect.Descriptor instead.
func (*AddressRangeLeaf) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *AddressRangeLeaf) GetContractStorageRoot() *FieldElement {
	if x != nil {
		return x.ContractStorageRoot
	}
	return nil
}

func (x *AddressRangeLeaf) GetClassHash() *FieldElement {
	if x != nil {
		return x.ClassHash
	}
	return nil
}

func (x *AddressRangeLeaf) GetNonce() *FieldElement {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// GetContractRange is a batched request of multiple storage of the leafs. Used to download multiple storage tries of address
// Think of it as multiple `GetAddressRange` where the root is the storage root of the contract.
// In practice, this endpoint is also used to detect and download large contract in parallel. For example,
// first as usual, download multiple contract as `AddressRange` found. If Any of the response is incomplete (it has
// proof nodes), then download those specific contract in another thread with this same endpoint just with only
// one `requests`, while continuing the remaining storage that `AddressRange` found.
//
// I guess you can combine this with GetAddressRange with different tradeoff.
type GetContractRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The top level storage trie root, Not the contract storage root, that one is in the `requests`.
	Root *FieldElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Basically like `GetAddressRange` but per contract.
	Requests []*ContractRangeRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// Total maximum number of leafs to return across all contract. Server may return less contract than requested.
	// NOTE: In ethereum, the limit is in bytes not number of nodes. The nodes in starknet have fixed size, so this
	// is simpler.
	MaxNodes uint64 `protobuf:"varint,3,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// Maximum number of leafs to return per contract. This is used for optimization purposes. 99.9% of contract
	// have less than 20 leaf. Without this limit, the remaining `max_nodes` budget will be allocated to the last contract,
	// making for slower large contract discovery.
	// NOTE: Not in ethereum.
	MaxNodesPerContract uint64 `protobuf:"varint,4,opt,name=max_nodes_per_contract,json=maxNodesPerContract,proto3" json:"max_nodes_per_contract,omitempty"`
}

func (x *GetContractRange) Reset() {
	*x = GetContractRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRange) ProtoMessage() {}

func (x *GetContractRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRange.ProtoReflect.Descriptor instead.
func (*GetContractRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *GetContractRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetContractRange) GetRequests() []*ContractRangeRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetContractRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *GetContractRange) GetMaxNodesPerContract() uint64 {
	if x != nil {
		return x.MaxNodesPerContract
	}
	return 0
}

type ContractRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *FieldElement `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The storage root (not the leaf commitment).
	// Its possible that the client may have to update the `root` in `GetContractRange` to a newer block as it is too old
	// (snap take some time to complete), so client may not know if the contract was modified making this `hash` incorrect.
	// In such case just set the old storage root, and the server should set `updated_contract` in `ContractRangeResponse`.
	Hash *FieldElement `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// These two probably only going to be used for large contract. Large contract tend to be very large, so client
	// need to download them in multiple requests with increasing `start_addr`.
	StartAddr *FieldElement `protobuf:"bytes,3,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	LimitAddr *FieldElement `protobuf:"bytes,4,opt,name=limit_addr,json=limitAddr,proto3,oneof" json:"limit_addr,omitempty"`
}

func (x *ContractRangeRequest) Reset() {
	*x = ContractRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRangeRequest) ProtoMessage() {}

func (x *ContractRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRangeRequest.ProtoReflect.Descriptor instead.
func (*ContractRangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{10}
}

func (x *ContractRangeRequest) GetPath() *FieldElement {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ContractRangeRequest) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ContractRangeRequest) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *ContractRangeRequest) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

type ContractRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: Server may return less `responses` then `requests`.
	Responses []*ContractRangeResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ContractRange) Reset() {
	*x = ContractRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRange) ProtoMessage() {}

func (x *ContractRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRange.ProtoReflect.Descriptor instead.
func (*ContractRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{11}
}

func (x *ContractRange) GetResponses() []*ContractRangeResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ContractRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths  []*FieldElement `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Values []*FieldElement `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// In most cases, the whole storage trie is returned in one request. In such case, the server should detect this
	// condition and skip proof generation as it is unnecessary to recalculate the storage root.
	Proofs []*ProofNode `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	// So when the storage root is obsolete, but the root is not, and the server detect it, the server must populate
	// this field and the proof. This is different from ethereum, where the client is expected to detect this condition
	// and re-fetch the contract leaf to get the updated hash. I guess you can make it the same also. This seems to happen
	// about 200 times per hour
	// Now, in theory you can always set `ContractRangeRequest.hash` to some wrong value and always rely on this mechanism
	// to verify the leaf, but then the client and the server would waste CPU cycle calculating and verifying proof.
	UpdatedContract *AddressRangeLeaf `protobuf:"bytes,4,opt,name=updated_contract,json=updatedContract,proto3,oneof" json:"updated_contract,omitempty"`
	// The client is expected to recalculate the leaf committment, and with this proof, verify that the storage was
	// updated. This is the proof of the top level leaf committment in the top level storage trie.
	UpdatedContractProof []*ProofNode `protobuf:"bytes,6,rep,name=updated_contract_proof,json=updatedContractProof,proto3" json:"updated_contract_proof,omitempty"`
}

func (x *ContractRangeResponse) Reset() {
	*x = ContractRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRangeResponse) ProtoMessage() {}

func (x *ContractRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRangeResponse.ProtoReflect.Descriptor instead.
func (*ContractRangeResponse) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{12}
}

func (x *ContractRangeResponse) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ContractRangeResponse) GetValues() []*FieldElement {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ContractRangeResponse) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *ContractRangeResponse) GetUpdatedContract() *AddressRangeLeaf {
	if x != nil {
		return x.UpdatedContract
	}
	return nil
}

func (x *ContractRangeResponse) GetUpdatedContractProof() []*ProofNode {
	if x != nil {
		return x.UpdatedContractProof
	}
	return nil
}

// Basically same as GetAddressRange
type GetClassRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root is the trie root of the class trie.
	Root      *FieldElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	StartAddr *FieldElement `protobuf:"bytes,2,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	LimitAddr *FieldElement `protobuf:"bytes,3,opt,name=limit_addr,json=limitAddr,proto3,oneof" json:"limit_addr,omitempty"`
	MaxNodes  uint64        `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *GetClassRange) Reset() {
	*x = GetClassRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassRange) ProtoMessage() {}

func (x *GetClassRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassRange.ProtoReflect.Descriptor instead.
func (*GetClassRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{13}
}

func (x *GetClassRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetClassRange) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *GetClassRange) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

func (x *GetClassRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type ClassRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths            []*FieldElement `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	ClassCommitments []*FieldElement `protobuf:"bytes,2,rep,name=class_commitments,json=classCommitments,proto3" json:"class_commitments,omitempty"` // Do we need this actually? Can't we infer them from the V1 classes within the address range?
	Proofs           []*ProofNode    `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *ClassRange) Reset() {
	*x = ClassRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassRange) ProtoMessage() {}

func (x *ClassRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassRange.ProtoReflect.Descriptor instead.
func (*ClassRange) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{14}
}

func (x *ClassRange) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ClassRange) GetClassCommitments() []*FieldElement {
	if x != nil {
		return x.ClassCommitments
	}
	return nil
}

func (x *ClassRange) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

// Its a `Key` in juno.
type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// Note: although its big endian, juno seems to right align it instead of left align it. I gave up and just serialize
	// the whole thing here.
	Element []byte `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{15}
}

func (x *Path) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Path) GetElement() []byte {
	if x != nil {
		return x.Element
	}
	return nil
}

// StarkNet uses a binary tree, so for each intermediate node, only one child is needed as proof. So might as well
// address the child directly and save bandwidth. Make implementation easier too.
type ProofNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *Path         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Hash *FieldElement `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ProofNode) Reset() {
	*x = ProofNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofNode) ProtoMessage() {}

func (x *ProofNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofNode.ProtoReflect.Descriptor instead.
func (*ProofNode) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{16}
}

func (x *ProofNode) GetKey() *Path {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProofNode) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

type FieldElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []byte `protobuf:"bytes,1,opt,name=elements,proto3" json:"elements,omitempty"`
}

func (x *FieldElement) Reset() {
	*x = FieldElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldElement) ProtoMessage() {}

func (x *FieldElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldElement.ProtoReflect.Descriptor instead.
func (*FieldElement) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{17}
}

func (x *FieldElement) GetElements() []byte {
	if x != nil {
		return x.Elements
	}
	return nil
}

type ContractClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Class:
	//
	//	*ContractClass_Cairo0
	//	*ContractClass_Cairo1
	Class isContractClass_Class `protobuf_oneof:"class"`
}

func (x *ContractClass) Reset() {
	*x = ContractClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractClass) ProtoMessage() {}

func (x *ContractClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractClass.ProtoReflect.Descriptor instead.
func (*ContractClass) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{18}
}

func (m *ContractClass) GetClass() isContractClass_Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (x *ContractClass) GetCairo0() *Cairo0Class {
	if x, ok := x.GetClass().(*ContractClass_Cairo0); ok {
		return x.Cairo0
	}
	return nil
}

func (x *ContractClass) GetCairo1() *Cairo1Class {
	if x, ok := x.GetClass().(*ContractClass_Cairo1); ok {
		return x.Cairo1
	}
	return nil
}

type isContractClass_Class interface {
	isContractClass_Class()
}

type ContractClass_Cairo0 struct {
	Cairo0 *Cairo0Class `protobuf:"bytes,1,opt,name=cairo0,proto3,oneof"`
}

type ContractClass_Cairo1 struct {
	Cairo1 *Cairo1Class `protobuf:"bytes,2,opt,name=cairo1,proto3,oneof"`
}

func (*ContractClass_Cairo0) isContractClass_Class() {}

func (*ContractClass_Cairo1) isContractClass_Class() {}

type Cairo0Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructorEntryPoints []*Cairo0Class_EntryPoint `protobuf:"bytes,1,rep,name=constructor_entry_points,json=constructorEntryPoints,proto3" json:"constructor_entry_points,omitempty"`
	ExternalEntryPoints    []*Cairo0Class_EntryPoint `protobuf:"bytes,2,rep,name=external_entry_points,json=externalEntryPoints,proto3" json:"external_entry_points,omitempty"`
	L1HandlerEntryPoints   []*Cairo0Class_EntryPoint `protobuf:"bytes,3,rep,name=l1_handler_entry_points,json=l1HandlerEntryPoints,proto3" json:"l1_handler_entry_points,omitempty"`
	Program                string                    `protobuf:"bytes,4,opt,name=program,proto3" json:"program,omitempty"`
	Abi                    string                    `protobuf:"bytes,5,opt,name=abi,proto3" json:"abi,omitempty"`
	Hash                   *FieldElement             `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"` // Ahh... great.
}

func (x *Cairo0Class) Reset() {
	*x = Cairo0Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cairo0Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cairo0Class) ProtoMessage() {}

func (x *Cairo0Class) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cairo0Class.ProtoReflect.Descriptor instead.
func (*Cairo0Class) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{19}
}

func (x *Cairo0Class) GetConstructorEntryPoints() []*Cairo0Class_EntryPoint {
	if x != nil {
		return x.ConstructorEntryPoints
	}
	return nil
}

func (x *Cairo0Class) GetExternalEntryPoints() []*Cairo0Class_EntryPoint {
	if x != nil {
		return x.ExternalEntryPoints
	}
	return nil
}

func (x *Cairo0Class) GetL1HandlerEntryPoints() []*Cairo0Class_EntryPoint {
	if x != nil {
		return x.L1HandlerEntryPoints
	}
	return nil
}

func (x *Cairo0Class) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *Cairo0Class) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *Cairo0Class) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Cairo1Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructorEntryPoints []*Cairo1Class_EntryPoint `protobuf:"bytes,1,rep,name=constructor_entry_points,json=constructorEntryPoints,proto3" json:"constructor_entry_points,omitempty"`
	ExternalEntryPoints    []*Cairo1Class_EntryPoint `protobuf:"bytes,2,rep,name=external_entry_points,json=externalEntryPoints,proto3" json:"external_entry_points,omitempty"`
	L1HandlerEntryPoints   []*Cairo1Class_EntryPoint `protobuf:"bytes,3,rep,name=l1_handler_entry_points,json=l1HandlerEntryPoints,proto3" json:"l1_handler_entry_points,omitempty"`
	Program                []*FieldElement           `protobuf:"bytes,4,rep,name=program,proto3" json:"program,omitempty"`
	ProgramHash            *FieldElement             `protobuf:"bytes,5,opt,name=program_hash,json=programHash,proto3" json:"program_hash,omitempty"`
	Abi                    string                    `protobuf:"bytes,6,opt,name=abi,proto3" json:"abi,omitempty"`
	SemanticVersioning     string                    `protobuf:"bytes,7,opt,name=semantic_versioning,json=semanticVersioning,proto3" json:"semantic_versioning,omitempty"`
	Hash                   *FieldElement             `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Cairo1Class) Reset() {
	*x = Cairo1Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cairo1Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cairo1Class) ProtoMessage() {}

func (x *Cairo1Class) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cairo1Class.ProtoReflect.Descriptor instead.
func (*Cairo1Class) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{20}
}

func (x *Cairo1Class) GetConstructorEntryPoints() []*Cairo1Class_EntryPoint {
	if x != nil {
		return x.ConstructorEntryPoints
	}
	return nil
}

func (x *Cairo1Class) GetExternalEntryPoints() []*Cairo1Class_EntryPoint {
	if x != nil {
		return x.ExternalEntryPoints
	}
	return nil
}

func (x *Cairo1Class) GetL1HandlerEntryPoints() []*Cairo1Class_EntryPoint {
	if x != nil {
		return x.L1HandlerEntryPoints
	}
	return nil
}

func (x *Cairo1Class) GetProgram() []*FieldElement {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *Cairo1Class) GetProgramHash() *FieldElement {
	if x != nil {
		return x.ProgramHash
	}
	return nil
}

func (x *Cairo1Class) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *Cairo1Class) GetSemanticVersioning() string {
	if x != nil {
		return x.SemanticVersioning
	}
	return ""
}

func (x *Cairo1Class) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Cairo0Class_EntryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *FieldElement `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Offset   *FieldElement `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Cairo0Class_EntryPoint) Reset() {
	*x = Cairo0Class_EntryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cairo0Class_EntryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cairo0Class_EntryPoint) ProtoMessage() {}

func (x *Cairo0Class_EntryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cairo0Class_EntryPoint.ProtoReflect.Descriptor instead.
func (*Cairo0Class_EntryPoint) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Cairo0Class_EntryPoint) GetSelector() *FieldElement {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Cairo0Class_EntryPoint) GetOffset() *FieldElement {
	if x != nil {
		return x.Offset
	}
	return nil
}

type Cairo1Class_EntryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *FieldElement `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Index    uint64        `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Cairo1Class_EntryPoint) Reset() {
	*x = Cairo1Class_EntryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snapshot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cairo1Class_EntryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cairo1Class_EntryPoint) ProtoMessage() {}

func (x *Cairo1Class_EntryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snapshot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cairo1Class_EntryPoint.ProtoReflect.Descriptor instead.
func (*Cairo1Class_EntryPoint) Descriptor() ([]byte, []int) {
	return file_proto_snapshot_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Cairo1Class_EntryPoint) GetSelector() *FieldElement {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Cairo1Class_EntryPoint) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_proto_snapshot_proto protoreflect.FileDescriptor

var file_proto_snapshot_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x22, 0xff, 0x02, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x41, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x41, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73,
	0x22, 0xd2, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x84,
	0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x4f,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x38,
	0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x2a, 0x0a,
	0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x63,
	0x61, 0x69, 0x72, 0x6f, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x69, 0x72,
	0x6f, 0x30, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x69, 0x72, 0x6f,
	0x30, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0x80, 0x04, 0x0a, 0x0b, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x30, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x30, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x30, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x17,
	0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x61,
	0x69, 0x72, 0x6f, 0x30, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x6c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x7a, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xef, 0x04, 0x0a, 0x0b, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x5c, 0x0a, 0x17, 0x6c, 0x31, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x43, 0x61, 0x69, 0x72, 0x6f, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x6c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x5b, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x70, 0x32, 0x70, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_snapshot_proto_rawDescOnce sync.Once
	file_proto_snapshot_proto_rawDescData = file_proto_snapshot_proto_rawDesc
)

func file_proto_snapshot_proto_rawDescGZIP() []byte {
	file_proto_snapshot_proto_rawDescOnce.Do(func() {
		file_proto_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_snapshot_proto_rawDescData)
	})
	return file_proto_snapshot_proto_rawDescData
}

var file_proto_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_snapshot_proto_goTypes = []interface{}{
	(*SnapRequest)(nil),            // 0: starknet.snap.SnapRequest
	(*SnapResponse)(nil),           // 1: starknet.snap.SnapResponse
	(*GetRootInfo)(nil),            // 2: starknet.snap.GetRootInfo
	(*RootInfo)(nil),               // 3: starknet.snap.RootInfo
	(*GetClasses)(nil),             // 4: starknet.snap.GetClasses
	(*Classes)(nil),                // 5: starknet.snap.Classes
	(*GetAddressRange)(nil),        // 6: starknet.snap.GetAddressRange
	(*AddressRange)(nil),           // 7: starknet.snap.AddressRange
	(*AddressRangeLeaf)(nil),       // 8: starknet.snap.AddressRangeLeaf
	(*GetContractRange)(nil),       // 9: starknet.snap.GetContractRange
	(*ContractRangeRequest)(nil),   // 10: starknet.snap.ContractRangeRequest
	(*ContractRange)(nil),          // 11: starknet.snap.ContractRange
	(*ContractRangeResponse)(nil),  // 12: starknet.snap.ContractRangeResponse
	(*GetClassRange)(nil),          // 13: starknet.snap.GetClassRange
	(*ClassRange)(nil),             // 14: starknet.snap.ClassRange
	(*Path)(nil),                   // 15: starknet.snap.Path
	(*ProofNode)(nil),              // 16: starknet.snap.ProofNode
	(*FieldElement)(nil),           // 17: starknet.snap.FieldElement
	(*ContractClass)(nil),          // 18: starknet.snap.ContractClass
	(*Cairo0Class)(nil),            // 19: starknet.snap.Cairo0Class
	(*Cairo1Class)(nil),            // 20: starknet.snap.Cairo1Class
	(*Cairo0Class_EntryPoint)(nil), // 21: starknet.snap.Cairo0Class.EntryPoint
	(*Cairo1Class_EntryPoint)(nil), // 22: starknet.snap.Cairo1Class.EntryPoint
}
var file_proto_snapshot_proto_depIdxs = []int32{
	2,  // 0: starknet.snap.SnapRequest.get_trie_root:type_name -> starknet.snap.GetRootInfo
	6,  // 1: starknet.snap.SnapRequest.get_address_range:type_name -> starknet.snap.GetAddressRange
	9,  // 2: starknet.snap.SnapRequest.get_contract_range:type_name -> starknet.snap.GetContractRange
	13, // 3: starknet.snap.SnapRequest.get_class_range:type_name -> starknet.snap.GetClassRange
	4,  // 4: starknet.snap.SnapRequest.get_classes:type_name -> starknet.snap.GetClasses
	3,  // 5: starknet.snap.SnapResponse.root_info:type_name -> starknet.snap.RootInfo
	7,  // 6: starknet.snap.SnapResponse.address_range:type_name -> starknet.snap.AddressRange
	11, // 7: starknet.snap.SnapResponse.contract_range:type_name -> starknet.snap.ContractRange
	14, // 8: starknet.snap.SnapResponse.class_range:type_name -> starknet.snap.ClassRange
	5,  // 9: starknet.snap.SnapResponse.classes:type_name -> starknet.snap.Classes
	17, // 10: starknet.snap.GetRootInfo.block_hash:type_name -> starknet.snap.FieldElement
	17, // 11: starknet.snap.RootInfo.storage_root:type_name -> starknet.snap.FieldElement
	17, // 12: starknet.snap.RootInfo.class_root:type_name -> starknet.snap.FieldElement
	17, // 13: starknet.snap.GetClasses.hashes:type_name -> starknet.snap.FieldElement
	18, // 14: starknet.snap.Classes.classes:type_name -> starknet.snap.ContractClass
	17, // 15: starknet.snap.GetAddressRange.root:type_name -> starknet.snap.FieldElement
	17, // 16: starknet.snap.GetAddressRange.start_addr:type_name -> starknet.snap.FieldElement
	17, // 17: starknet.snap.GetAddressRange.limit_addr:type_name -> starknet.snap.FieldElement
	17, // 18: starknet.snap.AddressRange.paths:type_name -> starknet.snap.FieldElement
	8,  // 19: starknet.snap.AddressRange.leaves:type_name -> starknet.snap.AddressRangeLeaf
	16, // 20: starknet.snap.AddressRange.proofs:type_name -> starknet.snap.ProofNode
	17, // 21: starknet.snap.AddressRangeLeaf.contract_storage_root:type_name -> starknet.snap.FieldElement
	17, // 22: starknet.snap.AddressRangeLeaf.class_hash:type_name -> starknet.snap.FieldElement
	17, // 23: starknet.snap.AddressRangeLeaf.nonce:type_name -> starknet.snap.FieldElement
	17, // 24: starknet.snap.GetContractRange.root:type_name -> starknet.snap.FieldElement
	10, // 25: starknet.snap.GetContractRange.requests:type_name -> starknet.snap.ContractRangeRequest
	17, // 26: starknet.snap.ContractRangeRequest.path:type_name -> starknet.snap.FieldElement
	17, // 27: starknet.snap.ContractRangeRequest.hash:type_name -> starknet.snap.FieldElement
	17, // 28: starknet.snap.ContractRangeRequest.start_addr:type_name -> starknet.snap.FieldElement
	17, // 29: starknet.snap.ContractRangeRequest.limit_addr:type_name -> starknet.snap.FieldElement
	12, // 30: starknet.snap.ContractRange.responses:type_name -> starknet.snap.ContractRangeResponse
	17, // 31: starknet.snap.ContractRangeResponse.paths:type_name -> starknet.snap.FieldElement
	17, // 32: starknet.snap.ContractRangeResponse.values:type_name -> starknet.snap.FieldElement
	16, // 33: starknet.snap.ContractRangeResponse.proofs:type_name -> starknet.snap.ProofNode
	8,  // 34: starknet.snap.ContractRangeResponse.updated_contract:type_name -> starknet.snap.AddressRangeLeaf
	16, // 35: starknet.snap.ContractRangeResponse.updated_contract_proof:type_name -> starknet.snap.ProofNode
	17, // 36: starknet.snap.GetClassRange.root:type_name -> starknet.snap.FieldElement
	17, // 37: starknet.snap.GetClassRange.start_addr:type_name -> starknet.snap.FieldElement
	17, // 38: starknet.snap.GetClassRange.limit_addr:type_name -> starknet.snap.FieldElement
	17, // 39: starknet.snap.ClassRange.paths:type_name -> starknet.snap.FieldElement
	17, // 40: starknet.snap.ClassRange.class_commitments:type_name -> starknet.snap.FieldElement
	16, // 41: starknet.snap.ClassRange.proofs:type_name -> starknet.snap.ProofNode
	15, // 42: starknet.snap.ProofNode.key:type_name -> starknet.snap.Path
	17, // 43: starknet.snap.ProofNode.hash:type_name -> starknet.snap.FieldElement
	19, // 44: starknet.snap.ContractClass.cairo0:type_name -> starknet.snap.Cairo0Class
	20, // 45: starknet.snap.ContractClass.cairo1:type_name -> starknet.snap.Cairo1Class
	21, // 46: starknet.snap.Cairo0Class.constructor_entry_points:type_name -> starknet.snap.Cairo0Class.EntryPoint
	21, // 47: starknet.snap.Cairo0Class.external_entry_points:type_name -> starknet.snap.Cairo0Class.EntryPoint
	21, // 48: starknet.snap.Cairo0Class.l1_handler_entry_points:type_name -> starknet.snap.Cairo0Class.EntryPoint
	17, // 49: starknet.snap.Cairo0Class.hash:type_name -> starknet.snap.FieldElement
	22, // 50: starknet.snap.Cairo1Class.constructor_entry_points:type_name -> starknet.snap.Cairo1Class.EntryPoint
	22, // 51: starknet.snap.Cairo1Class.external_entry_points:type_name -> starknet.snap.Cairo1Class.EntryPoint
	22, // 52: starknet.snap.Cairo1Class.l1_handler_entry_points:type_name -> starknet.snap.Cairo1Class.EntryPoint
	17, // 53: starknet.snap.Cairo1Class.program:type_name -> starknet.snap.FieldElement
	17, // 54: starknet.snap.Cairo1Class.program_hash:type_name -> starknet.snap.FieldElement
	17, // 55: starknet.snap.Cairo1Class.hash:type_name -> starknet.snap.FieldElement
	17, // 56: starknet.snap.Cairo0Class.EntryPoint.selector:type_name -> starknet.snap.FieldElement
	17, // 57: starknet.snap.Cairo0Class.EntryPoint.offset:type_name -> starknet.snap.FieldElement
	17, // 58: starknet.snap.Cairo1Class.EntryPoint.selector:type_name -> starknet.snap.FieldElement
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_proto_snapshot_proto_init() }
func file_proto_snapshot_proto_init() {
	if File_proto_snapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClasses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressRangeLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cairo0Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cairo1Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cairo0Class_EntryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snapshot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cairo1Class_EntryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_snapshot_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SnapRequest_GetTrieRoot)(nil),
		(*SnapRequest_GetAddressRange)(nil),
		(*SnapRequest_GetContractRange)(nil),
		(*SnapRequest_GetClassRange)(nil),
		(*SnapRequest_GetClasses)(nil),
	}
	file_proto_snapshot_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SnapResponse_RootInfo)(nil),
		(*SnapResponse_AddressRange)(nil),
		(*SnapResponse_ContractRange)(nil),
		(*SnapResponse_ClassRange)(nil),
		(*SnapResponse_Classes)(nil),
	}
	file_proto_snapshot_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_snapshot_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_snapshot_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_snapshot_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_snapshot_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ContractClass_Cairo0)(nil),
		(*ContractClass_Cairo1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_snapshot_proto_goTypes,
		DependencyIndexes: file_proto_snapshot_proto_depIdxs,
		MessageInfos:      file_proto_snapshot_proto_msgTypes,
	}.Build()
	File_proto_snapshot_proto = out.File
	file_proto_snapshot_proto_rawDesc = nil
	file_proto_snapshot_proto_goTypes = nil
	file_proto_snapshot_proto_depIdxs = nil
}

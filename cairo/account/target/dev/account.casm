[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 509;
jmp rel 81 if [ap + -3] != 0;
[ap + 0] = 29856869448526851354677579421814598404948672607251612773571742675033995705, ap++;
[ap + 0] = 3209859221869139765176135677240653758719660219476686940288388044331456626, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [[ap + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -6] = [[ap + -20] + 1];
[ap + -5] = [[ap + -20] + 2];
[ap + -7] = [[ap + -20] + 3];
[ap + -4] = [[ap + -20] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -25] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -21] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -27] + 7], ap++;
[ap + 0] = [[ap + -28] + 8], ap++;
ret;
ap += 12;
call rel 784;
[ap + 0] = [ap + -1] + 783, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12290, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25] + [ap + -2], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
ret;
%{ memory[ap + 0] = 2370 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209086, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 204;
[fp + -6] = [ap + 0] + 2370, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 177;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -7] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 722;
[ap + 0] = [ap + -1] + 721, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 52720, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 116;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 335;
jmp rel 81 if [ap + -3] != 0;
[ap + 0] = 29856869448526851354677579421814598404948672607251612773571742675033995705, ap++;
[ap + 0] = 3209859221869139765176135677240653758719660219476686940288388044331456626, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [[ap + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -6] = [[ap + -20] + 1];
[ap + -5] = [[ap + -20] + 2];
[ap + -7] = [[ap + -20] + 3];
[ap + -4] = [[ap + -20] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [ap + -26] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[ap + -21] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 16;
call rel 612;
[ap + 0] = [ap + -1] + 611, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12610, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 17;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 459;
[ap + 0] = [ap + -1] + 458, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 48500 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 48500, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 48500, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
call rel 209;
[ap + 0] = [ap + -71] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = 29856869448526851354677579421814598404948672607251612773571742675033995705, ap++;
[ap + 0] = 1270010605630597976495846281167968799381097569185364931397797212080166453709, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -5] = [[fp + -4] + 2];
[ap + -6] = [[fp + -4] + 3];
[ap + -4] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550557492744938365112574611882025123252567779123164597803728068558738016655, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[fp + -3] = [[fp + -4] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 13], ap++;
jmp rel 35 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 199;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[fp + -4] + 12], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13360, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [fp + -4] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [[fp + -4] + 15], ap++;
ret;
ap += 30;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 24500, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 126 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -7] = [[fp + -4] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 8], ap++;
jmp rel 100 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + -1] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -4] + 10, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 76 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 17 if [fp + -3] != 0;
ap += 26;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 423223302514606273361610285513559705916828015570713607238255, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -29] + 23840, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 51;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 25500403217443378527601783667, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -2] = [[ap + -5] + 1];
[fp + -3] = [[ap + -5] + 2];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -5]) %}
[ap + 0] = [[ap + -5] + 4], ap++;
jmp rel 33 if [ap + -1] != 0;
[ap + 0] = [[ap + -6] + 3], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -8] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 80;
jmp rel 14 if [ap + -3] != 0;
ap += 4;
[ap + 0] = [ap + -9] + 360, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[ap + -30] + 3], ap++;
[ap + 0] = [ap + -1] + 13460, ap++;
[ap + 0] = [ap + -32] + 7, ap++;
[ap + 0] = [[ap + -33] + 5], ap++;
[ap + 0] = [[ap + -34] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 27;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 95565013996018498247890117593540195050286445389156, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -30] + 24030, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 22;
ap += 34;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -1] + 24860, ap++;
[ap + 0] = [fp + -4] + 11, ap++;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 11;
ap += 44;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [ap + -1] + 36160, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel [fp + -5];
jmp rel 33;
jmp rel 31;
jmp rel 29;
[ap + 0] = [fp + -7], ap++;
jmp rel 14 if [fp + -4] != 0;
[ap + 0] = 1610331728778078893946407512609881658931720321973668761376942902098853979009, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 27;
[ap + 0] = 22344655548567333405387866802074085172395779041116519548464544628677498541, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 15;
[ap + 0] = [fp + -7] + 100, ap++;
[ap + 0] = 1291924484015741933195105472014600539495279993452337828418116470835452386035, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -6] = [[fp + -6] + 1];
[ap + -5] = [[fp + -6] + 2];
[ap + -4] = [[fp + -6] + 3];
[ap + -3] = [[fp + -6] + 4];
[ap + -2] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;

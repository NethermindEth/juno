ret;
%{ memory[ap + 0] = 10930 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200526, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 278;
[fp + -6] = [ap + 0] + 10930, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 231 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 210;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 178;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 152;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 203;
jmp rel 119 if [ap + -6] != 0;
[ap + 0] = [ap + -39], ap++;
jmp rel 100 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 676;
[ap + 0] = [ap + -1] + 675, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 45370, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 43;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + -7] = [ap + 0] + [ap + -58], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
call rel 326;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8] + 200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -41] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7] + 7820, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6] + 8420, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8420, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9730, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 152 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 120 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -2] + [ap + -5], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 2];
jmp rel 81;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + -11] = [ap + 0] + [ap + -12], ap++;
[ap + 0] = [ap + -13] + [ap + -6], ap++;
[ap + 0] = [ap + -14] + [ap + -5], ap++;
[ap + -3] = [ap + 1] + [ap + -11], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 3];
jmp rel 47;
[ap + -1] = [[fp + -5] + 3];
[ap + -16] = [ap + 0] + [ap + -17], ap++;
[ap + 0] = [ap + -14] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 4];
jmp rel 17;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 4];
ap += 3;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26] + [ap + -22], ap++;
[ap + 0] = [ap + -27] + [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 9;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
ap += 12;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 20;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 3;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 3], ap++;
jmp rel 182 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -8] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
jmp rel 46 if [fp + -5] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
[ap + 0] = [ap + -2] + [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + -3] = [[fp + -9] + 0];
[ap + -2] = [[fp + -9] + 1];
[ap + -1] = [[fp + -9] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
jmp rel 13 if [ap + -6] != 0;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -3] = [[ap + -5] + 1];
[ap + -2] = [[ap + -5] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 6, ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
jmp rel 12;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [[ap + -5] + 0];
[ap + -1] = [[ap + -5] + 1];
[ap + -2] = [[ap + -5] + 2];
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6] + 6, ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
jmp rel 17;
ap += 5;
call rel 254;
[ap + 0] = [ap + -1] + 253, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 1250, ap++;
[ap + 0] = [ap + -14] + [ap + -1], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[fp + 2] = [ap + -2];
[ap + 0] = 75202468540281, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[fp + -7] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -4] = [[ap + -19] + 4];
[fp + -3] = [[ap + -19] + 5];
[fp + -5] = [[ap + -19] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 8], ap++;
jmp rel 90 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 7], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 1] = [[ap + -23] + 9];
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1093830577610461490539113735431936179703456330374563419579920790156759053133, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -23], ap++;
[fp + 0] = [ap + -46] + 12;
call rel 86;
jmp rel 35 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -2] = [[fp + 0] + 1];
[ap + -6] = [[fp + 0] + 2];
[ap + -5] = [[fp + 0] + 3];
[ap + -4] = [[fp + 0] + 4];
[ap + -3] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 500, ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
ret;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
jmp rel 9;
ap += 4;
[ap + 0] = [ap + -10] + 11060, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[ap + -20] + 7], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2] + 18850, ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -24] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 9], ap++;
[ap + 0] = [[ap + -27] + 10], ap++;
ret;
[ap + 0] = [[fp + -8] + 2], ap++;
call rel 127;
[ap + 0] = [ap + -1] + 126, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 32240, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 5], ap++;
ret;
[fp + -13] = [[fp + -3] + 0];
[fp + -12] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 7 if [fp + -11] != 0;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -14] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -10] = [[ap + -3] + 1];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [[ap + -4] + 2];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3, ap++;
call rel 27;
jmp rel 13 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 34;
[fp + -7] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -28;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1670, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;

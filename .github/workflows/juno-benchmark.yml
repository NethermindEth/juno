name: Juno Benchmarking

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Juno version to benchmark'
        required: true
        default: 'latest'
      snapshot_url:
        description: 'Custom snapshot URL (optional)'
        required: false
  release:
    types: [prereleased]

jobs:
  juno-benchmark:
    name: EC2 Snapshot Download and Juno Launch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies and prepare environment on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            pkill -x juno || true
            rm -rf ~/juno-benchmark
            mkdir -p ~/juno-benchmark/scripts
            mkdir -p ~/juno-benchmark/db
            
            sudo apt-get update -qq
            
            sudo apt-get install -y -qq unzip curl wget build-essential pkg-config
            
            ldconfig -p | grep -q libjemalloc || sudo apt-get install -y -qq libjemalloc-dev
            
            if ! command -v rustc &> /dev/null; then
              echo "Installing Rust..."
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source $HOME/.cargo/env
            else
              echo "Rust is already installed"
              rustc --version
            fi
            
            if ! command -v go &> /dev/null || [ "$(go version | awk '{print $3}' | cut -d. -f2)" -lt 23 ]; then
              echo "Installing Go 1.23+"
              cd /tmp
              wget -q https://go.dev/dl/go1.23.1.linux-amd64.tar.gz
              sudo rm -rf /usr/local/go
              sudo tar -C /usr/local -xzf go1.23.1.linux-amd64.tar.gz
              export PATH=$PATH:/usr/local/go/bin
              echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
              rm go1.23.1.linux-amd64.tar.gz
            else
              echo "Go is already installed"
              go version
            fi
            
            if ! command -v gcc &> /dev/null && ! command -v clang &> /dev/null; then
              echo "Installing GCC..."
              sudo apt-get install -y -qq gcc
            else
              echo "C compiler is already installed"
              gcc --version || clang --version
            fi
            
            total_mem=$(free -m | awk '/^Mem:/{print $2}')
            if [ $total_mem -lt 8192 ] && [ ! -f /swapfile ]; then
              echo "Setting up 8GB swap file to prevent OOM issues..."
              sudo fallocate -l 8G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              echo "Swap created and enabled"
              free -h
            fi
            
            echo "Dependency versions:"
            go version
            rustc --version
            gcc --version || clang --version
            ldconfig -p | grep jemalloc

      - name: Copy benchmark script to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: scripts/juno-setup.sh,scripts/juno-sync-monitor.sh
          target: ~/juno-benchmark/scripts/
          strip_components: 1

      - name: Execute remote benchmark script via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: JUNO_VERSION,SNAPSHOT_URL
          command_timeout: 180m
          script: |
            export JUNO_VERSION=${{ github.event.inputs.version || github.event.release.tag_name }}
            export SNAPSHOT_URL=${{ github.event.inputs.snapshot_url || 'https://juno-snapshots.nethermind.io/files/sepolia/latest' }}
            chmod +x ~/juno-benchmark/scripts/juno-setup.sh
            bash ~/juno-benchmark/scripts/juno-setup.sh "$JUNO_VERSION"

      - name: Verify Juno is running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sleep 5
            ps aux | grep juno | grep -v grep
            echo "Latest Juno log entries:"
            tail -n 15 ~/juno-benchmark/juno.log

      - name: Run sync monitoring
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          command_timeout: 120m
          script: |
            export BLOCK_TARGET=${{ github.event.inputs.block_target || '10000' }}
            chmod +x ~/juno-benchmark/scripts/juno-sync-monitor.sh
            cd ~/juno-benchmark
            echo "Starting sync monitoring to block $BLOCK_TARGET"
            ./scripts/juno-sync-monitor.sh
            
      - name: Show sync results
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "Sync benchmark results:"
            cat ~/juno-benchmark/sync_report.txt

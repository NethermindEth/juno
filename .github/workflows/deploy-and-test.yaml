name: Deploy and Test

on:
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string
        description: "The Docker image tag to deploy"
      environment:
        required: true
        type: string
        description: "The environment to deploy to (Development or Staging)"
      source_repo:
        required: true
        type: string
        description: "Source repository for the image"
      target_repo:
        required: true
        type: string
        description: "Target repository for the image"
      test_mode:
        required: false
        type: string
        default: "full"
        description: "Test mode to run (fast or full)"
    secrets:
      RPC_URL:
        required: true
      WS_RPC_URL:
        required: true
      TEST_ACCOUNT_ADDRESS:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY:
        required: true
      TEST_ACCOUNT_ADDRESS_2:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY_2:
        required: true
      TEST_ACCOUNT_ADDRESS_3:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY_3:
        required: true
      TEST_ACCOUNT_PUBLIC_KEY_3:
        required: true
      AUTH_TOKEN:
        required: true

concurrency:
  group: shared_${{ inputs.environment }}_environment
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  DOCKER_REGISTRY: nethermind.jfrog.io

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v.3.11.1
        id: buildx

      - name: Install JFrog CLI
        id: jfrog
        uses: jfrog/setup-jfrog-cli@ff5cb544114ffc152db9cea1cd3d5978d5074946 # v4.5.11
        env:
          JF_URL: https://${{ env.DOCKER_REGISTRY }}
        with:
          oidc-provider-name: github-nethermindeth

      - name: Login to Registry with OIDC
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ steps.jfrog.outputs.oidc-user }}
          password: ${{ steps.jfrog.outputs.oidc-token }}

      - name: Setup ORAS
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20

      - name: Check image exists in source repository
        run: |
          oras manifest fetch \
          ${{ env.DOCKER_REGISTRY }}/${{ inputs.source_repo }}/juno:${{ inputs.docker_image_tag }} || \
          (echo "‚ùå Image not found in source repository!" && exit 1)

      - name: Deploy image
        run: |
          SOURCE_TAG=${{ env.DOCKER_REGISTRY }}/${{ inputs.source_repo }}/juno:${{ inputs.docker_image_tag }}
          TARGET_TAG=${{ env.DOCKER_REGISTRY }}/${{ inputs.target_repo }}/juno:${{ inputs.docker_image_tag }}

          if [ "${{ inputs.source_repo }}" = "${{ inputs.target_repo }}" ]; then
            echo "Source and target repositories are the same, pushing as latest"
            docker buildx imagetools create -t ${{ env.DOCKER_REGISTRY }}/${{ inputs.target_repo }}/juno:latest $SOURCE_TAG
          else
            echo "Copying image from source to target repository"
            oras cp -r $SOURCE_TAG $TARGET_TAG,latest
          fi

      - name: Verify Deployment Version
        run: |
          bash .github/workflow-scripts/verify_deployment.sh ${{ secrets.RPC_URL }} ${{ secrets.AUTH_TOKEN }} ${{ inputs.docker_image_tag }}

  starknet-rs:
    needs: [deploy]
    uses: ./.github/workflows/starknet-rs-tests.yml
    secrets:
      STARKNET_RPC: ${{ secrets.RPC_URL }}/v0_8?apikey=${{ secrets.AUTH_TOKEN }}

  starknet-js-rpcv08:
    needs: [deploy]
    uses: ./.github/workflows/starknet-js-tests.yml
    with:
      test_mode: ${{ inputs.test_mode }}
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}/v0_8?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS }}
      TEST_ACCOUNT_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY }}

  starknet-js-rpcv09:
    needs: [deploy]
    uses: ./.github/workflows/starknet-js-tests.yml
    with:
      test_mode: ${{ inputs.test_mode }}
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}/v0_9?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_WS_URL: ${{ secrets.WS_RPC_URL }}/v0_9?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS_2 }}
      TEST_ACCOUNT_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY_2 }}

  starknet-go-rpcv08:
    needs: [deploy]
    uses: ./.github/workflows/starknet-go-tests.yml
    with:
      ref: 3bdcf49394b665b5e544ac506d280d55282ee56d
      rpc_version: v0_8
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}
      TEST_WS_RPC_URL: ${{ secrets.WS_RPC_URL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

  starknet-go-rpcv09:
    needs: [deploy]
    uses: ./.github/workflows/starknet-go-tests.yml
    with:
      ref: a2f81c19f8bbe82509b4ce1c1477ecf323c95d99
      rpc_version: v0_9
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}
      TEST_WS_RPC_URL: ${{ secrets.WS_RPC_URL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
      STARKNET_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY_3 }}
      STARKNET_PUBLIC_KEY: ${{ secrets.TEST_ACCOUNT_PUBLIC_KEY_3 }}
      STARKNET_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS_3 }}

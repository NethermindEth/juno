name: Deploy and Test

on:
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string
        description: "The Docker image tag to deploy"
      environment:
        required: true
        type: string
        description: "The environment to deploy to (Development or Staging)"
      source_repo:
        required: true
        type: string
        description: "Source repository for the image"
      target_repo:
        required: true
        type: string
        description: "Target repository for the image"
      test_mode:
        required: false
        type: string
        default: "full"
        description: "Test mode to run (fast or full)"
    secrets:
      ARTIFACTORY_NUBIA_USERNAME:
        required: true
      ARTIFACTORY_NUBIA_TOKEN_DEVELOPER:
        required: true
      RPC_URL:
        required: true
      WS_RPC_URL:
        required: true
      TEST_ACCOUNT_ADDRESS:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY:
        required: true
      TEST_ACCOUNT_ADDRESS_2:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY_2:
        required: true
      TEST_ACCOUNT_ADDRESS_3:
        required: true
      TEST_ACCOUNT_PRIVATE_KEY_3:
        required: true
      TEST_ACCOUNT_PUBLIC_KEY_3:
        required: true
      AUTH_TOKEN:
        required: true

concurrency:
  group: shared_${{ inputs.environment }}_environment
  cancel-in-progress: false

permissions:
  contents: read

env:
  DOCKER_REGISTRY: nethermind.jfrog.io

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2
        id: buildx

      - name: Login to registry
        run: |
          docker login ${{ env.DOCKER_REGISTRY }} -u ${{ secrets.ARTIFACTORY_NUBIA_USERNAME }} -p ${{ secrets.ARTIFACTORY_NUBIA_TOKEN_DEVELOPER }}

      - name: Setup ORAS
        uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d

      - name: Check image exists in source repository
        run: |
          oras manifest fetch \
          ${{ env.DOCKER_REGISTRY }}/${{ inputs.source_repo }}/juno:${{ inputs.docker_image_tag }} || \
          (echo "❌ Image not found in source repository!" && exit 1)

      - name: Deploy image
        run: |
          SOURCE_TAG=${{ env.DOCKER_REGISTRY }}/${{ inputs.source_repo }}/juno:${{ inputs.docker_image_tag }}
          TARGET_TAG=${{ env.DOCKER_REGISTRY }}/${{ inputs.target_repo }}/juno:${{ inputs.docker_image_tag }}

          if [ "${{ inputs.source_repo }}" = "${{ inputs.target_repo }}" ]; then
            echo "Source and target repositories are the same, pushing as latest"
            docker buildx imagetools create -t ${{ env.DOCKER_REGISTRY }}/${{ inputs.target_repo }}/juno:latest $SOURCE_TAG
          else
            echo "Copying image from source to target repository"
            oras cp -r $SOURCE_TAG $TARGET_TAG,latest
          fi

      - name: Verify Deployment Version
        run: |
          bash .github/workflow-scripts/verify_deployment.sh ${{ secrets.RPC_URL }} ${{ secrets.AUTH_TOKEN }} ${{ inputs.docker_image_tag }}

  starknet-rs:
    needs: [deploy]
    uses: ./.github/workflows/starknet-rs-tests.yml
    secrets:
      STARKNET_RPC: ${{ secrets.RPC_URL }}/v0_8?apikey=${{ secrets.AUTH_TOKEN }}

  starknet-js-rpcv08:
    needs: [deploy]
    uses: ./.github/workflows/starknet-js-tests.yml
    with:
      test_mode: ${{ inputs.test_mode }}
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}/v0_8?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS }}
      TEST_ACCOUNT_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY }}

  starknet-js-rpcv09:
    needs: [deploy]
    uses: ./.github/workflows/starknet-js-tests.yml
    with:
      test_mode: ${{ inputs.test_mode }}
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}/v0_9?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_WS_URL: ${{ secrets.WS_RPC_URL }}/v0_9?apikey=${{ secrets.AUTH_TOKEN }}
      TEST_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS_2 }}
      TEST_ACCOUNT_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY_2 }}

  starknet-go-rpcv08:
    needs: [deploy]
    uses: ./.github/workflows/starknet-go-tests.yml
    with:
      ref: 8ab778d86f42c344ac789acae897d9621530e3de
      rpc_version: v0_8
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}
      TEST_WS_RPC_URL: ${{ secrets.WS_RPC_URL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

  starknet-go-rpcv09:
    needs: [deploy]
    uses: ./.github/workflows/starknet-go-tests.yml
    with:
      ref: 5f5517021c173741e06a552dd81d6bd8a477713c
      rpc_version: v0_9
    secrets:
      TEST_RPC_URL: ${{ secrets.RPC_URL }}
      TEST_WS_RPC_URL: ${{ secrets.WS_RPC_URL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
      STARKNET_PRIVATE_KEY: ${{ secrets.TEST_ACCOUNT_PRIVATE_KEY_3 }}
      STARKNET_PUBLIC_KEY: ${{ secrets.TEST_ACCOUNT_PUBLIC_KEY_3 }}
      STARKNET_ACCOUNT_ADDRESS: ${{ secrets.TEST_ACCOUNT_ADDRESS_3 }}

  rps-performance:
    needs: [deploy]
    # uses: ./.github/workflows/starknet-rs-tests.yml
    # secrets:
    #   STARKNET_RPC: ${{ secrets.RPC_URL }}/v0_8?apikey=${{ secrets.AUTH_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          repository: NethermindEth/starknet-rpc-tests
          ref: "fix/load-tests"

      # - name: Setup Go
      #   uses: actions/setup-go@v5
      #   with:
      #     go-version: "1.23"
      #
      # - name: Install dependencies
      #   run: go mod download

      - name: Setup K6
        uses: grafana/setup-k6-action@v1
      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        env:
          NODE_URL: "${{ secrets.TEST_RPC_URL }}?apikey=${{ secrets.AUTH_TOKEN }}"
          # NODE_URL: "${{ secrets.TEST_RPC_URL }}/${{ inputs.rpc_version }}?apikey=${{ secrets.AUTH_TOKEN }}"
          NETWORK: "sepolia"
          LOAD_FACTOR: 1
          DURATION: "30s"
        with:
          path: test.js

      # - name: Configure test environment variables
      #   run: |
      #     echo
      #     echo "WS_PROVIDER_URL=${{ secrets.TEST_WS_RPC_URL }}/${{ inputs.rpc_version }}?apikey=${{ secrets.AUTH_TOKEN }}" >> $GITHUB_ENV
      #     echo "STARKNET_PRIVATE_KEY=${{ secrets.STARKNET_PRIVATE_KEY }}" >> $GITHUB_ENV
      #     echo "STARKNET_PUBLIC_KEY=${{ secrets.STARKNET_PUBLIC_KEY }}" >> $GITHUB_ENV
      #     echo "STARKNET_ACCOUNT_ADDRESS=${{ secrets.STARKNET_ACCOUNT_ADDRESS }}" >> $GITHUB_ENV
      #
      # - name: Run RPC tests
      #   working-directory: rpc
      #   env:
      #     #  In starknet version 0.14.0 `pending` block is replaced by 'pre_confirmed' block,
      #     #  thus there will be no more pending transcations with `pending` semantics.
      #     TESTS_TO_SKIP: "TestSubscribePendingTransactions"
      #   run: go test -skip "$TESTS_TO_SKIP" -timeout 1200s -v -env testnet .

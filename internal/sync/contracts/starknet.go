// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StarknetMetaData contains all meta data concerning the Starknet contract.
var StarknetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"}],\"name\":\"ConsumedMessageToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ConsumedMessageToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"}],\"name\":\"LogMessageToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"LogMessageToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptedGovernor\",\"type\":\"address\"}],\"name\":\"LogNewGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nominatedGovernor\",\"type\":\"address\"}],\"name\":\"LogNominatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogNominationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"LogOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedGovernor\",\"type\":\"address\"}],\"name\":\"LogRemovedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateTransitionFact\",\"type\":\"bytes32\"}],\"name\":\"LogStateTransitionFact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"blockNumber\",\"type\":\"int256\"}],\"name\":\"LogStateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"MessageToL2Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"MessageToL2CancellationStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelL1ToL2Message\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"}],\"name\":\"consumeMessageFromL2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identify\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"testedOperator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"l1ToL2MessageCancellations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ToL2MessageNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"l1ToL2Messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"l2ToL1Messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageCancellationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"programHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"registerOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"}],\"name\":\"sendMessageToL2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newConfigHash\",\"type\":\"uint256\"}],\"name\":\"setConfigHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delayInSeconds\",\"type\":\"uint256\"}],\"name\":\"setMessageCancellationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProgramHash\",\"type\":\"uint256\"}],\"name\":\"setProgramHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetAcceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCancelNomination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"testGovernor\",\"type\":\"address\"}],\"name\":\"starknetIsGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"starknetNominateNewGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governorForRemoval\",\"type\":\"address\"}],\"name\":\"starknetRemoveGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"payload\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"startL1ToL2MessageCancellation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateBlockNumber\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedOperator\",\"type\":\"address\"}],\"name\":\"unregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"programOutput\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"onchainDataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onchainDataSize\",\"type\":\"uint256\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638303bd8a1161010457806396115bc2116100a2578063e1f1176d11610071578063e1f1176d1461039d578063e37fec25146103a5578063e87e7332146103ad578063eeb72866146103c0576101da565b806396115bc2146103515780639be446bf14610364578063a46efaf314610377578063c99d397f1461038a576101da565b80638d4e4083116100de5780638d4e40831461032657806391a66a261461032e578063946be3ed146103415780639588eca214610349576101da565b80638303bd8a1461030357806384f921cd1461030b5780638a9bf0901461031e576101da565b80633e3aa6c51161017c5780636d70f7ae1161014b5780636d70f7ae146102b757806377552641146102ca57806377c7d7a9146102dd5780637a98660b146102f0576101da565b80633e3aa6c514610268578063439fab91146102895780634bb278f31461029c5780636170ff1b146102a4576101da565b806333eeb147116101b857806333eeb1471461023057806335befa5d146102385780633682a450146102405780633d07b33614610255576101da565b8063018cccdf146101df57806301a01590146101fd5780632c9dd5c01461021d575b600080fd5b6101e76103d5565b6040516101f49190612196565b60405180910390f35b61021061020b366004611da6565b61041a565b6040516101f4919061218b565b6101e761022b366004611f3e565b61042b565b61021061050e565b6101e7610513565b61025361024e366004611da6565b610526565b005b610253610263366004611e38565b6105c7565b61027b610276366004611f88565b61061a565b6040516101f492919061219f565b610253610297366004611e50565b6106f0565b610253610838565b6101e76102b2366004611fd9565b6108d0565b6102106102c5366004611da6565b610a14565b6102536102d8366004611dc9565b610a41565b6101e76102eb366004611e38565b610c9b565b6101e76102fe366004611fd9565b610cb6565b6101e7610d6d565b610253610319366004611da6565b610d90565b6101e7610d99565b610210610dbc565b61025361033c366004611da6565b610ddf565b610253610de8565b6101e7610df2565b61025361035f366004611da6565b610e02565b6101e7610372366004611e38565b610e98565b6101e7610385366004611e38565b610ea2565b610253610398366004611e38565b610eac565b6101e7610eff565b610253610f22565b6102536103bb366004611e38565b610f2a565b6103c8610f7d565b6040516101f491906121dc565b60006104156040518060400160405280602081526020017f535441524b4e45545f312e305f4d5347494e475f4c31544f4c325f4e4f4e4345815250610fb4565b905090565b600061042582610fe8565b92915050565b604051600090819061044990869033908690889082906020016120dd565b604051602081830303815290604052805190602001209050600061046b611017565b60008381526020919091526040902054116104a15760405162461bcd60e51b8152600401610498906126f0565b60405180910390fd5b336001600160a01b0316857f7a06c571aa77f34d9706c51e5d8122b5595aebeaa34233bfe866f22befb973b186866040516104dd929190612153565b60405180910390a360016104ef611017565b6000838152602091909152604090208054919091039055949350505050565b600090565b600061051d61103a565b60010154905090565b61052f33610fe8565b61054b5760405162461bcd60e51b815260040161049890612607565b61055481610a14565b6105c4576001610562611084565b6001600160a01b0383166000908152602091909152604090819020805460ff191692151592909217909155517f50a18c352ee1c02ffe058e15c2eb6e58be387c81e73cc1e17035286e54c19a57906105bb90839061213f565b60405180910390a15b50565b6105cf610dbc565b156105ec5760405162461bcd60e51b8152600401610498906125e4565b6105f533610fe8565b6106115760405162461bcd60e51b815260040161049890612607565b6105c4816110a7565b60008060006106276103d5565b905061066b6040518060400160405280602081526020017f535441524b4e45545f312e305f4d5347494e475f4c31544f4c325f4e4f4e4345815250826001016110c5565b8587336001600160a01b03167f7d3450d4f5138e54dcb21a322312d50846ead7856426fb38778f8ef33aeccc018888866040516106aa93929190612167565b60405180910390a460006106c188888888866110f8565b905060016106cd611139565b600083815260209190915260409020805490910190559250905094509492505050565b7f0000000000000000000000002b3b750f1f10c85c8a6d476fc209a8dc7e4ca3f86001600160a01b03163014156107395760405162461bcd60e51b815260040161049890612447565b600061074361050e565b6020908102915081018083101561076c5760405162461bcd60e51b81526004016104989061268c565b600061077a8284868861283d565b8101906107879190611da6565b90503660006107988582888a61283d565b915091506107a68282610834565b3660006107b58887818c61283d565b90925090506001600160a01b038516156107e0576107d485838361115c565b50505050505050610834565b6107e8611281565b1561081057801561080b5760405162461bcd60e51b8152600401610498906123e9565b61082c565b61081a8282611292565b61082482826112f2565b61082c61134c565b505050505050505b5050565b61084133610fe8565b61085d5760405162461bcd60e51b815260040161049890612607565b610865610dbc565b156108825760405162461bcd60e51b8152600401610498906125e4565b6108a5604051806060016040528060318152602001612a066031913960016110c5565b6040517f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768190600090a1565b60008486336001600160a01b03167f8abd2ec2e0a10c82f5b60ea00455fa96c41fd144f225fcc52b8d83d94f803ed887878760405161091193929190612167565b60405180910390a4600061092887878787876110f8565b90506000610934611139565b600083815260209190915260409020549050806109635760405162461bcd60e51b815260040161049890612548565b600061096d611409565b6000848152602091909152604090205490508061099c5760405162461bcd60e51b8152600401610498906127d0565b60006109a6610d6d565b82019050818110156109ca5760405162461bcd60e51b815260040161049890612349565b804210156109ea5760405162461bcd60e51b815260040161049890612380565b600183036109f6611139565b60008681526020919091526040902055509198975050505050505050565b6000610a1e611084565b6001600160a01b0392909216600090815260209290925250604090205460ff1690565b610a4a33610a14565b610a665760405162461bcd60e51b815260040161049890612727565b610a70848461142c565b83836003818110610a7d57fe5b90506020020135610a8c610eff565b14610aa95760405162461bcd60e51b8152600401610498906122ef565b6000610aca858560405180604001604052808781526020018681525061144c565b90506000610ad6610d99565b82604051602001610ae892919061219f565b604051602081830303815290604052805190602001209050610b086114c7565b6001600160a01b0316636a938567826040518263ffffffff1660e01b8152600401610b339190612196565b60206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190611e18565b610b9f5760405162461bcd60e51b815260040161049890612630565b7f9866f8ddfe70bb512b2f2b28b49d4017c43f7ba775f1a20c61c13eea8cdac11182604051610bce9190612196565b60405180910390a16004610bf66001610be98884818c612812565b610bf1611017565b6114ea565b01610c106000610c088884818c612812565b610bf1611139565b01858114610c305760405162461bcd60e51b815260040161049890612511565b610c448787610c3d61103a565b9190611802565b6000610c4e61103a565b90507fe8012213bb931d3efa0a954cfb0d7b75f2a5e2358ba5f7d3edfb0154f6e7a56881600001548260010154604051610c8992919061219f565b60405180910390a15050505050505050565b6000610ca5611139565b600092835260205250604090205490565b60008486336001600160a01b03167f2e00dccd686fd6823ec7dc3e125582aa82881b6ff5f6b5a73856e1ea8338a3be878787604051610cf793929190612167565b60405180910390a46000610d0e87878787876110f8565b90506000610d1a611139565b60008381526020919091526040902054905080610d495760405162461bcd60e51b815260040161049890612548565b42610d52611409565b60008481526020919091526040902055509695505050505050565b60006104156040518060600160405280602d815260200161296f602d9139610fb4565b6105c481611891565b600061041560405180606001604052806023815260200161294c60239139610fb4565b6000610415604051806060016040528060318152602001612a0660319139610fb4565b6105c48161196c565b610df0611a61565b565b6000610dfc61103a565b54905090565b610e0b33610fe8565b610e275760405162461bcd60e51b815260040161049890612607565b610e3081610a14565b156105c4576000610e3f611084565b6001600160a01b0383166000908152602091909152604090819020805460ff191692151592909217909155517fec5f6c3a91a1efb1f9a308bb33c6e9e66bf9090fad0732f127dfdbf516d0625d906105bb90839061213f565b6000610ca5611409565b6000610ca5611017565b610eb4610dbc565b15610ed15760405162461bcd60e51b8152600401610498906125e4565b610eda33610fe8565b610ef65760405162461bcd60e51b815260040161049890612607565b6105c481611af3565b600061041560405180606001604052806021815260200161299c60219139610fb4565b610df0611b15565b610f32610dbc565b15610f4f5760405162461bcd60e51b8152600401610498906125e4565b610f5833610fe8565b610f745760405162461bcd60e51b815260040161049890612607565b6105c481611b98565b60408051808201909152601981527f537461726b576172655f537461726b6e65745f323032325f3300000000000000602082015290565b60008082604051602001610fc891906120c1565b60408051601f198184030181529190528051602090910120549392505050565b600080610ff3611bba565b6001600160a01b039390931660009081526020939093525050604090205460ff1690565b60006104156040518060600160405280602381526020016129bd60239139611c03565b6000806040518060600160405280602781526020016129256027913960405160200161106691906120c1565b60408051601f19818403018152919052805160209091012092915050565b60006104156040518060600160405280602881526020016128cd60289139611c03565b6105c460405180606001604052806021815260200161299c60219139825b6000826040516020016110d891906120c1565b604051602081830303815290604052805190602001209050818155505050565b60405160009061111890339088908590899088908a908290602001612107565b60405160208183030381529060405280519060200120905095945050505050565b60006104156040518060600160405280602681526020016129e060269139611c03565b61116e836001600160a01b0316611c36565b61118a5760405162461bcd60e51b81526004016104989061220f565b60006060846001600160a01b031663439fab9160e01b85856040516024016111b39291906121ad565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516111f191906120c1565b600060405180830381855af49150503d806000811461122c576040519150601f19603f3d011682016040523d82523d6000602084013e611231565b606091505b50915091508181906112565760405162461bcd60e51b815260040161049891906121dc565b5080518190156112795760405162461bcd60e51b815260040161049891906121dc565b505050505050565b600061128b610d99565b1515905090565b60a081146112b25760405162461bcd60e51b815260040161049890612266565b60006112c1602082848661283d565b8101906112ce9190611e38565b9050806112ed5760405162461bcd60e51b8152600401610498906124ae565b505050565b60008060006112ff611d4a565b61130b85870187611ebd565b935093509350935061131c84611b98565b61132583611c3c565b6113378161133161103a565b90611c5e565b611340826110a7565b61127962069780611af3565b6000611356611bba565b6001810154909150600160a01b900460ff16156113855760405162461bcd60e51b81526004016104989061231c565b60018101805460ff60a01b1916600160a01b1790556113a333611c6e565b7f6166272c8d3f5f579082f2827532732f97195007983bb5b83ac12c56700b01a6336040516113d2919061213f565b60405180910390a17fcfb473e6c03f9a29ddaf990e736fa3de5188a0bd85d684f5b6e164ebfbfff5d2336040516105bb919061213f565b60006104156040518060600160405280603081526020016128f560309139611c03565b600481116108345760405162461bcd60e51b815260040161049890612576565b604051600090839082906114669087908490602001612091565b604051602081830303815290604052805190602001209050600081838660000151876020015186016040516020016114a194939291906120a6565b60408051808303601f190181529190528051602090910120600101979650505050505050565b60006104156040518060600160405280602281526020016128ab60229139610fb4565b600080848460008181106114fa57fe5b905060200201359050634000000081106115265760405162461bcd60e51b8152600401610498906124da565b600181810160008861153957600461153c565b60025b90505b818310156117d6578281018781106115695760405162461bcd60e51b81526004016104989061223b565b600089898381811061157757fe5b905060200201359050634000000081106115a35760405162461bcd60e51b815260040161049890612417565b818101600101898111156115c95760405162461bcd60e51b8152600401610498906125ad565b8b156116a15760006115dd82888d8f612812565b6040516020016115ee929190612091565b6040516020818303038152906040528051906020012090508b8b6001890181811061161557fe5b905060200201356001600160a01b03168c8c60008a0181811061163457fe5b905060200201357f4264ac208b5fde633ccdd42e0f12c3d6d443a4f3779bbf886925b94665b63a228e8e60038c0190879261167193929190612812565b60405161167f929190612153565b60405180910390a3600090815260208a905260409020805460010190556117cc565b60006116af82888d8f612812565b6040516020016116c0929190612091565b60408051601f1981840301815291815281516020928301206000818152928d90529120549091506117035760405162461bcd60e51b8152600401610498906126f0565b600090815260208a90526040812080546000190190558b8b6002890181811061172857fe5b9050602002013590508b8b6003890181811061174057fe5b905060200201358c8c60018a0181811061175657fe5b905060200201358d8d60008b0181811061176c57fe5b905060200201356001600160a01b03167f9592d37825c744e33fa80c469683bbd04d336241bb600b574758efd182abe26a8f8f60058d019088926117b293929190612812565b866040516117c293929190612167565b60405180910390a4505b945061153f915050565b8183146117f55760405162461bcd60e51b8152600401610498906124da565b5090979650505050505050565b6001838101805490910190558181600281811061181b57fe5b905060200201358360010154146118445760405162461bcd60e51b81526004016104989061274e565b3660006118518484611cc6565b9150915061185f8282611ce2565b85541461187e5760405162461bcd60e51b8152600401610498906122c0565b6118888282611d00565b90945550505050565b61189a33610fe8565b6118b65760405162461bcd60e51b815260040161049890612607565b336001600160a01b03821614156118df5760405162461bcd60e51b81526004016104989061277c565b60006118e9611bba565b90506118f482610fe8565b6119105760405162461bcd60e51b8152600401610498906127aa565b6001600160a01b03821660009081526020829052604090819020805460ff19169055517fd75f94825e770b8b512be8e74759e252ad00e102e38f50cce2f7c6f868a295999061196090849061213f565b60405180910390a15050565b61197533610fe8565b6119915760405162461bcd60e51b815260040161049890612607565b600061199b611bba565b90506001600160a01b0382166119c35760405162461bcd60e51b815260040161049890612667565b6119cc82610fe8565b156119e95760405162461bcd60e51b815260040161049890612296565b60018101546001600160a01b031615611a145760405162461bcd60e51b8152600401610498906126b9565b6001810180546001600160a01b0319166001600160a01b0384161790556040517f6166272c8d3f5f579082f2827532732f97195007983bb5b83ac12c56700b01a69061196090849061213f565b6000611a6b611bba565b60018101549091506001600160a01b03163314611a9a5760405162461bcd60e51b815260040161049890612477565b6001810154611ab1906001600160a01b0316611c6e565b6001810180546001600160a01b03191690556040517fcfb473e6c03f9a29ddaf990e736fa3de5188a0bd85d684f5b6e164ebfbfff5d2906105bb90339061213f565b6105c46040518060600160405280602d815260200161296f602d9139826110c5565b611b1e33610fe8565b611b3a5760405162461bcd60e51b815260040161049890612607565b6000611b44611bba565b60018101549091506001600160a01b0316156105c4576001810180546001600160a01b03191690556040517f7a8dc7dd7fffb43c4807438fa62729225156941e641fd877938f4edade3429f590600090a150565b6105c460405180606001604052806023815260200161294c60239139826110c5565b6000806040518060400160405280601c81526020017f535441524b4e45545f312e305f474f5645524e414e43455f494e464f0000000081525060405160200161106691906120c1565b60008082604051602001611c1791906120c1565b60408051601f1981840301815291905280516020909101209392505050565b3b151590565b6105c46040518060600160405280602281526020016128ab6022913982611d0f565b8051825560200151600190910155565b611c7781610fe8565b15611c945760405162461bcd60e51b815260040161049890612296565b6000611c9e611bba565b6001600160a01b0390921660009081526020929092525060409020805460ff19166001179055565b366000611cd66002828587612812565b915091505b9250929050565b600082826000818110611cf157fe5b90506020020135905092915050565b600082826001818110611cf157fe5b6000611d1a83610fb4565b6001600160a01b031614611d405760405162461bcd60e51b8152600401610498906123c4565b61083482826110c5565b604051806040016040528060008152602001600081525090565b60008083601f840112611d75578182fd5b50813567ffffffffffffffff811115611d8c578182fd5b6020830191508360208083028501011115611cdb57600080fd5b600060208284031215611db7578081fd5b8135611dc281612895565b9392505050565b60008060008060608587031215611dde578283fd5b843567ffffffffffffffff811115611df4578384fd5b611e0087828801611d64565b90989097506020870135966040013595509350505050565b600060208284031215611e29578081fd5b81518015158114611dc2578182fd5b600060208284031215611e49578081fd5b5035919050565b60008060208385031215611e62578182fd5b823567ffffffffffffffff80821115611e79578384fd5b818501915085601f830112611e8c578384fd5b813581811115611e9a578485fd5b866020828501011115611eab578485fd5b60209290920196919550909350505050565b60008060008084860360a0811215611ed3578485fd5b853594506020860135611ee581612895565b93506040868101359350605f1982011215611efe578182fd5b506040516040810181811067ffffffffffffffff82111715611f1e578283fd5b604052606086013581526080909501356020860152509194909350909190565b600080600060408486031215611f52578283fd5b83359250602084013567ffffffffffffffff811115611f6f578283fd5b611f7b86828701611d64565b9497909650939450505050565b60008060008060608587031215611f9d578384fd5b8435935060208501359250604085013567ffffffffffffffff811115611fc1578283fd5b611fcd87828801611d64565b95989497509550505050565b600080600080600060808688031215611ff0578081fd5b8535945060208601359350604086013567ffffffffffffffff811115612014578182fd5b61202088828901611d64565b96999598509660600135949350505050565b81835260006001600160fb1b0383111561204a578081fd5b6020830280836020870137939093016020019283525090919050565b60006001600160fb1b0383111561207b578081fd5b6020830280838637939093019283525090919050565b600061209e828486612066565b949350505050565b93845260208401929092526040830152606082015260800190565b600082516120d3818460208701612865565b9190910192915050565b60008682528560208301528460408301526120fc606083018486612066565b979650505050505050565b600088825287602083015286604083015285606083015284608083015261213260a083018486612066565b9998505050505050505050565b6001600160a01b0391909116815260200190565b60006020825261209e602083018486612032565b60006040825261217b604083018587612032565b9050826020830152949350505050565b901515815260200190565b90815260200190565b918252602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526121fb816040850160208701612865565b601f01601f19169190910160400192915050565b602080825260129082015271115250d7d393d517d057d0d3d395149050d560721b604082015260600190565b602080825260119082015270135154d4d051d157d513d3d7d4d213d495607a1b604082015260600190565b602080825260169082015275494c4c4547414c5f494e49545f444154415f53495a4560501b604082015260600190565b60208082526010908201526f20a62922a0a22cafa3a7ab22a92727a960811b604082015260600190565b6020808252601590820152741253959053125117d41491559253d554d7d493d3d5605a1b604082015260600190565b6020808252601390820152720929cac82989288be869e9c8c928ebe9082a69606b1b604082015260600190565b6020808252601390820152721053149150511657d253925512505312569151606a1b604082015260600190565b6020808252601c908201527f43414e43454c5f414c4c4f5745445f54494d455f4f564552464c4f5700000000604082015260600190565b60208082526024908201527f4d4553534147455f43414e43454c4c4154494f4e5f4e4f545f414c4c4f57454460408201526317d6515560e21b606082015260800190565b6020808252600b908201526a1053149150511657d4d15560aa1b604082015260600190565b602080825260149082015273554e45585045435445445f494e49545f4441544160601b604082015260600190565b6020808252601690820152750929cac82989288bea082b2989e8288be988a9c8ea8960531b604082015260600190565b6020808252601690820152751112549150d517d0d0531317d11254d0531313d5d15160521b604082015260600190565b60208082526017908201527f4f4e4c595f43414e4449444154455f474f5645524e4f52000000000000000000604082015260600190565b6020808252601290820152712120a22fa4a724aa24a0a624ad20aa24a7a760711b604082015260600190565b6020808252601c908201527f494e56414c49445f4d4553534147455f5345474d454e545f53495a4500000000604082015260600190565b60208082526018908201527f535441524b4e45545f4f55545055545f544f4f5f4c4f4e470000000000000000604082015260600190565b6020808252601490820152731393d7d35154d4d051d157d513d7d0d05390d15360621b604082015260600190565b60208082526019908201527f535441524b4e45545f4f55545055545f544f4f5f53484f525400000000000000604082015260600190565b60208082526019908201527f5452554e43415445445f4d4553534147455f5041594c4f414400000000000000604082015260600190565b60208082526009908201526811925390531256915160ba1b604082015260600190565b6020808252600f908201526e4f4e4c595f474f5645524e414e434560881b604082015260600190565b60208082526019908201527f4e4f5f53544154455f5452414e534954494f4e5f50524f4f4600000000000000604082015260600190565b6020808252600b908201526a4241445f4144445245535360a81b604082015260600190565b6020808252601390820152721253925517d110551057d513d3d7d4d3505313606a1b604082015260600190565b60208082526017908201527f4f544845525f43414e4449444154455f50454e44494e47000000000000000000604082015260600190565b6020808252601a908201527f494e56414c49445f4d4553534147455f544f5f434f4e53554d45000000000000604082015260600190565b6020808252600d908201526c27a7262cafa7a822a920aa27a960991b604082015260600190565b60208082526014908201527324a72b20a624a22fa12627a1a5afa72aa6a122a960611b604082015260600190565b602080825260149082015273474f5645524e4f525f53454c465f52454d4f564560601b604082015260600190565b6020808252600c908201526b2727aa2fa3a7ab22a92727a960a11b604082015260600190565b60208082526022908201527f4d4553534147455f43414e43454c4c4154494f4e5f4e4f545f52455155455354604082015261115160f21b606082015260800190565b60008085851115612821578182fd5b8386111561282d578182fd5b5050602083020193919092039150565b6000808585111561284c578081fd5b83861115612858578081fd5b5050820193919092039150565b60005b83811015612880578181015183820152602001612868565b8381111561288f576000848401525b50505050565b6001600160a01b03811681146105c457600080fdfe535441524b4e45545f312e305f494e49545f56455249464945525f41444452455353535441524b4e45545f312e305f524f4c45535f4f50455241544f52535f4d415050494e475f544147535441524b4e45545f312e305f4d5347494e475f4c31544f4c325f43414e43454c4c4154494f4e5f4d41505050494e47535441524b4e45545f312e305f494e49545f535441524b4e45545f53544154455f535452554354535441524b4e45545f312e305f494e49545f50524f4752414d5f484153485f55494e54535441524b4e45545f312e305f4d5347494e475f4c31544f4c325f43414e43454c4c4154494f4e5f44454c4159535441524b4e45545f312e305f535441524b4e45545f434f4e4649475f48415348535441524b4e45545f312e305f4d5347494e475f4c32544f4c315f4d41505050494e47535441524b4e45545f312e305f4d5347494e475f4c31544f4c325f4d41505050494e475f5632535441524b574152455f434f4e5452414354535f474f564552454e45445f46494e414c495a41424c455f312e305f544147a26469706673582212206d0ea6ffc7ad21f1720d2b62d5bafb549afcacc28a7c2f8736a03742c9d0867664736f6c634300060c0033",
}

// StarknetABI is the input ABI used to generate the binding from.
// Deprecated: Use StarknetMetaData.ABI instead.
var StarknetABI = StarknetMetaData.ABI

// StarknetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StarknetMetaData.Bin instead.
var StarknetBin = StarknetMetaData.Bin

// DeployStarknet deploys a new Ethereum contract, binding an instance of Starknet to it.
func DeployStarknet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Starknet, error) {
	parsed, err := StarknetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StarknetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Starknet{StarknetCaller: StarknetCaller{contract: contract}, StarknetTransactor: StarknetTransactor{contract: contract}, StarknetFilterer: StarknetFilterer{contract: contract}}, nil
}

// Starknet is an auto generated Go binding around an Ethereum contract.
type Starknet struct {
	StarknetCaller     // Read-only binding to the contract
	StarknetTransactor // Write-only binding to the contract
	StarknetFilterer   // Log filterer for contract events
}

// StarknetCaller is an auto generated read-only Go binding around an Ethereum contract.
type StarknetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarknetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StarknetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarknetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StarknetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarknetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StarknetSession struct {
	Contract     *Starknet         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StarknetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StarknetCallerSession struct {
	Contract *StarknetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StarknetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StarknetTransactorSession struct {
	Contract     *StarknetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StarknetRaw is an auto generated low-level Go binding around an Ethereum contract.
type StarknetRaw struct {
	Contract *Starknet // Generic contract binding to access the raw methods on
}

// StarknetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StarknetCallerRaw struct {
	Contract *StarknetCaller // Generic read-only contract binding to access the raw methods on
}

// StarknetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StarknetTransactorRaw struct {
	Contract *StarknetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStarknet creates a new instance of Starknet, bound to a specific deployed contract.
func NewStarknet(address common.Address, backend bind.ContractBackend) (*Starknet, error) {
	contract, err := bindStarknet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Starknet{StarknetCaller: StarknetCaller{contract: contract}, StarknetTransactor: StarknetTransactor{contract: contract}, StarknetFilterer: StarknetFilterer{contract: contract}}, nil
}

// NewStarknetCaller creates a new read-only instance of Starknet, bound to a specific deployed contract.
func NewStarknetCaller(address common.Address, caller bind.ContractCaller) (*StarknetCaller, error) {
	contract, err := bindStarknet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StarknetCaller{contract: contract}, nil
}

// NewStarknetTransactor creates a new write-only instance of Starknet, bound to a specific deployed contract.
func NewStarknetTransactor(address common.Address, transactor bind.ContractTransactor) (*StarknetTransactor, error) {
	contract, err := bindStarknet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StarknetTransactor{contract: contract}, nil
}

// NewStarknetFilterer creates a new log filterer instance of Starknet, bound to a specific deployed contract.
func NewStarknetFilterer(address common.Address, filterer bind.ContractFilterer) (*StarknetFilterer, error) {
	contract, err := bindStarknet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StarknetFilterer{contract: contract}, nil
}

// bindStarknet binds a generic wrapper to an already deployed contract.
func bindStarknet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StarknetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starknet *StarknetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starknet.Contract.StarknetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starknet *StarknetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starknet *StarknetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starknet *StarknetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starknet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starknet *StarknetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starknet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starknet *StarknetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starknet.Contract.contract.Transact(opts, method, params...)
}

// ConfigHash is a free data retrieval call binding the contract method 0xe1f1176d.
//
// Solidity: function configHash() view returns(uint256)
func (_Starknet *StarknetCaller) ConfigHash(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "configHash")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConfigHash is a free data retrieval call binding the contract method 0xe1f1176d.
//
// Solidity: function configHash() view returns(uint256)
func (_Starknet *StarknetSession) ConfigHash() (*big.Int, error) {
	return _Starknet.Contract.ConfigHash(&_Starknet.CallOpts)
}

// ConfigHash is a free data retrieval call binding the contract method 0xe1f1176d.
//
// Solidity: function configHash() view returns(uint256)
func (_Starknet *StarknetCallerSession) ConfigHash() (*big.Int, error) {
	return _Starknet.Contract.ConfigHash(&_Starknet.CallOpts)
}

// Identify is a free data retrieval call binding the contract method 0xeeb72866.
//
// Solidity: function identify() pure returns(string)
func (_Starknet *StarknetCaller) Identify(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "identify")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Identify is a free data retrieval call binding the contract method 0xeeb72866.
//
// Solidity: function identify() pure returns(string)
func (_Starknet *StarknetSession) Identify() (string, error) {
	return _Starknet.Contract.Identify(&_Starknet.CallOpts)
}

// Identify is a free data retrieval call binding the contract method 0xeeb72866.
//
// Solidity: function identify() pure returns(string)
func (_Starknet *StarknetCallerSession) Identify() (string, error) {
	return _Starknet.Contract.Identify(&_Starknet.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0x8d4e4083.
//
// Solidity: function isFinalized() view returns(bool)
func (_Starknet *StarknetCaller) IsFinalized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "isFinalized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFinalized is a free data retrieval call binding the contract method 0x8d4e4083.
//
// Solidity: function isFinalized() view returns(bool)
func (_Starknet *StarknetSession) IsFinalized() (bool, error) {
	return _Starknet.Contract.IsFinalized(&_Starknet.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0x8d4e4083.
//
// Solidity: function isFinalized() view returns(bool)
func (_Starknet *StarknetCallerSession) IsFinalized() (bool, error) {
	return _Starknet.Contract.IsFinalized(&_Starknet.CallOpts)
}

// IsFrozen is a free data retrieval call binding the contract method 0x33eeb147.
//
// Solidity: function isFrozen() view returns(bool)
func (_Starknet *StarknetCaller) IsFrozen(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "isFrozen")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFrozen is a free data retrieval call binding the contract method 0x33eeb147.
//
// Solidity: function isFrozen() view returns(bool)
func (_Starknet *StarknetSession) IsFrozen() (bool, error) {
	return _Starknet.Contract.IsFrozen(&_Starknet.CallOpts)
}

// IsFrozen is a free data retrieval call binding the contract method 0x33eeb147.
//
// Solidity: function isFrozen() view returns(bool)
func (_Starknet *StarknetCallerSession) IsFrozen() (bool, error) {
	return _Starknet.Contract.IsFrozen(&_Starknet.CallOpts)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address testedOperator) view returns(bool)
func (_Starknet *StarknetCaller) IsOperator(opts *bind.CallOpts, testedOperator common.Address) (bool, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "isOperator", testedOperator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address testedOperator) view returns(bool)
func (_Starknet *StarknetSession) IsOperator(testedOperator common.Address) (bool, error) {
	return _Starknet.Contract.IsOperator(&_Starknet.CallOpts, testedOperator)
}

// IsOperator is a free data retrieval call binding the contract method 0x6d70f7ae.
//
// Solidity: function isOperator(address testedOperator) view returns(bool)
func (_Starknet *StarknetCallerSession) IsOperator(testedOperator common.Address) (bool, error) {
	return _Starknet.Contract.IsOperator(&_Starknet.CallOpts, testedOperator)
}

// L1ToL2MessageCancellations is a free data retrieval call binding the contract method 0x9be446bf.
//
// Solidity: function l1ToL2MessageCancellations(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCaller) L1ToL2MessageCancellations(opts *bind.CallOpts, msgHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "l1ToL2MessageCancellations", msgHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L1ToL2MessageCancellations is a free data retrieval call binding the contract method 0x9be446bf.
//
// Solidity: function l1ToL2MessageCancellations(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetSession) L1ToL2MessageCancellations(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L1ToL2MessageCancellations(&_Starknet.CallOpts, msgHash)
}

// L1ToL2MessageCancellations is a free data retrieval call binding the contract method 0x9be446bf.
//
// Solidity: function l1ToL2MessageCancellations(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCallerSession) L1ToL2MessageCancellations(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L1ToL2MessageCancellations(&_Starknet.CallOpts, msgHash)
}

// L1ToL2MessageNonce is a free data retrieval call binding the contract method 0x018cccdf.
//
// Solidity: function l1ToL2MessageNonce() view returns(uint256)
func (_Starknet *StarknetCaller) L1ToL2MessageNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "l1ToL2MessageNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L1ToL2MessageNonce is a free data retrieval call binding the contract method 0x018cccdf.
//
// Solidity: function l1ToL2MessageNonce() view returns(uint256)
func (_Starknet *StarknetSession) L1ToL2MessageNonce() (*big.Int, error) {
	return _Starknet.Contract.L1ToL2MessageNonce(&_Starknet.CallOpts)
}

// L1ToL2MessageNonce is a free data retrieval call binding the contract method 0x018cccdf.
//
// Solidity: function l1ToL2MessageNonce() view returns(uint256)
func (_Starknet *StarknetCallerSession) L1ToL2MessageNonce() (*big.Int, error) {
	return _Starknet.Contract.L1ToL2MessageNonce(&_Starknet.CallOpts)
}

// L1ToL2Messages is a free data retrieval call binding the contract method 0x77c7d7a9.
//
// Solidity: function l1ToL2Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCaller) L1ToL2Messages(opts *bind.CallOpts, msgHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "l1ToL2Messages", msgHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L1ToL2Messages is a free data retrieval call binding the contract method 0x77c7d7a9.
//
// Solidity: function l1ToL2Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetSession) L1ToL2Messages(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L1ToL2Messages(&_Starknet.CallOpts, msgHash)
}

// L1ToL2Messages is a free data retrieval call binding the contract method 0x77c7d7a9.
//
// Solidity: function l1ToL2Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCallerSession) L1ToL2Messages(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L1ToL2Messages(&_Starknet.CallOpts, msgHash)
}

// L2ToL1Messages is a free data retrieval call binding the contract method 0xa46efaf3.
//
// Solidity: function l2ToL1Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCaller) L2ToL1Messages(opts *bind.CallOpts, msgHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "l2ToL1Messages", msgHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ToL1Messages is a free data retrieval call binding the contract method 0xa46efaf3.
//
// Solidity: function l2ToL1Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetSession) L2ToL1Messages(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L2ToL1Messages(&_Starknet.CallOpts, msgHash)
}

// L2ToL1Messages is a free data retrieval call binding the contract method 0xa46efaf3.
//
// Solidity: function l2ToL1Messages(bytes32 msgHash) view returns(uint256)
func (_Starknet *StarknetCallerSession) L2ToL1Messages(msgHash [32]byte) (*big.Int, error) {
	return _Starknet.Contract.L2ToL1Messages(&_Starknet.CallOpts, msgHash)
}

// MessageCancellationDelay is a free data retrieval call binding the contract method 0x8303bd8a.
//
// Solidity: function messageCancellationDelay() view returns(uint256)
func (_Starknet *StarknetCaller) MessageCancellationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "messageCancellationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MessageCancellationDelay is a free data retrieval call binding the contract method 0x8303bd8a.
//
// Solidity: function messageCancellationDelay() view returns(uint256)
func (_Starknet *StarknetSession) MessageCancellationDelay() (*big.Int, error) {
	return _Starknet.Contract.MessageCancellationDelay(&_Starknet.CallOpts)
}

// MessageCancellationDelay is a free data retrieval call binding the contract method 0x8303bd8a.
//
// Solidity: function messageCancellationDelay() view returns(uint256)
func (_Starknet *StarknetCallerSession) MessageCancellationDelay() (*big.Int, error) {
	return _Starknet.Contract.MessageCancellationDelay(&_Starknet.CallOpts)
}

// ProgramHash is a free data retrieval call binding the contract method 0x8a9bf090.
//
// Solidity: function programHash() view returns(uint256)
func (_Starknet *StarknetCaller) ProgramHash(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "programHash")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProgramHash is a free data retrieval call binding the contract method 0x8a9bf090.
//
// Solidity: function programHash() view returns(uint256)
func (_Starknet *StarknetSession) ProgramHash() (*big.Int, error) {
	return _Starknet.Contract.ProgramHash(&_Starknet.CallOpts)
}

// ProgramHash is a free data retrieval call binding the contract method 0x8a9bf090.
//
// Solidity: function programHash() view returns(uint256)
func (_Starknet *StarknetCallerSession) ProgramHash() (*big.Int, error) {
	return _Starknet.Contract.ProgramHash(&_Starknet.CallOpts)
}

// StarknetIsGovernor is a free data retrieval call binding the contract method 0x01a01590.
//
// Solidity: function starknetIsGovernor(address testGovernor) view returns(bool)
func (_Starknet *StarknetCaller) StarknetIsGovernor(opts *bind.CallOpts, testGovernor common.Address) (bool, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "starknetIsGovernor", testGovernor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StarknetIsGovernor is a free data retrieval call binding the contract method 0x01a01590.
//
// Solidity: function starknetIsGovernor(address testGovernor) view returns(bool)
func (_Starknet *StarknetSession) StarknetIsGovernor(testGovernor common.Address) (bool, error) {
	return _Starknet.Contract.StarknetIsGovernor(&_Starknet.CallOpts, testGovernor)
}

// StarknetIsGovernor is a free data retrieval call binding the contract method 0x01a01590.
//
// Solidity: function starknetIsGovernor(address testGovernor) view returns(bool)
func (_Starknet *StarknetCallerSession) StarknetIsGovernor(testGovernor common.Address) (bool, error) {
	return _Starknet.Contract.StarknetIsGovernor(&_Starknet.CallOpts, testGovernor)
}

// StateBlockNumber is a free data retrieval call binding the contract method 0x35befa5d.
//
// Solidity: function stateBlockNumber() view returns(int256)
func (_Starknet *StarknetCaller) StateBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "stateBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateBlockNumber is a free data retrieval call binding the contract method 0x35befa5d.
//
// Solidity: function stateBlockNumber() view returns(int256)
func (_Starknet *StarknetSession) StateBlockNumber() (*big.Int, error) {
	return _Starknet.Contract.StateBlockNumber(&_Starknet.CallOpts)
}

// StateBlockNumber is a free data retrieval call binding the contract method 0x35befa5d.
//
// Solidity: function stateBlockNumber() view returns(int256)
func (_Starknet *StarknetCallerSession) StateBlockNumber() (*big.Int, error) {
	return _Starknet.Contract.StateBlockNumber(&_Starknet.CallOpts)
}

// StateRoot is a free data retrieval call binding the contract method 0x9588eca2.
//
// Solidity: function stateRoot() view returns(uint256)
func (_Starknet *StarknetCaller) StateRoot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starknet.contract.Call(opts, &out, "stateRoot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateRoot is a free data retrieval call binding the contract method 0x9588eca2.
//
// Solidity: function stateRoot() view returns(uint256)
func (_Starknet *StarknetSession) StateRoot() (*big.Int, error) {
	return _Starknet.Contract.StateRoot(&_Starknet.CallOpts)
}

// StateRoot is a free data retrieval call binding the contract method 0x9588eca2.
//
// Solidity: function stateRoot() view returns(uint256)
func (_Starknet *StarknetCallerSession) StateRoot() (*big.Int, error) {
	return _Starknet.Contract.StateRoot(&_Starknet.CallOpts)
}

// CancelL1ToL2Message is a paid mutator transaction binding the contract method 0x6170ff1b.
//
// Solidity: function cancelL1ToL2Message(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetTransactor) CancelL1ToL2Message(opts *bind.TransactOpts, toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "cancelL1ToL2Message", toAddress, selector, payload, nonce)
}

// CancelL1ToL2Message is a paid mutator transaction binding the contract method 0x6170ff1b.
//
// Solidity: function cancelL1ToL2Message(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetSession) CancelL1ToL2Message(toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.CancelL1ToL2Message(&_Starknet.TransactOpts, toAddress, selector, payload, nonce)
}

// CancelL1ToL2Message is a paid mutator transaction binding the contract method 0x6170ff1b.
//
// Solidity: function cancelL1ToL2Message(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetTransactorSession) CancelL1ToL2Message(toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.CancelL1ToL2Message(&_Starknet.TransactOpts, toAddress, selector, payload, nonce)
}

// ConsumeMessageFromL2 is a paid mutator transaction binding the contract method 0x2c9dd5c0.
//
// Solidity: function consumeMessageFromL2(uint256 fromAddress, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetTransactor) ConsumeMessageFromL2(opts *bind.TransactOpts, fromAddress *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "consumeMessageFromL2", fromAddress, payload)
}

// ConsumeMessageFromL2 is a paid mutator transaction binding the contract method 0x2c9dd5c0.
//
// Solidity: function consumeMessageFromL2(uint256 fromAddress, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetSession) ConsumeMessageFromL2(fromAddress *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.ConsumeMessageFromL2(&_Starknet.TransactOpts, fromAddress, payload)
}

// ConsumeMessageFromL2 is a paid mutator transaction binding the contract method 0x2c9dd5c0.
//
// Solidity: function consumeMessageFromL2(uint256 fromAddress, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetTransactorSession) ConsumeMessageFromL2(fromAddress *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.ConsumeMessageFromL2(&_Starknet.TransactOpts, fromAddress, payload)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns()
func (_Starknet *StarknetTransactor) Finalize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "finalize")
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns()
func (_Starknet *StarknetSession) Finalize() (*types.Transaction, error) {
	return _Starknet.Contract.Finalize(&_Starknet.TransactOpts)
}

// Finalize is a paid mutator transaction binding the contract method 0x4bb278f3.
//
// Solidity: function finalize() returns()
func (_Starknet *StarknetTransactorSession) Finalize() (*types.Transaction, error) {
	return _Starknet.Contract.Finalize(&_Starknet.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes data) returns()
func (_Starknet *StarknetTransactor) Initialize(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "initialize", data)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes data) returns()
func (_Starknet *StarknetSession) Initialize(data []byte) (*types.Transaction, error) {
	return _Starknet.Contract.Initialize(&_Starknet.TransactOpts, data)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes data) returns()
func (_Starknet *StarknetTransactorSession) Initialize(data []byte) (*types.Transaction, error) {
	return _Starknet.Contract.Initialize(&_Starknet.TransactOpts, data)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address newOperator) returns()
func (_Starknet *StarknetTransactor) RegisterOperator(opts *bind.TransactOpts, newOperator common.Address) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "registerOperator", newOperator)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address newOperator) returns()
func (_Starknet *StarknetSession) RegisterOperator(newOperator common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.RegisterOperator(&_Starknet.TransactOpts, newOperator)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address newOperator) returns()
func (_Starknet *StarknetTransactorSession) RegisterOperator(newOperator common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.RegisterOperator(&_Starknet.TransactOpts, newOperator)
}

// SendMessageToL2 is a paid mutator transaction binding the contract method 0x3e3aa6c5.
//
// Solidity: function sendMessageToL2(uint256 toAddress, uint256 selector, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetTransactor) SendMessageToL2(opts *bind.TransactOpts, toAddress *big.Int, selector *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "sendMessageToL2", toAddress, selector, payload)
}

// SendMessageToL2 is a paid mutator transaction binding the contract method 0x3e3aa6c5.
//
// Solidity: function sendMessageToL2(uint256 toAddress, uint256 selector, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetSession) SendMessageToL2(toAddress *big.Int, selector *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SendMessageToL2(&_Starknet.TransactOpts, toAddress, selector, payload)
}

// SendMessageToL2 is a paid mutator transaction binding the contract method 0x3e3aa6c5.
//
// Solidity: function sendMessageToL2(uint256 toAddress, uint256 selector, uint256[] payload) returns(bytes32)
func (_Starknet *StarknetTransactorSession) SendMessageToL2(toAddress *big.Int, selector *big.Int, payload []*big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SendMessageToL2(&_Starknet.TransactOpts, toAddress, selector, payload)
}

// SetConfigHash is a paid mutator transaction binding the contract method 0x3d07b336.
//
// Solidity: function setConfigHash(uint256 newConfigHash) returns()
func (_Starknet *StarknetTransactor) SetConfigHash(opts *bind.TransactOpts, newConfigHash *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "setConfigHash", newConfigHash)
}

// SetConfigHash is a paid mutator transaction binding the contract method 0x3d07b336.
//
// Solidity: function setConfigHash(uint256 newConfigHash) returns()
func (_Starknet *StarknetSession) SetConfigHash(newConfigHash *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetConfigHash(&_Starknet.TransactOpts, newConfigHash)
}

// SetConfigHash is a paid mutator transaction binding the contract method 0x3d07b336.
//
// Solidity: function setConfigHash(uint256 newConfigHash) returns()
func (_Starknet *StarknetTransactorSession) SetConfigHash(newConfigHash *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetConfigHash(&_Starknet.TransactOpts, newConfigHash)
}

// SetMessageCancellationDelay is a paid mutator transaction binding the contract method 0xc99d397f.
//
// Solidity: function setMessageCancellationDelay(uint256 delayInSeconds) returns()
func (_Starknet *StarknetTransactor) SetMessageCancellationDelay(opts *bind.TransactOpts, delayInSeconds *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "setMessageCancellationDelay", delayInSeconds)
}

// SetMessageCancellationDelay is a paid mutator transaction binding the contract method 0xc99d397f.
//
// Solidity: function setMessageCancellationDelay(uint256 delayInSeconds) returns()
func (_Starknet *StarknetSession) SetMessageCancellationDelay(delayInSeconds *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetMessageCancellationDelay(&_Starknet.TransactOpts, delayInSeconds)
}

// SetMessageCancellationDelay is a paid mutator transaction binding the contract method 0xc99d397f.
//
// Solidity: function setMessageCancellationDelay(uint256 delayInSeconds) returns()
func (_Starknet *StarknetTransactorSession) SetMessageCancellationDelay(delayInSeconds *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetMessageCancellationDelay(&_Starknet.TransactOpts, delayInSeconds)
}

// SetProgramHash is a paid mutator transaction binding the contract method 0xe87e7332.
//
// Solidity: function setProgramHash(uint256 newProgramHash) returns()
func (_Starknet *StarknetTransactor) SetProgramHash(opts *bind.TransactOpts, newProgramHash *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "setProgramHash", newProgramHash)
}

// SetProgramHash is a paid mutator transaction binding the contract method 0xe87e7332.
//
// Solidity: function setProgramHash(uint256 newProgramHash) returns()
func (_Starknet *StarknetSession) SetProgramHash(newProgramHash *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetProgramHash(&_Starknet.TransactOpts, newProgramHash)
}

// SetProgramHash is a paid mutator transaction binding the contract method 0xe87e7332.
//
// Solidity: function setProgramHash(uint256 newProgramHash) returns()
func (_Starknet *StarknetTransactorSession) SetProgramHash(newProgramHash *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.SetProgramHash(&_Starknet.TransactOpts, newProgramHash)
}

// StarknetAcceptGovernance is a paid mutator transaction binding the contract method 0x946be3ed.
//
// Solidity: function starknetAcceptGovernance() returns()
func (_Starknet *StarknetTransactor) StarknetAcceptGovernance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "starknetAcceptGovernance")
}

// StarknetAcceptGovernance is a paid mutator transaction binding the contract method 0x946be3ed.
//
// Solidity: function starknetAcceptGovernance() returns()
func (_Starknet *StarknetSession) StarknetAcceptGovernance() (*types.Transaction, error) {
	return _Starknet.Contract.StarknetAcceptGovernance(&_Starknet.TransactOpts)
}

// StarknetAcceptGovernance is a paid mutator transaction binding the contract method 0x946be3ed.
//
// Solidity: function starknetAcceptGovernance() returns()
func (_Starknet *StarknetTransactorSession) StarknetAcceptGovernance() (*types.Transaction, error) {
	return _Starknet.Contract.StarknetAcceptGovernance(&_Starknet.TransactOpts)
}

// StarknetCancelNomination is a paid mutator transaction binding the contract method 0xe37fec25.
//
// Solidity: function starknetCancelNomination() returns()
func (_Starknet *StarknetTransactor) StarknetCancelNomination(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "starknetCancelNomination")
}

// StarknetCancelNomination is a paid mutator transaction binding the contract method 0xe37fec25.
//
// Solidity: function starknetCancelNomination() returns()
func (_Starknet *StarknetSession) StarknetCancelNomination() (*types.Transaction, error) {
	return _Starknet.Contract.StarknetCancelNomination(&_Starknet.TransactOpts)
}

// StarknetCancelNomination is a paid mutator transaction binding the contract method 0xe37fec25.
//
// Solidity: function starknetCancelNomination() returns()
func (_Starknet *StarknetTransactorSession) StarknetCancelNomination() (*types.Transaction, error) {
	return _Starknet.Contract.StarknetCancelNomination(&_Starknet.TransactOpts)
}

// StarknetNominateNewGovernor is a paid mutator transaction binding the contract method 0x91a66a26.
//
// Solidity: function starknetNominateNewGovernor(address newGovernor) returns()
func (_Starknet *StarknetTransactor) StarknetNominateNewGovernor(opts *bind.TransactOpts, newGovernor common.Address) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "starknetNominateNewGovernor", newGovernor)
}

// StarknetNominateNewGovernor is a paid mutator transaction binding the contract method 0x91a66a26.
//
// Solidity: function starknetNominateNewGovernor(address newGovernor) returns()
func (_Starknet *StarknetSession) StarknetNominateNewGovernor(newGovernor common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetNominateNewGovernor(&_Starknet.TransactOpts, newGovernor)
}

// StarknetNominateNewGovernor is a paid mutator transaction binding the contract method 0x91a66a26.
//
// Solidity: function starknetNominateNewGovernor(address newGovernor) returns()
func (_Starknet *StarknetTransactorSession) StarknetNominateNewGovernor(newGovernor common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetNominateNewGovernor(&_Starknet.TransactOpts, newGovernor)
}

// StarknetRemoveGovernor is a paid mutator transaction binding the contract method 0x84f921cd.
//
// Solidity: function starknetRemoveGovernor(address governorForRemoval) returns()
func (_Starknet *StarknetTransactor) StarknetRemoveGovernor(opts *bind.TransactOpts, governorForRemoval common.Address) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "starknetRemoveGovernor", governorForRemoval)
}

// StarknetRemoveGovernor is a paid mutator transaction binding the contract method 0x84f921cd.
//
// Solidity: function starknetRemoveGovernor(address governorForRemoval) returns()
func (_Starknet *StarknetSession) StarknetRemoveGovernor(governorForRemoval common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetRemoveGovernor(&_Starknet.TransactOpts, governorForRemoval)
}

// StarknetRemoveGovernor is a paid mutator transaction binding the contract method 0x84f921cd.
//
// Solidity: function starknetRemoveGovernor(address governorForRemoval) returns()
func (_Starknet *StarknetTransactorSession) StarknetRemoveGovernor(governorForRemoval common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.StarknetRemoveGovernor(&_Starknet.TransactOpts, governorForRemoval)
}

// StartL1ToL2MessageCancellation is a paid mutator transaction binding the contract method 0x7a98660b.
//
// Solidity: function startL1ToL2MessageCancellation(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetTransactor) StartL1ToL2MessageCancellation(opts *bind.TransactOpts, toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "startL1ToL2MessageCancellation", toAddress, selector, payload, nonce)
}

// StartL1ToL2MessageCancellation is a paid mutator transaction binding the contract method 0x7a98660b.
//
// Solidity: function startL1ToL2MessageCancellation(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetSession) StartL1ToL2MessageCancellation(toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.StartL1ToL2MessageCancellation(&_Starknet.TransactOpts, toAddress, selector, payload, nonce)
}

// StartL1ToL2MessageCancellation is a paid mutator transaction binding the contract method 0x7a98660b.
//
// Solidity: function startL1ToL2MessageCancellation(uint256 toAddress, uint256 selector, uint256[] payload, uint256 nonce) returns()
func (_Starknet *StarknetTransactorSession) StartL1ToL2MessageCancellation(toAddress *big.Int, selector *big.Int, payload []*big.Int, nonce *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.StartL1ToL2MessageCancellation(&_Starknet.TransactOpts, toAddress, selector, payload, nonce)
}

// UnregisterOperator is a paid mutator transaction binding the contract method 0x96115bc2.
//
// Solidity: function unregisterOperator(address removedOperator) returns()
func (_Starknet *StarknetTransactor) UnregisterOperator(opts *bind.TransactOpts, removedOperator common.Address) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "unregisterOperator", removedOperator)
}

// UnregisterOperator is a paid mutator transaction binding the contract method 0x96115bc2.
//
// Solidity: function unregisterOperator(address removedOperator) returns()
func (_Starknet *StarknetSession) UnregisterOperator(removedOperator common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.UnregisterOperator(&_Starknet.TransactOpts, removedOperator)
}

// UnregisterOperator is a paid mutator transaction binding the contract method 0x96115bc2.
//
// Solidity: function unregisterOperator(address removedOperator) returns()
func (_Starknet *StarknetTransactorSession) UnregisterOperator(removedOperator common.Address) (*types.Transaction, error) {
	return _Starknet.Contract.UnregisterOperator(&_Starknet.TransactOpts, removedOperator)
}

// UpdateState is a paid mutator transaction binding the contract method 0x77552641.
//
// Solidity: function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize) returns()
func (_Starknet *StarknetTransactor) UpdateState(opts *bind.TransactOpts, programOutput []*big.Int, onchainDataHash *big.Int, onchainDataSize *big.Int) (*types.Transaction, error) {
	return _Starknet.contract.Transact(opts, "updateState", programOutput, onchainDataHash, onchainDataSize)
}

// UpdateState is a paid mutator transaction binding the contract method 0x77552641.
//
// Solidity: function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize) returns()
func (_Starknet *StarknetSession) UpdateState(programOutput []*big.Int, onchainDataHash *big.Int, onchainDataSize *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.UpdateState(&_Starknet.TransactOpts, programOutput, onchainDataHash, onchainDataSize)
}

// UpdateState is a paid mutator transaction binding the contract method 0x77552641.
//
// Solidity: function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize) returns()
func (_Starknet *StarknetTransactorSession) UpdateState(programOutput []*big.Int, onchainDataHash *big.Int, onchainDataSize *big.Int) (*types.Transaction, error) {
	return _Starknet.Contract.UpdateState(&_Starknet.TransactOpts, programOutput, onchainDataHash, onchainDataSize)
}

// StarknetConsumedMessageToL1Iterator is returned from FilterConsumedMessageToL1 and is used to iterate over the raw logs and unpacked data for ConsumedMessageToL1 events raised by the Starknet contract.
type StarknetConsumedMessageToL1Iterator struct {
	Event *StarknetConsumedMessageToL1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetConsumedMessageToL1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetConsumedMessageToL1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetConsumedMessageToL1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetConsumedMessageToL1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetConsumedMessageToL1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetConsumedMessageToL1 represents a ConsumedMessageToL1 event raised by the Starknet contract.
type StarknetConsumedMessageToL1 struct {
	FromAddress *big.Int
	ToAddress   common.Address
	Payload     []*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterConsumedMessageToL1 is a free log retrieval operation binding the contract event 0x7a06c571aa77f34d9706c51e5d8122b5595aebeaa34233bfe866f22befb973b1.
//
// Solidity: event ConsumedMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) FilterConsumedMessageToL1(opts *bind.FilterOpts, fromAddress []*big.Int, toAddress []common.Address) (*StarknetConsumedMessageToL1Iterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "ConsumedMessageToL1", fromAddressRule, toAddressRule)
	if err != nil {
		return nil, err
	}
	return &StarknetConsumedMessageToL1Iterator{contract: _Starknet.contract, event: "ConsumedMessageToL1", logs: logs, sub: sub}, nil
}

// WatchConsumedMessageToL1 is a free log subscription operation binding the contract event 0x7a06c571aa77f34d9706c51e5d8122b5595aebeaa34233bfe866f22befb973b1.
//
// Solidity: event ConsumedMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) WatchConsumedMessageToL1(opts *bind.WatchOpts, sink chan<- *StarknetConsumedMessageToL1, fromAddress []*big.Int, toAddress []common.Address) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "ConsumedMessageToL1", fromAddressRule, toAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetConsumedMessageToL1)
				if err := _Starknet.contract.UnpackLog(event, "ConsumedMessageToL1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsumedMessageToL1 is a log parse operation binding the contract event 0x7a06c571aa77f34d9706c51e5d8122b5595aebeaa34233bfe866f22befb973b1.
//
// Solidity: event ConsumedMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) ParseConsumedMessageToL1(log types.Log) (*StarknetConsumedMessageToL1, error) {
	event := new(StarknetConsumedMessageToL1)
	if err := _Starknet.contract.UnpackLog(event, "ConsumedMessageToL1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetConsumedMessageToL2Iterator is returned from FilterConsumedMessageToL2 and is used to iterate over the raw logs and unpacked data for ConsumedMessageToL2 events raised by the Starknet contract.
type StarknetConsumedMessageToL2Iterator struct {
	Event *StarknetConsumedMessageToL2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetConsumedMessageToL2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetConsumedMessageToL2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetConsumedMessageToL2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetConsumedMessageToL2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetConsumedMessageToL2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetConsumedMessageToL2 represents a ConsumedMessageToL2 event raised by the Starknet contract.
type StarknetConsumedMessageToL2 struct {
	FromAddress common.Address
	ToAddress   *big.Int
	Selector    *big.Int
	Payload     []*big.Int
	Nonce       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterConsumedMessageToL2 is a free log retrieval operation binding the contract event 0x9592d37825c744e33fa80c469683bbd04d336241bb600b574758efd182abe26a.
//
// Solidity: event ConsumedMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) FilterConsumedMessageToL2(opts *bind.FilterOpts, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (*StarknetConsumedMessageToL2Iterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "ConsumedMessageToL2", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return &StarknetConsumedMessageToL2Iterator{contract: _Starknet.contract, event: "ConsumedMessageToL2", logs: logs, sub: sub}, nil
}

// WatchConsumedMessageToL2 is a free log subscription operation binding the contract event 0x9592d37825c744e33fa80c469683bbd04d336241bb600b574758efd182abe26a.
//
// Solidity: event ConsumedMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) WatchConsumedMessageToL2(opts *bind.WatchOpts, sink chan<- *StarknetConsumedMessageToL2, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "ConsumedMessageToL2", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetConsumedMessageToL2)
				if err := _Starknet.contract.UnpackLog(event, "ConsumedMessageToL2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsumedMessageToL2 is a log parse operation binding the contract event 0x9592d37825c744e33fa80c469683bbd04d336241bb600b574758efd182abe26a.
//
// Solidity: event ConsumedMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) ParseConsumedMessageToL2(log types.Log) (*StarknetConsumedMessageToL2, error) {
	event := new(StarknetConsumedMessageToL2)
	if err := _Starknet.contract.UnpackLog(event, "ConsumedMessageToL2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogMessageToL1Iterator is returned from FilterLogMessageToL1 and is used to iterate over the raw logs and unpacked data for LogMessageToL1 events raised by the Starknet contract.
type StarknetLogMessageToL1Iterator struct {
	Event *StarknetLogMessageToL1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogMessageToL1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogMessageToL1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogMessageToL1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogMessageToL1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogMessageToL1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogMessageToL1 represents a LogMessageToL1 event raised by the Starknet contract.
type StarknetLogMessageToL1 struct {
	FromAddress *big.Int
	ToAddress   common.Address
	Payload     []*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogMessageToL1 is a free log retrieval operation binding the contract event 0x4264ac208b5fde633ccdd42e0f12c3d6d443a4f3779bbf886925b94665b63a22.
//
// Solidity: event LogMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) FilterLogMessageToL1(opts *bind.FilterOpts, fromAddress []*big.Int, toAddress []common.Address) (*StarknetLogMessageToL1Iterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogMessageToL1", fromAddressRule, toAddressRule)
	if err != nil {
		return nil, err
	}
	return &StarknetLogMessageToL1Iterator{contract: _Starknet.contract, event: "LogMessageToL1", logs: logs, sub: sub}, nil
}

// WatchLogMessageToL1 is a free log subscription operation binding the contract event 0x4264ac208b5fde633ccdd42e0f12c3d6d443a4f3779bbf886925b94665b63a22.
//
// Solidity: event LogMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) WatchLogMessageToL1(opts *bind.WatchOpts, sink chan<- *StarknetLogMessageToL1, fromAddress []*big.Int, toAddress []common.Address) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogMessageToL1", fromAddressRule, toAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogMessageToL1)
				if err := _Starknet.contract.UnpackLog(event, "LogMessageToL1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogMessageToL1 is a log parse operation binding the contract event 0x4264ac208b5fde633ccdd42e0f12c3d6d443a4f3779bbf886925b94665b63a22.
//
// Solidity: event LogMessageToL1(uint256 indexed fromAddress, address indexed toAddress, uint256[] payload)
func (_Starknet *StarknetFilterer) ParseLogMessageToL1(log types.Log) (*StarknetLogMessageToL1, error) {
	event := new(StarknetLogMessageToL1)
	if err := _Starknet.contract.UnpackLog(event, "LogMessageToL1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogMessageToL2Iterator is returned from FilterLogMessageToL2 and is used to iterate over the raw logs and unpacked data for LogMessageToL2 events raised by the Starknet contract.
type StarknetLogMessageToL2Iterator struct {
	Event *StarknetLogMessageToL2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogMessageToL2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogMessageToL2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogMessageToL2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogMessageToL2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogMessageToL2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogMessageToL2 represents a LogMessageToL2 event raised by the Starknet contract.
type StarknetLogMessageToL2 struct {
	FromAddress common.Address
	ToAddress   *big.Int
	Selector    *big.Int
	Payload     []*big.Int
	Nonce       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogMessageToL2 is a free log retrieval operation binding the contract event 0x7d3450d4f5138e54dcb21a322312d50846ead7856426fb38778f8ef33aeccc01.
//
// Solidity: event LogMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) FilterLogMessageToL2(opts *bind.FilterOpts, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (*StarknetLogMessageToL2Iterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogMessageToL2", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return &StarknetLogMessageToL2Iterator{contract: _Starknet.contract, event: "LogMessageToL2", logs: logs, sub: sub}, nil
}

// WatchLogMessageToL2 is a free log subscription operation binding the contract event 0x7d3450d4f5138e54dcb21a322312d50846ead7856426fb38778f8ef33aeccc01.
//
// Solidity: event LogMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) WatchLogMessageToL2(opts *bind.WatchOpts, sink chan<- *StarknetLogMessageToL2, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogMessageToL2", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogMessageToL2)
				if err := _Starknet.contract.UnpackLog(event, "LogMessageToL2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogMessageToL2 is a log parse operation binding the contract event 0x7d3450d4f5138e54dcb21a322312d50846ead7856426fb38778f8ef33aeccc01.
//
// Solidity: event LogMessageToL2(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) ParseLogMessageToL2(log types.Log) (*StarknetLogMessageToL2, error) {
	event := new(StarknetLogMessageToL2)
	if err := _Starknet.contract.UnpackLog(event, "LogMessageToL2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogNewGovernorAcceptedIterator is returned from FilterLogNewGovernorAccepted and is used to iterate over the raw logs and unpacked data for LogNewGovernorAccepted events raised by the Starknet contract.
type StarknetLogNewGovernorAcceptedIterator struct {
	Event *StarknetLogNewGovernorAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogNewGovernorAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogNewGovernorAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogNewGovernorAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogNewGovernorAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogNewGovernorAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogNewGovernorAccepted represents a LogNewGovernorAccepted event raised by the Starknet contract.
type StarknetLogNewGovernorAccepted struct {
	AcceptedGovernor common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLogNewGovernorAccepted is a free log retrieval operation binding the contract event 0xcfb473e6c03f9a29ddaf990e736fa3de5188a0bd85d684f5b6e164ebfbfff5d2.
//
// Solidity: event LogNewGovernorAccepted(address acceptedGovernor)
func (_Starknet *StarknetFilterer) FilterLogNewGovernorAccepted(opts *bind.FilterOpts) (*StarknetLogNewGovernorAcceptedIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogNewGovernorAccepted")
	if err != nil {
		return nil, err
	}
	return &StarknetLogNewGovernorAcceptedIterator{contract: _Starknet.contract, event: "LogNewGovernorAccepted", logs: logs, sub: sub}, nil
}

// WatchLogNewGovernorAccepted is a free log subscription operation binding the contract event 0xcfb473e6c03f9a29ddaf990e736fa3de5188a0bd85d684f5b6e164ebfbfff5d2.
//
// Solidity: event LogNewGovernorAccepted(address acceptedGovernor)
func (_Starknet *StarknetFilterer) WatchLogNewGovernorAccepted(opts *bind.WatchOpts, sink chan<- *StarknetLogNewGovernorAccepted) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogNewGovernorAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogNewGovernorAccepted)
				if err := _Starknet.contract.UnpackLog(event, "LogNewGovernorAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewGovernorAccepted is a log parse operation binding the contract event 0xcfb473e6c03f9a29ddaf990e736fa3de5188a0bd85d684f5b6e164ebfbfff5d2.
//
// Solidity: event LogNewGovernorAccepted(address acceptedGovernor)
func (_Starknet *StarknetFilterer) ParseLogNewGovernorAccepted(log types.Log) (*StarknetLogNewGovernorAccepted, error) {
	event := new(StarknetLogNewGovernorAccepted)
	if err := _Starknet.contract.UnpackLog(event, "LogNewGovernorAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogNominatedGovernorIterator is returned from FilterLogNominatedGovernor and is used to iterate over the raw logs and unpacked data for LogNominatedGovernor events raised by the Starknet contract.
type StarknetLogNominatedGovernorIterator struct {
	Event *StarknetLogNominatedGovernor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogNominatedGovernorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogNominatedGovernor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogNominatedGovernor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogNominatedGovernorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogNominatedGovernorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogNominatedGovernor represents a LogNominatedGovernor event raised by the Starknet contract.
type StarknetLogNominatedGovernor struct {
	NominatedGovernor common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogNominatedGovernor is a free log retrieval operation binding the contract event 0x6166272c8d3f5f579082f2827532732f97195007983bb5b83ac12c56700b01a6.
//
// Solidity: event LogNominatedGovernor(address nominatedGovernor)
func (_Starknet *StarknetFilterer) FilterLogNominatedGovernor(opts *bind.FilterOpts) (*StarknetLogNominatedGovernorIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogNominatedGovernor")
	if err != nil {
		return nil, err
	}
	return &StarknetLogNominatedGovernorIterator{contract: _Starknet.contract, event: "LogNominatedGovernor", logs: logs, sub: sub}, nil
}

// WatchLogNominatedGovernor is a free log subscription operation binding the contract event 0x6166272c8d3f5f579082f2827532732f97195007983bb5b83ac12c56700b01a6.
//
// Solidity: event LogNominatedGovernor(address nominatedGovernor)
func (_Starknet *StarknetFilterer) WatchLogNominatedGovernor(opts *bind.WatchOpts, sink chan<- *StarknetLogNominatedGovernor) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogNominatedGovernor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogNominatedGovernor)
				if err := _Starknet.contract.UnpackLog(event, "LogNominatedGovernor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNominatedGovernor is a log parse operation binding the contract event 0x6166272c8d3f5f579082f2827532732f97195007983bb5b83ac12c56700b01a6.
//
// Solidity: event LogNominatedGovernor(address nominatedGovernor)
func (_Starknet *StarknetFilterer) ParseLogNominatedGovernor(log types.Log) (*StarknetLogNominatedGovernor, error) {
	event := new(StarknetLogNominatedGovernor)
	if err := _Starknet.contract.UnpackLog(event, "LogNominatedGovernor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogNominationCancelledIterator is returned from FilterLogNominationCancelled and is used to iterate over the raw logs and unpacked data for LogNominationCancelled events raised by the Starknet contract.
type StarknetLogNominationCancelledIterator struct {
	Event *StarknetLogNominationCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogNominationCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogNominationCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogNominationCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogNominationCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogNominationCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogNominationCancelled represents a LogNominationCancelled event raised by the Starknet contract.
type StarknetLogNominationCancelled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNominationCancelled is a free log retrieval operation binding the contract event 0x7a8dc7dd7fffb43c4807438fa62729225156941e641fd877938f4edade3429f5.
//
// Solidity: event LogNominationCancelled()
func (_Starknet *StarknetFilterer) FilterLogNominationCancelled(opts *bind.FilterOpts) (*StarknetLogNominationCancelledIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogNominationCancelled")
	if err != nil {
		return nil, err
	}
	return &StarknetLogNominationCancelledIterator{contract: _Starknet.contract, event: "LogNominationCancelled", logs: logs, sub: sub}, nil
}

// WatchLogNominationCancelled is a free log subscription operation binding the contract event 0x7a8dc7dd7fffb43c4807438fa62729225156941e641fd877938f4edade3429f5.
//
// Solidity: event LogNominationCancelled()
func (_Starknet *StarknetFilterer) WatchLogNominationCancelled(opts *bind.WatchOpts, sink chan<- *StarknetLogNominationCancelled) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogNominationCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogNominationCancelled)
				if err := _Starknet.contract.UnpackLog(event, "LogNominationCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNominationCancelled is a log parse operation binding the contract event 0x7a8dc7dd7fffb43c4807438fa62729225156941e641fd877938f4edade3429f5.
//
// Solidity: event LogNominationCancelled()
func (_Starknet *StarknetFilterer) ParseLogNominationCancelled(log types.Log) (*StarknetLogNominationCancelled, error) {
	event := new(StarknetLogNominationCancelled)
	if err := _Starknet.contract.UnpackLog(event, "LogNominationCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogOperatorAddedIterator is returned from FilterLogOperatorAdded and is used to iterate over the raw logs and unpacked data for LogOperatorAdded events raised by the Starknet contract.
type StarknetLogOperatorAddedIterator struct {
	Event *StarknetLogOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogOperatorAdded represents a LogOperatorAdded event raised by the Starknet contract.
type StarknetLogOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogOperatorAdded is a free log retrieval operation binding the contract event 0x50a18c352ee1c02ffe058e15c2eb6e58be387c81e73cc1e17035286e54c19a57.
//
// Solidity: event LogOperatorAdded(address operator)
func (_Starknet *StarknetFilterer) FilterLogOperatorAdded(opts *bind.FilterOpts) (*StarknetLogOperatorAddedIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogOperatorAdded")
	if err != nil {
		return nil, err
	}
	return &StarknetLogOperatorAddedIterator{contract: _Starknet.contract, event: "LogOperatorAdded", logs: logs, sub: sub}, nil
}

// WatchLogOperatorAdded is a free log subscription operation binding the contract event 0x50a18c352ee1c02ffe058e15c2eb6e58be387c81e73cc1e17035286e54c19a57.
//
// Solidity: event LogOperatorAdded(address operator)
func (_Starknet *StarknetFilterer) WatchLogOperatorAdded(opts *bind.WatchOpts, sink chan<- *StarknetLogOperatorAdded) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogOperatorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogOperatorAdded)
				if err := _Starknet.contract.UnpackLog(event, "LogOperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogOperatorAdded is a log parse operation binding the contract event 0x50a18c352ee1c02ffe058e15c2eb6e58be387c81e73cc1e17035286e54c19a57.
//
// Solidity: event LogOperatorAdded(address operator)
func (_Starknet *StarknetFilterer) ParseLogOperatorAdded(log types.Log) (*StarknetLogOperatorAdded, error) {
	event := new(StarknetLogOperatorAdded)
	if err := _Starknet.contract.UnpackLog(event, "LogOperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogOperatorRemovedIterator is returned from FilterLogOperatorRemoved and is used to iterate over the raw logs and unpacked data for LogOperatorRemoved events raised by the Starknet contract.
type StarknetLogOperatorRemovedIterator struct {
	Event *StarknetLogOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogOperatorRemoved represents a LogOperatorRemoved event raised by the Starknet contract.
type StarknetLogOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogOperatorRemoved is a free log retrieval operation binding the contract event 0xec5f6c3a91a1efb1f9a308bb33c6e9e66bf9090fad0732f127dfdbf516d0625d.
//
// Solidity: event LogOperatorRemoved(address operator)
func (_Starknet *StarknetFilterer) FilterLogOperatorRemoved(opts *bind.FilterOpts) (*StarknetLogOperatorRemovedIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogOperatorRemoved")
	if err != nil {
		return nil, err
	}
	return &StarknetLogOperatorRemovedIterator{contract: _Starknet.contract, event: "LogOperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchLogOperatorRemoved is a free log subscription operation binding the contract event 0xec5f6c3a91a1efb1f9a308bb33c6e9e66bf9090fad0732f127dfdbf516d0625d.
//
// Solidity: event LogOperatorRemoved(address operator)
func (_Starknet *StarknetFilterer) WatchLogOperatorRemoved(opts *bind.WatchOpts, sink chan<- *StarknetLogOperatorRemoved) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogOperatorRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogOperatorRemoved)
				if err := _Starknet.contract.UnpackLog(event, "LogOperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogOperatorRemoved is a log parse operation binding the contract event 0xec5f6c3a91a1efb1f9a308bb33c6e9e66bf9090fad0732f127dfdbf516d0625d.
//
// Solidity: event LogOperatorRemoved(address operator)
func (_Starknet *StarknetFilterer) ParseLogOperatorRemoved(log types.Log) (*StarknetLogOperatorRemoved, error) {
	event := new(StarknetLogOperatorRemoved)
	if err := _Starknet.contract.UnpackLog(event, "LogOperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogRemovedGovernorIterator is returned from FilterLogRemovedGovernor and is used to iterate over the raw logs and unpacked data for LogRemovedGovernor events raised by the Starknet contract.
type StarknetLogRemovedGovernorIterator struct {
	Event *StarknetLogRemovedGovernor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogRemovedGovernorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogRemovedGovernor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogRemovedGovernor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogRemovedGovernorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogRemovedGovernorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogRemovedGovernor represents a LogRemovedGovernor event raised by the Starknet contract.
type StarknetLogRemovedGovernor struct {
	RemovedGovernor common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLogRemovedGovernor is a free log retrieval operation binding the contract event 0xd75f94825e770b8b512be8e74759e252ad00e102e38f50cce2f7c6f868a29599.
//
// Solidity: event LogRemovedGovernor(address removedGovernor)
func (_Starknet *StarknetFilterer) FilterLogRemovedGovernor(opts *bind.FilterOpts) (*StarknetLogRemovedGovernorIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogRemovedGovernor")
	if err != nil {
		return nil, err
	}
	return &StarknetLogRemovedGovernorIterator{contract: _Starknet.contract, event: "LogRemovedGovernor", logs: logs, sub: sub}, nil
}

// WatchLogRemovedGovernor is a free log subscription operation binding the contract event 0xd75f94825e770b8b512be8e74759e252ad00e102e38f50cce2f7c6f868a29599.
//
// Solidity: event LogRemovedGovernor(address removedGovernor)
func (_Starknet *StarknetFilterer) WatchLogRemovedGovernor(opts *bind.WatchOpts, sink chan<- *StarknetLogRemovedGovernor) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogRemovedGovernor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogRemovedGovernor)
				if err := _Starknet.contract.UnpackLog(event, "LogRemovedGovernor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRemovedGovernor is a log parse operation binding the contract event 0xd75f94825e770b8b512be8e74759e252ad00e102e38f50cce2f7c6f868a29599.
//
// Solidity: event LogRemovedGovernor(address removedGovernor)
func (_Starknet *StarknetFilterer) ParseLogRemovedGovernor(log types.Log) (*StarknetLogRemovedGovernor, error) {
	event := new(StarknetLogRemovedGovernor)
	if err := _Starknet.contract.UnpackLog(event, "LogRemovedGovernor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogStateTransitionFactIterator is returned from FilterLogStateTransitionFact and is used to iterate over the raw logs and unpacked data for LogStateTransitionFact events raised by the Starknet contract.
type StarknetLogStateTransitionFactIterator struct {
	Event *StarknetLogStateTransitionFact // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogStateTransitionFactIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogStateTransitionFact)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogStateTransitionFact)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogStateTransitionFactIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogStateTransitionFactIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogStateTransitionFact represents a LogStateTransitionFact event raised by the Starknet contract.
type StarknetLogStateTransitionFact struct {
	StateTransitionFact [32]byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterLogStateTransitionFact is a free log retrieval operation binding the contract event 0x9866f8ddfe70bb512b2f2b28b49d4017c43f7ba775f1a20c61c13eea8cdac111.
//
// Solidity: event LogStateTransitionFact(bytes32 stateTransitionFact)
func (_Starknet *StarknetFilterer) FilterLogStateTransitionFact(opts *bind.FilterOpts) (*StarknetLogStateTransitionFactIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogStateTransitionFact")
	if err != nil {
		return nil, err
	}
	return &StarknetLogStateTransitionFactIterator{contract: _Starknet.contract, event: "LogStateTransitionFact", logs: logs, sub: sub}, nil
}

// WatchLogStateTransitionFact is a free log subscription operation binding the contract event 0x9866f8ddfe70bb512b2f2b28b49d4017c43f7ba775f1a20c61c13eea8cdac111.
//
// Solidity: event LogStateTransitionFact(bytes32 stateTransitionFact)
func (_Starknet *StarknetFilterer) WatchLogStateTransitionFact(opts *bind.WatchOpts, sink chan<- *StarknetLogStateTransitionFact) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogStateTransitionFact")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogStateTransitionFact)
				if err := _Starknet.contract.UnpackLog(event, "LogStateTransitionFact", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogStateTransitionFact is a log parse operation binding the contract event 0x9866f8ddfe70bb512b2f2b28b49d4017c43f7ba775f1a20c61c13eea8cdac111.
//
// Solidity: event LogStateTransitionFact(bytes32 stateTransitionFact)
func (_Starknet *StarknetFilterer) ParseLogStateTransitionFact(log types.Log) (*StarknetLogStateTransitionFact, error) {
	event := new(StarknetLogStateTransitionFact)
	if err := _Starknet.contract.UnpackLog(event, "LogStateTransitionFact", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetLogStateUpdateIterator is returned from FilterLogStateUpdate and is used to iterate over the raw logs and unpacked data for LogStateUpdate events raised by the Starknet contract.
type StarknetLogStateUpdateIterator struct {
	Event *StarknetLogStateUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetLogStateUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetLogStateUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetLogStateUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetLogStateUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetLogStateUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetLogStateUpdate represents a LogStateUpdate event raised by the Starknet contract.
type StarknetLogStateUpdate struct {
	GlobalRoot  *big.Int
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLogStateUpdate is a free log retrieval operation binding the contract event 0xe8012213bb931d3efa0a954cfb0d7b75f2a5e2358ba5f7d3edfb0154f6e7a568.
//
// Solidity: event LogStateUpdate(uint256 globalRoot, int256 blockNumber)
func (_Starknet *StarknetFilterer) FilterLogStateUpdate(opts *bind.FilterOpts) (*StarknetLogStateUpdateIterator, error) {

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "LogStateUpdate")
	if err != nil {
		return nil, err
	}
	return &StarknetLogStateUpdateIterator{contract: _Starknet.contract, event: "LogStateUpdate", logs: logs, sub: sub}, nil
}

// WatchLogStateUpdate is a free log subscription operation binding the contract event 0xe8012213bb931d3efa0a954cfb0d7b75f2a5e2358ba5f7d3edfb0154f6e7a568.
//
// Solidity: event LogStateUpdate(uint256 globalRoot, int256 blockNumber)
func (_Starknet *StarknetFilterer) WatchLogStateUpdate(opts *bind.WatchOpts, sink chan<- *StarknetLogStateUpdate) (event.Subscription, error) {

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "LogStateUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetLogStateUpdate)
				if err := _Starknet.contract.UnpackLog(event, "LogStateUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogStateUpdate is a log parse operation binding the contract event 0xe8012213bb931d3efa0a954cfb0d7b75f2a5e2358ba5f7d3edfb0154f6e7a568.
//
// Solidity: event LogStateUpdate(uint256 globalRoot, int256 blockNumber)
func (_Starknet *StarknetFilterer) ParseLogStateUpdate(log types.Log) (*StarknetLogStateUpdate, error) {
	event := new(StarknetLogStateUpdate)
	if err := _Starknet.contract.UnpackLog(event, "LogStateUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetMessageToL2CanceledIterator is returned from FilterMessageToL2Canceled and is used to iterate over the raw logs and unpacked data for MessageToL2Canceled events raised by the Starknet contract.
type StarknetMessageToL2CanceledIterator struct {
	Event *StarknetMessageToL2Canceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetMessageToL2CanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetMessageToL2Canceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetMessageToL2Canceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetMessageToL2CanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetMessageToL2CanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetMessageToL2Canceled represents a MessageToL2Canceled event raised by the Starknet contract.
type StarknetMessageToL2Canceled struct {
	FromAddress common.Address
	ToAddress   *big.Int
	Selector    *big.Int
	Payload     []*big.Int
	Nonce       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMessageToL2Canceled is a free log retrieval operation binding the contract event 0x8abd2ec2e0a10c82f5b60ea00455fa96c41fd144f225fcc52b8d83d94f803ed8.
//
// Solidity: event MessageToL2Canceled(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) FilterMessageToL2Canceled(opts *bind.FilterOpts, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (*StarknetMessageToL2CanceledIterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "MessageToL2Canceled", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return &StarknetMessageToL2CanceledIterator{contract: _Starknet.contract, event: "MessageToL2Canceled", logs: logs, sub: sub}, nil
}

// WatchMessageToL2Canceled is a free log subscription operation binding the contract event 0x8abd2ec2e0a10c82f5b60ea00455fa96c41fd144f225fcc52b8d83d94f803ed8.
//
// Solidity: event MessageToL2Canceled(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) WatchMessageToL2Canceled(opts *bind.WatchOpts, sink chan<- *StarknetMessageToL2Canceled, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "MessageToL2Canceled", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetMessageToL2Canceled)
				if err := _Starknet.contract.UnpackLog(event, "MessageToL2Canceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageToL2Canceled is a log parse operation binding the contract event 0x8abd2ec2e0a10c82f5b60ea00455fa96c41fd144f225fcc52b8d83d94f803ed8.
//
// Solidity: event MessageToL2Canceled(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) ParseMessageToL2Canceled(log types.Log) (*StarknetMessageToL2Canceled, error) {
	event := new(StarknetMessageToL2Canceled)
	if err := _Starknet.contract.UnpackLog(event, "MessageToL2Canceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarknetMessageToL2CancellationStartedIterator is returned from FilterMessageToL2CancellationStarted and is used to iterate over the raw logs and unpacked data for MessageToL2CancellationStarted events raised by the Starknet contract.
type StarknetMessageToL2CancellationStartedIterator struct {
	Event *StarknetMessageToL2CancellationStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarknetMessageToL2CancellationStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarknetMessageToL2CancellationStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarknetMessageToL2CancellationStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarknetMessageToL2CancellationStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarknetMessageToL2CancellationStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarknetMessageToL2CancellationStarted represents a MessageToL2CancellationStarted event raised by the Starknet contract.
type StarknetMessageToL2CancellationStarted struct {
	FromAddress common.Address
	ToAddress   *big.Int
	Selector    *big.Int
	Payload     []*big.Int
	Nonce       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMessageToL2CancellationStarted is a free log retrieval operation binding the contract event 0x2e00dccd686fd6823ec7dc3e125582aa82881b6ff5f6b5a73856e1ea8338a3be.
//
// Solidity: event MessageToL2CancellationStarted(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) FilterMessageToL2CancellationStarted(opts *bind.FilterOpts, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (*StarknetMessageToL2CancellationStartedIterator, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.FilterLogs(opts, "MessageToL2CancellationStarted", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return &StarknetMessageToL2CancellationStartedIterator{contract: _Starknet.contract, event: "MessageToL2CancellationStarted", logs: logs, sub: sub}, nil
}

// WatchMessageToL2CancellationStarted is a free log subscription operation binding the contract event 0x2e00dccd686fd6823ec7dc3e125582aa82881b6ff5f6b5a73856e1ea8338a3be.
//
// Solidity: event MessageToL2CancellationStarted(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) WatchMessageToL2CancellationStarted(opts *bind.WatchOpts, sink chan<- *StarknetMessageToL2CancellationStarted, fromAddress []common.Address, toAddress []*big.Int, selector []*big.Int) (event.Subscription, error) {

	var fromAddressRule []interface{}
	for _, fromAddressItem := range fromAddress {
		fromAddressRule = append(fromAddressRule, fromAddressItem)
	}
	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}
	var selectorRule []interface{}
	for _, selectorItem := range selector {
		selectorRule = append(selectorRule, selectorItem)
	}

	logs, sub, err := _Starknet.contract.WatchLogs(opts, "MessageToL2CancellationStarted", fromAddressRule, toAddressRule, selectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarknetMessageToL2CancellationStarted)
				if err := _Starknet.contract.UnpackLog(event, "MessageToL2CancellationStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageToL2CancellationStarted is a log parse operation binding the contract event 0x2e00dccd686fd6823ec7dc3e125582aa82881b6ff5f6b5a73856e1ea8338a3be.
//
// Solidity: event MessageToL2CancellationStarted(address indexed fromAddress, uint256 indexed toAddress, uint256 indexed selector, uint256[] payload, uint256 nonce)
func (_Starknet *StarknetFilterer) ParseMessageToL2CancellationStarted(log types.Log) (*StarknetMessageToL2CancellationStarted, error) {
	event := new(StarknetMessageToL2CancellationStarted)
	if err := _Starknet.contract.UnpackLog(event, "MessageToL2CancellationStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

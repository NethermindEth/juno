// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: vm.proto

package vmrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageAdapterClient is the client API for StorageAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageAdapterClient interface {
	GetPatriciaNode(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMTrieNode, error)
	GetContractState(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMContractState, error)
	GetContractDefinition(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMContractDefinition, error)
}

type storageAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageAdapterClient(cc grpc.ClientConnInterface) StorageAdapterClient {
	return &storageAdapterClient{cc}
}

func (c *storageAdapterClient) GetPatriciaNode(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMTrieNode, error) {
	out := new(VMTrieNode)
	err := c.cc.Invoke(ctx, "/StorageAdapter/GetPatriciaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdapterClient) GetContractState(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMContractState, error) {
	out := new(VMContractState)
	err := c.cc.Invoke(ctx, "/StorageAdapter/GetContractState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAdapterClient) GetContractDefinition(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*VMContractDefinition, error) {
	out := new(VMContractDefinition)
	err := c.cc.Invoke(ctx, "/StorageAdapter/GetContractDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAdapterServer is the server API for StorageAdapter service.
// All implementations must embed UnimplementedStorageAdapterServer
// for forward compatibility
type StorageAdapterServer interface {
	GetPatriciaNode(context.Context, *GetValueRequest) (*VMTrieNode, error)
	GetContractState(context.Context, *GetValueRequest) (*VMContractState, error)
	GetContractDefinition(context.Context, *GetValueRequest) (*VMContractDefinition, error)
	mustEmbedUnimplementedStorageAdapterServer()
}

// UnimplementedStorageAdapterServer must be embedded to have forward compatible implementations.
type UnimplementedStorageAdapterServer struct {
}

func (UnimplementedStorageAdapterServer) GetPatriciaNode(context.Context, *GetValueRequest) (*VMTrieNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatriciaNode not implemented")
}
func (UnimplementedStorageAdapterServer) GetContractState(context.Context, *GetValueRequest) (*VMContractState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractState not implemented")
}
func (UnimplementedStorageAdapterServer) GetContractDefinition(context.Context, *GetValueRequest) (*VMContractDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractDefinition not implemented")
}
func (UnimplementedStorageAdapterServer) mustEmbedUnimplementedStorageAdapterServer() {}

// UnsafeStorageAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageAdapterServer will
// result in compilation errors.
type UnsafeStorageAdapterServer interface {
	mustEmbedUnimplementedStorageAdapterServer()
}

func RegisterStorageAdapterServer(s grpc.ServiceRegistrar, srv StorageAdapterServer) {
	s.RegisterService(&StorageAdapter_ServiceDesc, srv)
}

func _StorageAdapter_GetPatriciaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdapterServer).GetPatriciaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageAdapter/GetPatriciaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdapterServer).GetPatriciaNode(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdapter_GetContractState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdapterServer).GetContractState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageAdapter/GetContractState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdapterServer).GetContractState(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAdapter_GetContractDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdapterServer).GetContractDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StorageAdapter/GetContractDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdapterServer).GetContractDefinition(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageAdapter_ServiceDesc is the grpc.ServiceDesc for StorageAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StorageAdapter",
	HandlerType: (*StorageAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPatriciaNode",
			Handler:    _StorageAdapter_GetPatriciaNode_Handler,
		},
		{
			MethodName: "GetContractState",
			Handler:    _StorageAdapter_GetContractState_Handler,
		},
		{
			MethodName: "GetContractDefinition",
			Handler:    _StorageAdapter_GetContractDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

// VMClient is the client API for VM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMClient interface {
	Call(ctx context.Context, in *VMCallRequest, opts ...grpc.CallOption) (*VMCallResponse, error)
}

type vMClient struct {
	cc grpc.ClientConnInterface
}

func NewVMClient(cc grpc.ClientConnInterface) VMClient {
	return &vMClient{cc}
}

func (c *vMClient) Call(ctx context.Context, in *VMCallRequest, opts ...grpc.CallOption) (*VMCallResponse, error) {
	out := new(VMCallResponse)
	err := c.cc.Invoke(ctx, "/VM/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServer is the server API for VM service.
// All implementations must embed UnimplementedVMServer
// for forward compatibility
type VMServer interface {
	Call(context.Context, *VMCallRequest) (*VMCallResponse, error)
	mustEmbedUnimplementedVMServer()
}

// UnimplementedVMServer must be embedded to have forward compatible implementations.
type UnimplementedVMServer struct {
}

func (UnimplementedVMServer) Call(context.Context, *VMCallRequest) (*VMCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedVMServer) mustEmbedUnimplementedVMServer() {}

// UnsafeVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServer will
// result in compilation errors.
type UnsafeVMServer interface {
	mustEmbedUnimplementedVMServer()
}

func RegisterVMServer(s grpc.ServiceRegistrar, srv VMServer) {
	s.RegisterService(&VM_ServiceDesc, srv)
}

func _VM_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServer).Call(ctx, req.(*VMCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VM_ServiceDesc is the grpc.ServiceDesc for VM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VM",
	HandlerType: (*VMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _VM_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm.proto",
}

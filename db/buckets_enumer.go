// Code generated by "enumer -type=Bucket -output=buckets_enumer.go"; DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
)

const _BucketName = "StateTriePeerContractStorageClassChainHeightBlockHeaderNumbersByHashBlockHeadersByNumberTransactionBlockNumbersAndIndicesByHashTransactionsByBlockNumberAndIndexReceiptsByBlockNumberAndIndexStateUpdatesByBlockNumberClassesTrieContractStorageHistoryContractNonceHistoryContractClassHashHistoryL1HeightSchemaVersionUnusedBlockCommitmentsTemporarySchemaIntermediateStateL1HandlerTxnHashByMsgHashMempoolHeadMempoolTailMempoolLengthMempoolNodeClassTrieContractTrieContractContractTrieStorageContractStateHashToTrieRootsStateIDPersistedStateIDTrieJournalAggregatedBloomFiltersRunningEventFilter"

var _BucketIndex = [...]uint16{0, 9, 13, 28, 33, 44, 68, 88, 127, 160, 189, 214, 225, 247, 267, 291, 299, 312, 318, 334, 343, 366, 391, 402, 413, 426, 437, 446, 466, 485, 493, 513, 520, 536, 547, 569, 587}

const _BucketLowerName = "statetriepeercontractstorageclasschainheightblockheadernumbersbyhashblockheadersbynumbertransactionblocknumbersandindicesbyhashtransactionsbyblocknumberandindexreceiptsbyblocknumberandindexstateupdatesbyblocknumberclassestriecontractstoragehistorycontractnoncehistorycontractclasshashhistoryl1heightschemaversionunusedblockcommitmentstemporaryschemaintermediatestatel1handlertxnhashbymsghashmempoolheadmempooltailmempoollengthmempoolnodeclasstriecontracttriecontractcontracttriestoragecontractstatehashtotrierootsstateidpersistedstateidtriejournalaggregatedbloomfiltersrunningeventfilter"

func (i Bucket) String() string {
	if i >= Bucket(len(_BucketIndex)-1) {
		return fmt.Sprintf("Bucket(%d)", i)
	}
	return _BucketName[_BucketIndex[i]:_BucketIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BucketNoOp() {
	var x [1]struct{}
	_ = x[StateTrie-(0)]
	_ = x[Peer-(1)]
	_ = x[ContractStorage-(2)]
	_ = x[Class-(3)]
	_ = x[ChainHeight-(4)]
	_ = x[BlockHeaderNumbersByHash-(5)]
	_ = x[BlockHeadersByNumber-(6)]
	_ = x[TransactionBlockNumbersAndIndicesByHash-(7)]
	_ = x[TransactionsByBlockNumberAndIndex-(8)]
	_ = x[ReceiptsByBlockNumberAndIndex-(9)]
	_ = x[StateUpdatesByBlockNumber-(10)]
	_ = x[ClassesTrie-(11)]
	_ = x[ContractStorageHistory-(12)]
	_ = x[ContractNonceHistory-(13)]
	_ = x[ContractClassHashHistory-(14)]
	_ = x[L1Height-(15)]
	_ = x[SchemaVersion-(16)]
	_ = x[Unused-(17)]
	_ = x[BlockCommitments-(18)]
	_ = x[Temporary-(19)]
	_ = x[SchemaIntermediateState-(20)]
	_ = x[L1HandlerTxnHashByMsgHash-(21)]
	_ = x[MempoolHead-(22)]
	_ = x[MempoolTail-(23)]
	_ = x[MempoolLength-(24)]
	_ = x[MempoolNode-(25)]
	_ = x[ClassTrie-(26)]
	_ = x[ContractTrieContract-(27)]
	_ = x[ContractTrieStorage-(28)]
	_ = x[Contract-(29)]
	_ = x[StateHashToTrieRoots-(30)]
	_ = x[StateID-(31)]
	_ = x[PersistedStateID-(32)]
	_ = x[TrieJournal-(33)]
	_ = x[AggregatedBloomFilters-(34)]
	_ = x[RunningEventFilter-(35)]
}

var _BucketValues = []Bucket{StateTrie, Peer, ContractStorage, Class, ChainHeight, BlockHeaderNumbersByHash, BlockHeadersByNumber, TransactionBlockNumbersAndIndicesByHash, TransactionsByBlockNumberAndIndex, ReceiptsByBlockNumberAndIndex, StateUpdatesByBlockNumber, ClassesTrie, ContractStorageHistory, ContractNonceHistory, ContractClassHashHistory, L1Height, SchemaVersion, Unused, BlockCommitments, Temporary, SchemaIntermediateState, L1HandlerTxnHashByMsgHash, MempoolHead, MempoolTail, MempoolLength, MempoolNode, ClassTrie, ContractTrieContract, ContractTrieStorage, Contract, StateHashToTrieRoots, StateID, PersistedStateID, TrieJournal, AggregatedBloomFilters, RunningEventFilter}

var _BucketNameToValueMap = map[string]Bucket{
	_BucketName[0:9]:          StateTrie,
	_BucketLowerName[0:9]:     StateTrie,
	_BucketName[9:13]:         Peer,
	_BucketLowerName[9:13]:    Peer,
	_BucketName[13:28]:        ContractStorage,
	_BucketLowerName[13:28]:   ContractStorage,
	_BucketName[28:33]:        Class,
	_BucketLowerName[28:33]:   Class,
	_BucketName[33:44]:        ChainHeight,
	_BucketLowerName[33:44]:   ChainHeight,
	_BucketName[44:68]:        BlockHeaderNumbersByHash,
	_BucketLowerName[44:68]:   BlockHeaderNumbersByHash,
	_BucketName[68:88]:        BlockHeadersByNumber,
	_BucketLowerName[68:88]:   BlockHeadersByNumber,
	_BucketName[88:127]:       TransactionBlockNumbersAndIndicesByHash,
	_BucketLowerName[88:127]:  TransactionBlockNumbersAndIndicesByHash,
	_BucketName[127:160]:      TransactionsByBlockNumberAndIndex,
	_BucketLowerName[127:160]: TransactionsByBlockNumberAndIndex,
	_BucketName[160:189]:      ReceiptsByBlockNumberAndIndex,
	_BucketLowerName[160:189]: ReceiptsByBlockNumberAndIndex,
	_BucketName[189:214]:      StateUpdatesByBlockNumber,
	_BucketLowerName[189:214]: StateUpdatesByBlockNumber,
	_BucketName[214:225]:      ClassesTrie,
	_BucketLowerName[214:225]: ClassesTrie,
	_BucketName[225:247]:      ContractStorageHistory,
	_BucketLowerName[225:247]: ContractStorageHistory,
	_BucketName[247:267]:      ContractNonceHistory,
	_BucketLowerName[247:267]: ContractNonceHistory,
	_BucketName[267:291]:      ContractClassHashHistory,
	_BucketLowerName[267:291]: ContractClassHashHistory,
	_BucketName[291:299]:      L1Height,
	_BucketLowerName[291:299]: L1Height,
	_BucketName[299:312]:      SchemaVersion,
	_BucketLowerName[299:312]: SchemaVersion,
	_BucketName[312:318]:      Unused,
	_BucketLowerName[312:318]: Unused,
	_BucketName[318:334]:      BlockCommitments,
	_BucketLowerName[318:334]: BlockCommitments,
	_BucketName[334:343]:      Temporary,
	_BucketLowerName[334:343]: Temporary,
	_BucketName[343:366]:      SchemaIntermediateState,
	_BucketLowerName[343:366]: SchemaIntermediateState,
	_BucketName[366:391]:      L1HandlerTxnHashByMsgHash,
	_BucketLowerName[366:391]: L1HandlerTxnHashByMsgHash,
	_BucketName[391:402]:      MempoolHead,
	_BucketLowerName[391:402]: MempoolHead,
	_BucketName[402:413]:      MempoolTail,
	_BucketLowerName[402:413]: MempoolTail,
	_BucketName[413:426]:      MempoolLength,
	_BucketLowerName[413:426]: MempoolLength,
	_BucketName[426:437]:      MempoolNode,
	_BucketLowerName[426:437]: MempoolNode,
	_BucketName[437:446]:      ClassTrie,
	_BucketLowerName[437:446]: ClassTrie,
	_BucketName[446:466]:      ContractTrieContract,
	_BucketLowerName[446:466]: ContractTrieContract,
	_BucketName[466:485]:      ContractTrieStorage,
	_BucketLowerName[466:485]: ContractTrieStorage,
	_BucketName[485:493]:      Contract,
	_BucketLowerName[485:493]: Contract,
	_BucketName[493:513]:      StateHashToTrieRoots,
	_BucketLowerName[493:513]: StateHashToTrieRoots,
	_BucketName[513:520]:      StateID,
	_BucketLowerName[513:520]: StateID,
	_BucketName[520:536]:      PersistedStateID,
	_BucketLowerName[520:536]: PersistedStateID,
	_BucketName[536:547]:      TrieJournal,
	_BucketLowerName[536:547]: TrieJournal,
	_BucketName[547:569]:      AggregatedBloomFilters,
	_BucketLowerName[547:569]: AggregatedBloomFilters,
	_BucketName[569:587]:      RunningEventFilter,
	_BucketLowerName[569:587]: RunningEventFilter,
}

var _BucketNames = []string{
	_BucketName[0:9],
	_BucketName[9:13],
	_BucketName[13:28],
	_BucketName[28:33],
	_BucketName[33:44],
	_BucketName[44:68],
	_BucketName[68:88],
	_BucketName[88:127],
	_BucketName[127:160],
	_BucketName[160:189],
	_BucketName[189:214],
	_BucketName[214:225],
	_BucketName[225:247],
	_BucketName[247:267],
	_BucketName[267:291],
	_BucketName[291:299],
	_BucketName[299:312],
	_BucketName[312:318],
	_BucketName[318:334],
	_BucketName[334:343],
	_BucketName[343:366],
	_BucketName[366:391],
	_BucketName[391:402],
	_BucketName[402:413],
	_BucketName[413:426],
	_BucketName[426:437],
	_BucketName[437:446],
	_BucketName[446:466],
	_BucketName[466:485],
	_BucketName[485:493],
	_BucketName[493:513],
	_BucketName[513:520],
	_BucketName[520:536],
	_BucketName[536:547],
	_BucketName[547:569],
	_BucketName[569:587],
}

// BucketString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BucketString(s string) (Bucket, error) {
	if val, ok := _BucketNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BucketNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bucket values", s)
}

// BucketValues returns all values of the enum
func BucketValues() []Bucket {
	return _BucketValues
}

// BucketStrings returns a slice of all String values of the enum
func BucketStrings() []string {
	strs := make([]string, len(_BucketNames))
	copy(strs, _BucketNames)
	return strs
}

// IsABucket returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bucket) IsABucket() bool {
	for _, v := range _BucketValues {
		if i == v {
			return true
		}
	}
	return false
}

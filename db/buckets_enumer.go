// Code generated by "enumer -type=Bucket -output=buckets_enumer.go"; DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
)

const _BucketName = "StateTriePeerContractClassHashContractStorageClassContractNonceChainHeightBlockHeaderNumbersByHashBlockHeadersByNumberTransactionBlockNumbersAndIndicesByHashTransactionsByBlockNumberAndIndexReceiptsByBlockNumberAndIndexStateUpdatesByBlockNumberClassesTrieContractStorageHistoryContractNonceHistoryContractClassHashHistoryContractDeploymentHeightL1HeightSchemaVersionPendingBlockCommitmentsTemporarySchemaIntermediateState"

var _BucketIndex = [...]uint16{0, 9, 13, 30, 45, 50, 63, 74, 98, 118, 157, 190, 219, 244, 255, 277, 297, 321, 345, 353, 366, 373, 389, 398, 421}

const _BucketLowerName = "statetriepeercontractclasshashcontractstorageclasscontractnoncechainheightblockheadernumbersbyhashblockheadersbynumbertransactionblocknumbersandindicesbyhashtransactionsbyblocknumberandindexreceiptsbyblocknumberandindexstateupdatesbyblocknumberclassestriecontractstoragehistorycontractnoncehistorycontractclasshashhistorycontractdeploymentheightl1heightschemaversionpendingblockcommitmentstemporaryschemaintermediatestate"

func (i Bucket) String() string {
	if i >= Bucket(len(_BucketIndex)-1) {
		return fmt.Sprintf("Bucket(%d)", i)
	}
	return _BucketName[_BucketIndex[i]:_BucketIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BucketNoOp() {
	var x [1]struct{}
	_ = x[StateTrie-(0)]
	_ = x[Peer-(1)]
	_ = x[ContractClassHash-(2)]
	_ = x[ContractStorage-(3)]
	_ = x[Class-(4)]
	_ = x[ContractNonce-(5)]
	_ = x[ChainHeight-(6)]
	_ = x[BlockHeaderNumbersByHash-(7)]
	_ = x[BlockHeadersByNumber-(8)]
	_ = x[TransactionBlockNumbersAndIndicesByHash-(9)]
	_ = x[TransactionsByBlockNumberAndIndex-(10)]
	_ = x[ReceiptsByBlockNumberAndIndex-(11)]
	_ = x[StateUpdatesByBlockNumber-(12)]
	_ = x[ClassesTrie-(13)]
	_ = x[ContractStorageHistory-(14)]
	_ = x[ContractNonceHistory-(15)]
	_ = x[ContractClassHashHistory-(16)]
	_ = x[ContractDeploymentHeight-(17)]
	_ = x[L1Height-(18)]
	_ = x[SchemaVersion-(19)]
	_ = x[Pending-(20)]
	_ = x[BlockCommitments-(21)]
	_ = x[Temporary-(22)]
	_ = x[SchemaIntermediateState-(23)]
}

var _BucketValues = []Bucket{StateTrie, Peer, ContractClassHash, ContractStorage, Class, ContractNonce, ChainHeight, BlockHeaderNumbersByHash, BlockHeadersByNumber, TransactionBlockNumbersAndIndicesByHash, TransactionsByBlockNumberAndIndex, ReceiptsByBlockNumberAndIndex, StateUpdatesByBlockNumber, ClassesTrie, ContractStorageHistory, ContractNonceHistory, ContractClassHashHistory, ContractDeploymentHeight, L1Height, SchemaVersion, Pending, BlockCommitments, Temporary, SchemaIntermediateState}

var _BucketNameToValueMap = map[string]Bucket{
	_BucketName[0:9]:          StateTrie,
	_BucketLowerName[0:9]:     StateTrie,
	_BucketName[9:13]:         Peer,
	_BucketLowerName[9:13]:    Peer,
	_BucketName[13:30]:        ContractClassHash,
	_BucketLowerName[13:30]:   ContractClassHash,
	_BucketName[30:45]:        ContractStorage,
	_BucketLowerName[30:45]:   ContractStorage,
	_BucketName[45:50]:        Class,
	_BucketLowerName[45:50]:   Class,
	_BucketName[50:63]:        ContractNonce,
	_BucketLowerName[50:63]:   ContractNonce,
	_BucketName[63:74]:        ChainHeight,
	_BucketLowerName[63:74]:   ChainHeight,
	_BucketName[74:98]:        BlockHeaderNumbersByHash,
	_BucketLowerName[74:98]:   BlockHeaderNumbersByHash,
	_BucketName[98:118]:       BlockHeadersByNumber,
	_BucketLowerName[98:118]:  BlockHeadersByNumber,
	_BucketName[118:157]:      TransactionBlockNumbersAndIndicesByHash,
	_BucketLowerName[118:157]: TransactionBlockNumbersAndIndicesByHash,
	_BucketName[157:190]:      TransactionsByBlockNumberAndIndex,
	_BucketLowerName[157:190]: TransactionsByBlockNumberAndIndex,
	_BucketName[190:219]:      ReceiptsByBlockNumberAndIndex,
	_BucketLowerName[190:219]: ReceiptsByBlockNumberAndIndex,
	_BucketName[219:244]:      StateUpdatesByBlockNumber,
	_BucketLowerName[219:244]: StateUpdatesByBlockNumber,
	_BucketName[244:255]:      ClassesTrie,
	_BucketLowerName[244:255]: ClassesTrie,
	_BucketName[255:277]:      ContractStorageHistory,
	_BucketLowerName[255:277]: ContractStorageHistory,
	_BucketName[277:297]:      ContractNonceHistory,
	_BucketLowerName[277:297]: ContractNonceHistory,
	_BucketName[297:321]:      ContractClassHashHistory,
	_BucketLowerName[297:321]: ContractClassHashHistory,
	_BucketName[321:345]:      ContractDeploymentHeight,
	_BucketLowerName[321:345]: ContractDeploymentHeight,
	_BucketName[345:353]:      L1Height,
	_BucketLowerName[345:353]: L1Height,
	_BucketName[353:366]:      SchemaVersion,
	_BucketLowerName[353:366]: SchemaVersion,
	_BucketName[366:373]:      Pending,
	_BucketLowerName[366:373]: Pending,
	_BucketName[373:389]:      BlockCommitments,
	_BucketLowerName[373:389]: BlockCommitments,
	_BucketName[389:398]:      Temporary,
	_BucketLowerName[389:398]: Temporary,
	_BucketName[398:421]:      SchemaIntermediateState,
	_BucketLowerName[398:421]: SchemaIntermediateState,
}

var _BucketNames = []string{
	_BucketName[0:9],
	_BucketName[9:13],
	_BucketName[13:30],
	_BucketName[30:45],
	_BucketName[45:50],
	_BucketName[50:63],
	_BucketName[63:74],
	_BucketName[74:98],
	_BucketName[98:118],
	_BucketName[118:157],
	_BucketName[157:190],
	_BucketName[190:219],
	_BucketName[219:244],
	_BucketName[244:255],
	_BucketName[255:277],
	_BucketName[277:297],
	_BucketName[297:321],
	_BucketName[321:345],
	_BucketName[345:353],
	_BucketName[353:366],
	_BucketName[366:373],
	_BucketName[373:389],
	_BucketName[389:398],
	_BucketName[398:421],
}

// BucketString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BucketString(s string) (Bucket, error) {
	if val, ok := _BucketNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BucketNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bucket values", s)
}

// BucketValues returns all values of the enum
func BucketValues() []Bucket {
	return _BucketValues
}

// BucketStrings returns a slice of all String values of the enum
func BucketStrings() []string {
	strs := make([]string, len(_BucketNames))
	copy(strs, _BucketNames)
	return strs
}

// IsABucket returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bucket) IsABucket() bool {
	for _, v := range _BucketValues {
		if i == v {
			return true
		}
	}
	return false
}

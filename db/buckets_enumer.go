// Code generated by "enumer -type=Bucket -output=buckets_enumer.go"; DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
)

const _BucketName = "StateTrieUnusedContractClassHashContractStorageClassContractNonceChainHeightBlockHeaderNumbersByHashBlockHeadersByNumberTransactionBlockNumbersAndIndicesByHashTransactionsByBlockNumberAndIndexReceiptsByBlockNumberAndIndexStateUpdatesByBlockNumberClassesTrieContractStorageHistoryContractNonceHistoryContractClassHashHistoryContractDeploymentHeightL1HeightSchemaVersionPendingBlockCommitmentsTemporarySchemaIntermediateStatePeer"

var _BucketIndex = [...]uint16{0, 9, 15, 32, 47, 52, 65, 76, 100, 120, 159, 192, 221, 246, 257, 279, 299, 323, 347, 355, 368, 375, 391, 400, 423, 427}

const _BucketLowerName = "statetrieunusedcontractclasshashcontractstorageclasscontractnoncechainheightblockheadernumbersbyhashblockheadersbynumbertransactionblocknumbersandindicesbyhashtransactionsbyblocknumberandindexreceiptsbyblocknumberandindexstateupdatesbyblocknumberclassestriecontractstoragehistorycontractnoncehistorycontractclasshashhistorycontractdeploymentheightl1heightschemaversionpendingblockcommitmentstemporaryschemaintermediatestatepeer"

func (i Bucket) String() string {
	if i >= Bucket(len(_BucketIndex)-1) {
		return fmt.Sprintf("Bucket(%d)", i)
	}
	return _BucketName[_BucketIndex[i]:_BucketIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BucketNoOp() {
	var x [1]struct{}
	_ = x[StateTrie-(0)]
	_ = x[Unused-(1)]
	_ = x[ContractClassHash-(2)]
	_ = x[ContractStorage-(3)]
	_ = x[Class-(4)]
	_ = x[ContractNonce-(5)]
	_ = x[ChainHeight-(6)]
	_ = x[BlockHeaderNumbersByHash-(7)]
	_ = x[BlockHeadersByNumber-(8)]
	_ = x[TransactionBlockNumbersAndIndicesByHash-(9)]
	_ = x[TransactionsByBlockNumberAndIndex-(10)]
	_ = x[ReceiptsByBlockNumberAndIndex-(11)]
	_ = x[StateUpdatesByBlockNumber-(12)]
	_ = x[ClassesTrie-(13)]
	_ = x[ContractStorageHistory-(14)]
	_ = x[ContractNonceHistory-(15)]
	_ = x[ContractClassHashHistory-(16)]
	_ = x[ContractDeploymentHeight-(17)]
	_ = x[L1Height-(18)]
	_ = x[SchemaVersion-(19)]
	_ = x[Pending-(20)]
	_ = x[BlockCommitments-(21)]
	_ = x[Temporary-(22)]
	_ = x[SchemaIntermediateState-(23)]
	_ = x[Peer-(24)]
}

var _BucketValues = []Bucket{StateTrie, Unused, ContractClassHash, ContractStorage, Class, ContractNonce, ChainHeight, BlockHeaderNumbersByHash, BlockHeadersByNumber, TransactionBlockNumbersAndIndicesByHash, TransactionsByBlockNumberAndIndex, ReceiptsByBlockNumberAndIndex, StateUpdatesByBlockNumber, ClassesTrie, ContractStorageHistory, ContractNonceHistory, ContractClassHashHistory, ContractDeploymentHeight, L1Height, SchemaVersion, Pending, BlockCommitments, Temporary, SchemaIntermediateState, Peer}

var _BucketNameToValueMap = map[string]Bucket{
	_BucketName[0:9]:          StateTrie,
	_BucketLowerName[0:9]:     StateTrie,
	_BucketName[9:15]:         Unused,
	_BucketLowerName[9:15]:    Unused,
	_BucketName[15:32]:        ContractClassHash,
	_BucketLowerName[15:32]:   ContractClassHash,
	_BucketName[32:47]:        ContractStorage,
	_BucketLowerName[32:47]:   ContractStorage,
	_BucketName[47:52]:        Class,
	_BucketLowerName[47:52]:   Class,
	_BucketName[52:65]:        ContractNonce,
	_BucketLowerName[52:65]:   ContractNonce,
	_BucketName[65:76]:        ChainHeight,
	_BucketLowerName[65:76]:   ChainHeight,
	_BucketName[76:100]:       BlockHeaderNumbersByHash,
	_BucketLowerName[76:100]:  BlockHeaderNumbersByHash,
	_BucketName[100:120]:      BlockHeadersByNumber,
	_BucketLowerName[100:120]: BlockHeadersByNumber,
	_BucketName[120:159]:      TransactionBlockNumbersAndIndicesByHash,
	_BucketLowerName[120:159]: TransactionBlockNumbersAndIndicesByHash,
	_BucketName[159:192]:      TransactionsByBlockNumberAndIndex,
	_BucketLowerName[159:192]: TransactionsByBlockNumberAndIndex,
	_BucketName[192:221]:      ReceiptsByBlockNumberAndIndex,
	_BucketLowerName[192:221]: ReceiptsByBlockNumberAndIndex,
	_BucketName[221:246]:      StateUpdatesByBlockNumber,
	_BucketLowerName[221:246]: StateUpdatesByBlockNumber,
	_BucketName[246:257]:      ClassesTrie,
	_BucketLowerName[246:257]: ClassesTrie,
	_BucketName[257:279]:      ContractStorageHistory,
	_BucketLowerName[257:279]: ContractStorageHistory,
	_BucketName[279:299]:      ContractNonceHistory,
	_BucketLowerName[279:299]: ContractNonceHistory,
	_BucketName[299:323]:      ContractClassHashHistory,
	_BucketLowerName[299:323]: ContractClassHashHistory,
	_BucketName[323:347]:      ContractDeploymentHeight,
	_BucketLowerName[323:347]: ContractDeploymentHeight,
	_BucketName[347:355]:      L1Height,
	_BucketLowerName[347:355]: L1Height,
	_BucketName[355:368]:      SchemaVersion,
	_BucketLowerName[355:368]: SchemaVersion,
	_BucketName[368:375]:      Pending,
	_BucketLowerName[368:375]: Pending,
	_BucketName[375:391]:      BlockCommitments,
	_BucketLowerName[375:391]: BlockCommitments,
	_BucketName[391:400]:      Temporary,
	_BucketLowerName[391:400]: Temporary,
	_BucketName[400:423]:      SchemaIntermediateState,
	_BucketLowerName[400:423]: SchemaIntermediateState,
	_BucketName[423:427]:      Peer,
	_BucketLowerName[423:427]: Peer,
}

var _BucketNames = []string{
	_BucketName[0:9],
	_BucketName[9:15],
	_BucketName[15:32],
	_BucketName[32:47],
	_BucketName[47:52],
	_BucketName[52:65],
	_BucketName[65:76],
	_BucketName[76:100],
	_BucketName[100:120],
	_BucketName[120:159],
	_BucketName[159:192],
	_BucketName[192:221],
	_BucketName[221:246],
	_BucketName[246:257],
	_BucketName[257:279],
	_BucketName[279:299],
	_BucketName[299:323],
	_BucketName[323:347],
	_BucketName[347:355],
	_BucketName[355:368],
	_BucketName[368:375],
	_BucketName[375:391],
	_BucketName[391:400],
	_BucketName[400:423],
	_BucketName[423:427],
}

// BucketString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BucketString(s string) (Bucket, error) {
	if val, ok := _BucketNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BucketNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bucket values", s)
}

// BucketValues returns all values of the enum
func BucketValues() []Bucket {
	return _BucketValues
}

// BucketStrings returns a slice of all String values of the enum
func BucketStrings() []string {
	strs := make([]string, len(_BucketNames))
	copy(strs, _BucketNames)
	return strs
}

// IsABucket returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bucket) IsABucket() bool {
	for _, v := range _BucketValues {
		if i == v {
			return true
		}
	}
	return false
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/l1data (interfaces: StateUpdateLogFetcher)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_stateupdate.go -package=mocks github.com/NethermindEth/juno/l1data StateUpdateLogFetcher
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	l1data "github.com/NethermindEth/juno/l1data"
	gomock "go.uber.org/mock/gomock"
)

// MockStateUpdateLogFetcher is a mock of StateUpdateLogFetcher interface.
type MockStateUpdateLogFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockStateUpdateLogFetcherMockRecorder
}

// MockStateUpdateLogFetcherMockRecorder is the mock recorder for MockStateUpdateLogFetcher.
type MockStateUpdateLogFetcherMockRecorder struct {
	mock *MockStateUpdateLogFetcher
}

// NewMockStateUpdateLogFetcher creates a new mock instance.
func NewMockStateUpdateLogFetcher(ctrl *gomock.Controller) *MockStateUpdateLogFetcher {
	mock := &MockStateUpdateLogFetcher{ctrl: ctrl}
	mock.recorder = &MockStateUpdateLogFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateUpdateLogFetcher) EXPECT() *MockStateUpdateLogFetcherMockRecorder {
	return m.recorder
}

// StateUpdateLogs mocks base method.
func (m *MockStateUpdateLogFetcher) StateUpdateLogs(arg0 context.Context, arg1, arg2 uint64) ([]*l1data.LogStateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdateLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*l1data.LogStateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdateLogs indicates an expected call of StateUpdateLogs.
func (mr *MockStateUpdateLogFetcherMockRecorder) StateUpdateLogs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdateLogs", reflect.TypeOf((*MockStateUpdateLogFetcher)(nil).StateUpdateLogs), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/plugin (interfaces: JunoPlugin)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_plugin.go -package=mocks github.com/NethermindEth/juno/plugin JunoPlugin
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	felt "github.com/NethermindEth/juno/core/felt"
	plugin "github.com/NethermindEth/juno/plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockJunoPlugin is a mock of JunoPlugin interface.
type MockJunoPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockJunoPluginMockRecorder
	isgomock struct{}
}

// MockJunoPluginMockRecorder is the mock recorder for MockJunoPlugin.
type MockJunoPluginMockRecorder struct {
	mock *MockJunoPlugin
}

// NewMockJunoPlugin creates a new mock instance.
func NewMockJunoPlugin(ctrl *gomock.Controller) *MockJunoPlugin {
	mock := &MockJunoPlugin{ctrl: ctrl}
	mock.recorder = &MockJunoPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJunoPlugin) EXPECT() *MockJunoPluginMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockJunoPlugin) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockJunoPluginMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockJunoPlugin)(nil).Init))
}

// NewBlock mocks base method.
func (m *MockJunoPlugin) NewBlock(block *core.Block, stateUpdate *core.StateUpdate, newClasses map[felt.Felt]core.ClassDefinition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlock", block, stateUpdate, newClasses)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewBlock indicates an expected call of NewBlock.
func (mr *MockJunoPluginMockRecorder) NewBlock(block, stateUpdate, newClasses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlock", reflect.TypeOf((*MockJunoPlugin)(nil).NewBlock), block, stateUpdate, newClasses)
}

// RevertBlock mocks base method.
func (m *MockJunoPlugin) RevertBlock(from, to *plugin.BlockAndStateUpdate, reverseStateDiff *core.StateDiff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertBlock", from, to, reverseStateDiff)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevertBlock indicates an expected call of RevertBlock.
func (mr *MockJunoPluginMockRecorder) RevertBlock(from, to, reverseStateDiff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertBlock", reflect.TypeOf((*MockJunoPlugin)(nil).RevertBlock), from, to, reverseStateDiff)
}

// Shutdown mocks base method.
func (m *MockJunoPlugin) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockJunoPluginMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockJunoPlugin)(nil).Shutdown))
}

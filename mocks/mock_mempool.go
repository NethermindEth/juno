// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/mempool (interfaces: NonceReader)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_mempool.go -package=mocks github.com/NethermindEth/juno/mempool NonceReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	gomock "go.uber.org/mock/gomock"
)

// MockNonceReader is a mock of NonceReader interface.
type MockNonceReader struct {
	ctrl     *gomock.Controller
	recorder *MockNonceReaderMockRecorder
}

// MockNonceReaderMockRecorder is the mock recorder for MockNonceReader.
type MockNonceReaderMockRecorder struct {
	mock *MockNonceReader
}

// NewMockNonceReader creates a new mock instance.
func NewMockNonceReader(ctrl *gomock.Controller) *MockNonceReader {
	mock := &MockNonceReader{ctrl: ctrl}
	mock.recorder = &MockNonceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceReader) EXPECT() *MockNonceReaderMockRecorder {
	return m.recorder
}

// ContractNonce mocks base method.
func (m *MockNonceReader) ContractNonce(arg0 *felt.Felt) (*felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractNonce", arg0)
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractNonce indicates an expected call of ContractNonce.
func (mr *MockNonceReaderMockRecorder) ContractNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractNonce", reflect.TypeOf((*MockNonceReader)(nil).ContractNonce), arg0)
}

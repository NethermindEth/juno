// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/l1data (interfaces: L1Data)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_l1data.go -package=mocks github.com/NethermindEth/juno/l1data L1Data
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	l1data "github.com/NethermindEth/juno/l1data"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockL1Data is a mock of L1Data interface.
type MockL1Data struct {
	ctrl     *gomock.Controller
	recorder *MockL1DataMockRecorder
}

// MockL1DataMockRecorder is the mock recorder for MockL1Data.
type MockL1DataMockRecorder struct {
	mock *MockL1Data
}

// NewMockL1Data creates a new mock instance.
func NewMockL1Data(ctrl *gomock.Controller) *MockL1Data {
	mock := &MockL1Data{ctrl: ctrl}
	mock.recorder = &MockL1DataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockL1Data) EXPECT() *MockL1DataMockRecorder {
	return m.recorder
}

// EncodedStateDiff mocks base method.
func (m *MockL1Data) EncodedStateDiff(arg0 context.Context, arg1 []common.Hash) ([]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodedStateDiff", arg0, arg1)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodedStateDiff indicates an expected call of EncodedStateDiff.
func (mr *MockL1DataMockRecorder) EncodedStateDiff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedStateDiff", reflect.TypeOf((*MockL1Data)(nil).EncodedStateDiff), arg0, arg1)
}

// MemoryPageFactContinuousLogs mocks base method.
func (m *MockL1Data) MemoryPageFactContinuousLogs(arg0 context.Context, arg1 [][32]byte, arg2 uint64) ([]*l1data.LogMemoryPageFactContinuous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryPageFactContinuousLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*l1data.LogMemoryPageFactContinuous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryPageFactContinuousLogs indicates an expected call of MemoryPageFactContinuousLogs.
func (mr *MockL1DataMockRecorder) MemoryPageFactContinuousLogs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryPageFactContinuousLogs", reflect.TypeOf((*MockL1Data)(nil).MemoryPageFactContinuousLogs), arg0, arg1, arg2)
}

// MemoryPagesHashesLog mocks base method.
func (m *MockL1Data) MemoryPagesHashesLog(arg0 context.Context, arg1 *big.Int, arg2 uint64) (*l1data.LogMemoryPagesHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryPagesHashesLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(*l1data.LogMemoryPagesHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryPagesHashesLog indicates an expected call of MemoryPagesHashesLog.
func (mr *MockL1DataMockRecorder) MemoryPagesHashesLog(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryPagesHashesLog", reflect.TypeOf((*MockL1Data)(nil).MemoryPagesHashesLog), arg0, arg1, arg2)
}

// StateTransitionFact mocks base method.
func (m *MockL1Data) StateTransitionFact(arg0 context.Context, arg1 uint, arg2 uint64) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateTransitionFact", arg0, arg1, arg2)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateTransitionFact indicates an expected call of StateTransitionFact.
func (mr *MockL1DataMockRecorder) StateTransitionFact(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateTransitionFact", reflect.TypeOf((*MockL1Data)(nil).StateTransitionFact), arg0, arg1, arg2)
}

// StateUpdateLogs mocks base method.
func (m *MockL1Data) StateUpdateLogs(arg0 context.Context, arg1, arg2 uint64) ([]*l1data.LogStateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdateLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*l1data.LogStateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdateLogs indicates an expected call of StateUpdateLogs.
func (mr *MockL1DataMockRecorder) StateUpdateLogs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdateLogs", reflect.TypeOf((*MockL1Data)(nil).StateUpdateLogs), arg0, arg1, arg2)
}

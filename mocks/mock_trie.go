// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/core (interfaces: TrieReader)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_trie.go -package=mocks github.com/NethermindEth/juno/core TrieReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	trie "github.com/NethermindEth/juno/core/trie"
	gomock "go.uber.org/mock/gomock"
)

// MockTrieReader is a mock of TrieReader interface.
type MockTrieReader struct {
	ctrl     *gomock.Controller
	recorder *MockTrieReaderMockRecorder
}

// MockTrieReaderMockRecorder is the mock recorder for MockTrieReader.
type MockTrieReaderMockRecorder struct {
	mock *MockTrieReader
}

// NewMockTrieReader creates a new mock instance.
func NewMockTrieReader(ctrl *gomock.Controller) *MockTrieReader {
	mock := &MockTrieReader{ctrl: ctrl}
	mock.recorder = &MockTrieReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrieReader) EXPECT() *MockTrieReaderMockRecorder {
	return m.recorder
}

// ClassTrie mocks base method.
func (m *MockTrieReader) ClassTrie() (*trie.Trie, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassTrie")
	ret0, _ := ret[0].(*trie.Trie)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClassTrie indicates an expected call of ClassTrie.
func (mr *MockTrieReaderMockRecorder) ClassTrie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassTrie", reflect.TypeOf((*MockTrieReader)(nil).ClassTrie))
}

// StateAndClassRoot mocks base method.
func (m *MockTrieReader) StateAndClassRoot() (*felt.Felt, *felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAndClassRoot")
	ret0, _ := ret[0].(*felt.Felt)
	ret1, _ := ret[1].(*felt.Felt)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StateAndClassRoot indicates an expected call of StateAndClassRoot.
func (mr *MockTrieReaderMockRecorder) StateAndClassRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAndClassRoot", reflect.TypeOf((*MockTrieReader)(nil).StateAndClassRoot))
}

// StorageTrie mocks base method.
func (m *MockTrieReader) StorageTrie() (*trie.Trie, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageTrie")
	ret0, _ := ret[0].(*trie.Trie)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StorageTrie indicates an expected call of StorageTrie.
func (mr *MockTrieReaderMockRecorder) StorageTrie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageTrie", reflect.TypeOf((*MockTrieReader)(nil).StorageTrie))
}

// StorageTrieForAddr mocks base method.
func (m *MockTrieReader) StorageTrieForAddr(arg0 *felt.Felt) (*trie.Trie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageTrieForAddr", arg0)
	ret0, _ := ret[0].(*trie.Trie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageTrieForAddr indicates an expected call of StorageTrieForAddr.
func (mr *MockTrieReaderMockRecorder) StorageTrieForAddr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageTrieForAddr", reflect.TypeOf((*MockTrieReader)(nil).StorageTrieForAddr), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/p2p/sync (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_p2p_client.go -package=mocks github.com/NethermindEth/juno/p2p/sync Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	iter "iter"
	reflect "reflect"

	class "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/class"
	event "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/event"
	header "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/header"
	state "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/state"
	transaction "github.com/starknet-io/starknet-p2pspecs/p2p/proto/sync/transaction"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// RequestBlockHeaders mocks base method.
func (m *MockClient) RequestBlockHeaders(ctx context.Context, req *header.BlockHeadersRequest) (iter.Seq[*header.BlockHeadersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestBlockHeaders", ctx, req)
	ret0, _ := ret[0].(iter.Seq[*header.BlockHeadersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestBlockHeaders indicates an expected call of RequestBlockHeaders.
func (mr *MockClientMockRecorder) RequestBlockHeaders(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestBlockHeaders", reflect.TypeOf((*MockClient)(nil).RequestBlockHeaders), ctx, req)
}

// RequestClasses mocks base method.
func (m *MockClient) RequestClasses(ctx context.Context, req *class.ClassesRequest) (iter.Seq[*class.ClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestClasses", ctx, req)
	ret0, _ := ret[0].(iter.Seq[*class.ClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestClasses indicates an expected call of RequestClasses.
func (mr *MockClientMockRecorder) RequestClasses(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestClasses", reflect.TypeOf((*MockClient)(nil).RequestClasses), ctx, req)
}

// RequestEvents mocks base method.
func (m *MockClient) RequestEvents(ctx context.Context, req *event.EventsRequest) (iter.Seq[*event.EventsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestEvents", ctx, req)
	ret0, _ := ret[0].(iter.Seq[*event.EventsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestEvents indicates an expected call of RequestEvents.
func (mr *MockClientMockRecorder) RequestEvents(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestEvents", reflect.TypeOf((*MockClient)(nil).RequestEvents), ctx, req)
}

// RequestStateDiffs mocks base method.
func (m *MockClient) RequestStateDiffs(ctx context.Context, req *state.StateDiffsRequest) (iter.Seq[*state.StateDiffsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestStateDiffs", ctx, req)
	ret0, _ := ret[0].(iter.Seq[*state.StateDiffsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestStateDiffs indicates an expected call of RequestStateDiffs.
func (mr *MockClientMockRecorder) RequestStateDiffs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestStateDiffs", reflect.TypeOf((*MockClient)(nil).RequestStateDiffs), ctx, req)
}

// RequestTransactions mocks base method.
func (m *MockClient) RequestTransactions(ctx context.Context, req *transaction.TransactionsRequest) (iter.Seq[*transaction.TransactionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTransactions", ctx, req)
	ret0, _ := ret[0].(iter.Seq[*transaction.TransactionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestTransactions indicates an expected call of RequestTransactions.
func (mr *MockClientMockRecorder) RequestTransactions(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTransactions", reflect.TypeOf((*MockClient)(nil).RequestTransactions), ctx, req)
}

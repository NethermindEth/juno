// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/starknetdata (interfaces: StarknetData)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	felt "github.com/NethermindEth/juno/core/felt"
	gomock "github.com/golang/mock/gomock"
)

// MockStarknetData is a mock of StarknetData interface.
type MockStarknetData struct {
	ctrl     *gomock.Controller
	recorder *MockStarknetDataMockRecorder
}

// MockStarknetDataMockRecorder is the mock recorder for MockStarknetData.
type MockStarknetDataMockRecorder struct {
	mock *MockStarknetData
}

// NewMockStarknetData creates a new mock instance.
func NewMockStarknetData(ctrl *gomock.Controller) *MockStarknetData {
	mock := &MockStarknetData{ctrl: ctrl}
	mock.recorder = &MockStarknetDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStarknetData) EXPECT() *MockStarknetDataMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockStarknetData) BlockByNumber(arg0 context.Context, arg1 uint64) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", arg0, arg1)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockStarknetDataMockRecorder) BlockByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockStarknetData)(nil).BlockByNumber), arg0, arg1)
}

// BlockLatest mocks base method.
func (m *MockStarknetData) BlockLatest(arg0 context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockLatest", arg0)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockLatest indicates an expected call of BlockLatest.
func (mr *MockStarknetDataMockRecorder) BlockLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockLatest", reflect.TypeOf((*MockStarknetData)(nil).BlockLatest), arg0)
}

// BlockPending mocks base method.
func (m *MockStarknetData) BlockPending(arg0 context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockPending", arg0)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockPending indicates an expected call of BlockPending.
func (mr *MockStarknetDataMockRecorder) BlockPending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockPending", reflect.TypeOf((*MockStarknetData)(nil).BlockPending), arg0)
}

// Class mocks base method.
func (m *MockStarknetData) Class(arg0 context.Context, arg1 *felt.Felt) (core.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Class", arg0, arg1)
	ret0, _ := ret[0].(core.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Class indicates an expected call of Class.
func (mr *MockStarknetDataMockRecorder) Class(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Class", reflect.TypeOf((*MockStarknetData)(nil).Class), arg0, arg1)
}

// StateUpdate mocks base method.
func (m *MockStarknetData) StateUpdate(arg0 context.Context, arg1 uint64) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdate", arg0, arg1)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockStarknetDataMockRecorder) StateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockStarknetData)(nil).StateUpdate), arg0, arg1)
}

// StateUpdatePending mocks base method.
func (m *MockStarknetData) StateUpdatePending(arg0 context.Context) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdatePending", arg0)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdatePending indicates an expected call of StateUpdatePending.
func (mr *MockStarknetDataMockRecorder) StateUpdatePending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdatePending", reflect.TypeOf((*MockStarknetData)(nil).StateUpdatePending), arg0)
}

// Transaction mocks base method.
func (m *MockStarknetData) Transaction(arg0 context.Context, arg1 *felt.Felt) (core.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(core.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStarknetDataMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStarknetData)(nil).Transaction), arg0, arg1)
}

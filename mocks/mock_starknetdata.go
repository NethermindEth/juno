// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/starknetdata (interfaces: StarknetData)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_starknetdata.go -package=mocks github.com/NethermindEth/juno/starknetdata StarknetData
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	felt "github.com/NethermindEth/juno/core/felt"
	gomock "go.uber.org/mock/gomock"
)

// MockStarknetData is a mock of StarknetData interface.
type MockStarknetData struct {
	ctrl     *gomock.Controller
	recorder *MockStarknetDataMockRecorder
	isgomock struct{}
}

// MockStarknetDataMockRecorder is the mock recorder for MockStarknetData.
type MockStarknetDataMockRecorder struct {
	mock *MockStarknetData
}

// NewMockStarknetData creates a new mock instance.
func NewMockStarknetData(ctrl *gomock.Controller) *MockStarknetData {
	mock := &MockStarknetData{ctrl: ctrl}
	mock.recorder = &MockStarknetDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStarknetData) EXPECT() *MockStarknetDataMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockStarknetData) BlockByNumber(ctx context.Context, blockNumber uint64) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockStarknetDataMockRecorder) BlockByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockStarknetData)(nil).BlockByNumber), ctx, blockNumber)
}

// BlockLatest mocks base method.
func (m *MockStarknetData) BlockLatest(ctx context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockLatest", ctx)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockLatest indicates an expected call of BlockLatest.
func (mr *MockStarknetDataMockRecorder) BlockLatest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockLatest", reflect.TypeOf((*MockStarknetData)(nil).BlockLatest), ctx)
}

// BlockPending mocks base method.
func (m *MockStarknetData) BlockPending(ctx context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockPending", ctx)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockPending indicates an expected call of BlockPending.
func (mr *MockStarknetDataMockRecorder) BlockPending(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockPending", reflect.TypeOf((*MockStarknetData)(nil).BlockPending), ctx)
}

// Class mocks base method.
func (m *MockStarknetData) Class(ctx context.Context, classHash *felt.Felt) (core.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Class", ctx, classHash)
	ret0, _ := ret[0].(core.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Class indicates an expected call of Class.
func (mr *MockStarknetDataMockRecorder) Class(ctx, classHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Class", reflect.TypeOf((*MockStarknetData)(nil).Class), ctx, classHash)
}

// PreConfirmedBlockByNumber mocks base method.
func (m *MockStarknetData) PreConfirmedBlockByNumber(ctx context.Context, blockNumber uint64) (core.PreConfirmed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreConfirmedBlockByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(core.PreConfirmed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreConfirmedBlockByNumber indicates an expected call of PreConfirmedBlockByNumber.
func (mr *MockStarknetDataMockRecorder) PreConfirmedBlockByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreConfirmedBlockByNumber", reflect.TypeOf((*MockStarknetData)(nil).PreConfirmedBlockByNumber), ctx, blockNumber)
}

// StateUpdate mocks base method.
func (m *MockStarknetData) StateUpdate(ctx context.Context, blockNumber uint64) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdate", ctx, blockNumber)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockStarknetDataMockRecorder) StateUpdate(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockStarknetData)(nil).StateUpdate), ctx, blockNumber)
}

// StateUpdatePending mocks base method.
func (m *MockStarknetData) StateUpdatePending(ctx context.Context) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdatePending", ctx)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdatePending indicates an expected call of StateUpdatePending.
func (mr *MockStarknetDataMockRecorder) StateUpdatePending(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdatePending", reflect.TypeOf((*MockStarknetData)(nil).StateUpdatePending), ctx)
}

// StateUpdatePendingWithBlock mocks base method.
func (m *MockStarknetData) StateUpdatePendingWithBlock(ctx context.Context) (*core.StateUpdate, *core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdatePendingWithBlock", ctx)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(*core.Block)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StateUpdatePendingWithBlock indicates an expected call of StateUpdatePendingWithBlock.
func (mr *MockStarknetDataMockRecorder) StateUpdatePendingWithBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdatePendingWithBlock", reflect.TypeOf((*MockStarknetData)(nil).StateUpdatePendingWithBlock), ctx)
}

// StateUpdateWithBlock mocks base method.
func (m *MockStarknetData) StateUpdateWithBlock(ctx context.Context, blockNumber uint64) (*core.StateUpdate, *core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdateWithBlock", ctx, blockNumber)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(*core.Block)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StateUpdateWithBlock indicates an expected call of StateUpdateWithBlock.
func (mr *MockStarknetDataMockRecorder) StateUpdateWithBlock(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdateWithBlock", reflect.TypeOf((*MockStarknetData)(nil).StateUpdateWithBlock), ctx, blockNumber)
}

// Transaction mocks base method.
func (m *MockStarknetData) Transaction(ctx context.Context, transactionHash *felt.Felt) (core.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, transactionHash)
	ret0, _ := ret[0].(core.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStarknetDataMockRecorder) Transaction(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStarknetData)(nil).Transaction), ctx, transactionHash)
}

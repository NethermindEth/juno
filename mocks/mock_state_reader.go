// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/core/state (interfaces: StateReader)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_state_reader.go -package=mocks github.com/NethermindEth/juno/core/state StateReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	felt "github.com/NethermindEth/juno/core/felt"
	commontrie "github.com/NethermindEth/juno/core/state/commontrie"
	gomock "go.uber.org/mock/gomock"
)

// MockStateReader is a mock of StateReader interface.
type MockStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockStateReaderMockRecorder
	isgomock struct{}
}

// MockStateReaderMockRecorder is the mock recorder for MockStateReader.
type MockStateReaderMockRecorder struct {
	mock *MockStateReader
}

// NewMockStateReader creates a new mock instance.
func NewMockStateReader(ctrl *gomock.Controller) *MockStateReader {
	mock := &MockStateReader{ctrl: ctrl}
	mock.recorder = &MockStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateReader) EXPECT() *MockStateReaderMockRecorder {
	return m.recorder
}

// Class mocks base method.
func (m *MockStateReader) Class(classHash *felt.Felt) (*core.DeclaredClassDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Class", classHash)
	ret0, _ := ret[0].(*core.DeclaredClassDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Class indicates an expected call of Class.
func (mr *MockStateReaderMockRecorder) Class(classHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Class", reflect.TypeOf((*MockStateReader)(nil).Class), classHash)
}

// ClassTrie mocks base method.
func (m *MockStateReader) ClassTrie() (commontrie.Trie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassTrie")
	ret0, _ := ret[0].(commontrie.Trie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassTrie indicates an expected call of ClassTrie.
func (mr *MockStateReaderMockRecorder) ClassTrie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassTrie", reflect.TypeOf((*MockStateReader)(nil).ClassTrie))
}

// ContractClassHash mocks base method.
func (m *MockStateReader) ContractClassHash(addr *felt.Felt) (felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractClassHash", addr)
	ret0, _ := ret[0].(felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractClassHash indicates an expected call of ContractClassHash.
func (mr *MockStateReaderMockRecorder) ContractClassHash(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractClassHash", reflect.TypeOf((*MockStateReader)(nil).ContractClassHash), addr)
}

// ContractNonce mocks base method.
func (m *MockStateReader) ContractNonce(addr *felt.Felt) (felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractNonce", addr)
	ret0, _ := ret[0].(felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractNonce indicates an expected call of ContractNonce.
func (mr *MockStateReaderMockRecorder) ContractNonce(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractNonce", reflect.TypeOf((*MockStateReader)(nil).ContractNonce), addr)
}

// ContractStorage mocks base method.
func (m *MockStateReader) ContractStorage(addr, key *felt.Felt) (felt.Felt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStorage", addr, key)
	ret0, _ := ret[0].(felt.Felt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractStorage indicates an expected call of ContractStorage.
func (mr *MockStateReaderMockRecorder) ContractStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStorage", reflect.TypeOf((*MockStateReader)(nil).ContractStorage), addr, key)
}

// ContractStorageTrie mocks base method.
func (m *MockStateReader) ContractStorageTrie(addr *felt.Felt) (commontrie.Trie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStorageTrie", addr)
	ret0, _ := ret[0].(commontrie.Trie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractStorageTrie indicates an expected call of ContractStorageTrie.
func (mr *MockStateReaderMockRecorder) ContractStorageTrie(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStorageTrie", reflect.TypeOf((*MockStateReader)(nil).ContractStorageTrie), addr)
}

// ContractTrie mocks base method.
func (m *MockStateReader) ContractTrie() (commontrie.Trie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractTrie")
	ret0, _ := ret[0].(commontrie.Trie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractTrie indicates an expected call of ContractTrie.
func (mr *MockStateReaderMockRecorder) ContractTrie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractTrie", reflect.TypeOf((*MockStateReader)(nil).ContractTrie))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/rpc (interfaces: Monitor)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMonitor is a mock of Monitor interface.
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// RPCCounterInc mocks base method.
func (m *MockMonitor) RPCCounterInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RPCCounterInc", arg0, arg1)
}

// RPCCounterInc indicates an expected call of RPCCounterInc.
func (mr *MockMonitorMockRecorder) RPCCounterInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCCounterInc", reflect.TypeOf((*MockMonitor)(nil).RPCCounterInc), arg0, arg1)
}

// RPCFailedCounterInc mocks base method.
func (m *MockMonitor) RPCFailedCounterInc(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RPCFailedCounterInc", arg0, arg1)
}

// RPCFailedCounterInc indicates an expected call of RPCFailedCounterInc.
func (mr *MockMonitorMockRecorder) RPCFailedCounterInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCFailedCounterInc", reflect.TypeOf((*MockMonitor)(nil).RPCFailedCounterInc), arg0, arg1)
}
